/*
 * Dark Souls 3 - Open Server
 * Copyright (C) 2021 Tim Leonard
 *
 * This program is free software; licensed under the MIT license. 
 * You should have received a copy of the license along with this program. 
 * If not, see <https://opensource.org/licenses/MIT>.
 */

// Credit: A lot of information here has been derived from the protobufs of AmirBohd's ModEngine2.

syntax = "proto2";
option optimize_for = LITE_RUNTIME;
package Frpg2RequestMessage;

import "Frpg2PlayerData.proto";

// All push messages have field 1 set to a unique id to distinguish what type they are.
// Not sure why they do it in this manner when they already have a perfectly good
// message-id system build into their transport layer. But whatever.
//
// The message-id thats recieved on the reliable udp message layer is always 0x0320, and the first
// field is read to disambiguate the actual message.
enum PushMessageId {
    PushID_PushRequestRemoveSign               = 0x033D;
    PushID_PushRequestSummonSign               = 0x033E;
    PushID_PushRequestRejectSign               = 0x033F;
    PushID_PushRequestJoinQuickMatch           = 0x0340;
    PushID_PushRequestAcceptQuickMatch         = 0x0341;
    PushID_PushRequestRejectQuickMatch         = 0x0342;
    PushID_PlayerInfoUploadConfigPushMessage   = 0x038C;
    PushID_PushRequestEvaluateBloodMessage     = 0x0396;
    PushID_PushRequestBreakInTarget            = 0x03A5;
    PushID_PushRequestRejectBreakInTarget      = 0x03A6;
    PushID_PushRequestAllowBreakInTarget       = 0x03A7;
    PushID_PushRequestVisit                    = 0x03B7;
    PushID_PushRequestRejectVisit              = 0x03B8;
    PushID_PushRequestRemoveVisitor            = 0x03B9;
    PushID_PushRequestNotifyRingBell           = 0x03C9;
    PushID_RegulationFileUpdatePushMessage     = 0x038B;
    PushID_ManagementTextMessage               = 0x0389;
}

// ------------------------------------------------------------------------------------------------------------
// Login Server Messages
// ------------------------------------------------------------------------------------------------------------

// First message sent to the login server, used to request
// the port and server_ip to authenticate over.
message RequestQueryLoginServerInfo {
    required string steam_id = 1;
    optional string f2 = 2;
    required uint64 app_version = 3;                // Guessing a bit here, but a network protocol version would be wise to route to the right servers during updates.
}

// Send in response to RequestQueryLoginServerInfo
message RequestQueryLoginServerInfoResponse {
    required int64 port = 1;
    required string server_ip = 2;
}

// Presumably a message sent instead of RequestQueryLoginServerInfo on xbox
// Probably holds an xbox-specific user-id.
message RequestQueryLoginServerInfoForXboxOne {
    // Unknown
}

// ------------------------------------------------------------------------------------------------------------
// Auth Server Messages
// ------------------------------------------------------------------------------------------------------------

// First message sent to auth server RSA encrypted. Provides a CWC key used
// for encrypting the rest of the traffic.
message RequestHandshake {
    required bytes aes_cwc_key = 1;
}

// Response to initial message, encrypted with CWC.
message RequestHandshakeResponse {
}

// Sent after handshake, all seemingly constant data (apart from the steam_id). 
// Presumably used for ensure we are connecting to a compatible server?
message GetServiceStatus {
    required int64 id = 1;
    required string steam_id = 2;
    optional string unknown_1 = 3;
    required int64 app_version = 4;     // 1.15 = 114 (zero indexed)
}

// Same as above but probably has an xbox one id rather than steam_id.
message GetServiceStatusForXboxOne {
    // Unknown
}

// Response to GetServiceStatus, contains identical data to what is sent
// with the exception of a black steam_id. Presumably if we connected to a dev server
// or something we would get different responses.
message GetServiceStatusResponse {
    required int64 id = 1;
    required string steam_id = 2;
    required int64 unknown_1 = 3;
    required int64 app_version = 4;
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Initialization
// ------------------------------------------------------------------------------------------------------------

message RequestWaitForUserLogin {
    required string steam_id = 1;
    required uint32 unknown_1 = 2;  // 1
    required uint32 unknown_2 = 3;  // 0
    required uint32 unknown_3 = 4;  // 1
    required uint32 unknown_4 = 5;  // 2
}

message RequestWaitForUserLoginResponse {
    required string steam_id = 1;
    required uint32 player_id = 2; 
}

message PlayerInfoUploadConfigPushMessageList {
    repeated uint32 unknown_1 = 1; // Almost sequential count up from 2 to 1059.
    required uint32 unknown_2 = 2; // 5
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Announcements
// ------------------------------------------------------------------------------------------------------------

message AnnounceMessageData {
    required uint32 unknown_1 = 1;  // Seen as 20,104,24, changing it makes no visual difference.
    required uint32 index = 2;
    required uint32 unknown_2 = 3;  // always 1
    required string header = 4;
    required string message = 5;
    required Frpg2PlayerData.DateTime datetime = 6;
}

message AnnounceMessageDataList {
    repeated AnnounceMessageData items = 1;
}

message RequestGetAnnounceMessageList {
    required uint32 max_entries = 1; // Guessing this is what the value is, seems to be constant of 100. 
}

message RequestGetAnnounceMessageListResponse {
    required AnnounceMessageDataList changes = 1;
    required AnnounceMessageDataList notices = 2;
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Character Info Management
// ------------------------------------------------------------------------------------------------------------

message PlayerCharacterData { 
}

message PlayerCharacterID {
    // Unknown
}

// I'm guessing this is used to configure how often the user uploads their info, and in what locations.
message PlayerInfoUploadConfigPushMessage { 
    required PushMessageId push_message_id = 1;                     // 908 - Push message id.
    required PlayerInfoUploadConfigPushMessageList unknown_2 = 2;   // massive list
    required uint32 unknown_3 = 3;                                  // Looks like interval - 600 - 10 minutes
    required uint32 unknown_4 = 4;                                  // Looks like interval - 300 = 5 minutes
}

message RequestUpdateLoginPlayerCharacter {
    required uint32 character_id = 1;                               
    repeated uint32 unknown_2 = 2;                                   // 1, 1, 1, 1, 1, 1, 1, 6, 7
}

message RequestUpdateLoginPlayerCharacterResponse {
    required uint32 character_id = 1;                              
    required QuickMatchRank quickmatch_brawl_rank = 2;   
    required QuickMatchRank quickmatch_dual_rank = 3;   
}

message RequestUpdatePlayerStatus {
    required Frpg2PlayerData.AllStatus status = 1;
}

message RequestUpdatePlayerStatusResponse {
    // Empty Response
}

message RequestUpdatePlayerCharacter {
    required uint32 character_id = 1;          
    required bytes character_data = 2;      
}

message RequestUpdatePlayerCharacterResponse {
    // Empty Response
}

// The GetPlayerCharacter only seems to get called by the Roster of Knights when looking
// at an entries character profile.

message RequestGetPlayerCharacter {
    required uint32 player_id = 1;
    required uint32 character_id = 2;            
}

message RequestGetPlayerCharacterResponse {
    required uint32 player_id = 1;
    required uint32 character_id = 2;           
    required bytes  character_data = 3;         // Seems to contain profile information.
}

// Note: I can't think of anywhere the below requests would get sent. I suspect these might be 
// management artifacts.

message RequestGetLoginPlayerCharacter {
    // Unknown
}

message RequestGetLoginPlayerCharacterResponse {
    // Unknown
}

message RequestGetPlayerCharacterList {
    // Unknown
}

message RequestGetPlayerCharacterListResponse {
    // Unknown
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Blood Messages
// ------------------------------------------------------------------------------------------------------------

message BloodMessageData {
    required uint32 player_id = 1;
    required uint32 character_id = 2;   
    required uint32 message_id = 3; 
    required uint32 good = 4;         
    required bytes  message_data = 5;
    required string player_steam_id = 6;
    required uint32 online_area_id = 7;
    required uint32 poor = 8;                   
}

message LocatedBloodMessage {
    required uint32 online_area_id = 1;
    required uint32 message_id = 2;
}

message BloodMessageDomainLimitData {
    required uint32 online_area_id = 1;
    required uint32 max_type_1 = 2;                     // Unknown differentiation 
    required uint32 max_type_2 = 3;                     // Maximum messages to return in an area seems to be sum of both these?
                                                        // I wonder if this is a split between "online" and "offline" users?
}

message RequestReentryBloodMessage {
    repeated LocatedBloodMessage messages = 1;
    required uint32 character_id = 2;                   
}

message RequestReentryBloodMessageResponse {
    // Seems to be a list of ids that need their data sent to the server again. 
    // If anything is returned RequestReCreateBloodMessageList gets returned after. 
    repeated uint32 recreate_message_ids = 1;       
}

message RequestCreateBloodMessage {
    required uint32 online_area_id = 1;
    required uint32 character_id = 2;                      
    required bytes  message_data = 3;
}

message RequestCreateBloodMessageResponse {
    required uint32 message_id = 1;
}

message RequestReCreateBloodMessageList {
    required uint32 character_id = 2;                     
    repeated group Blood_message_info_list = 3 {
        required uint32 online_area_id = 1;
        required bytes  message_data = 2;
        required uint32 unknown_1 = 3;                  // Seem 0, 2, 1
        required uint32 unknown_2 = 4;                  // Always seems to be 0
    }
}

message RequestReCreateBloodMessageListResponse {
    repeated uint32 message_ids = 1;
}

message RequestRemoveBloodMessage {
    required uint32 online_area_id = 1;
    required uint32 message_id = 2;
}

message RequestRemoveBloodMessageResponse {
    // Empty response.
}

message RequestGetBloodMessageList {
    required uint32 max_messages = 1;                   // Always seems to be 40.
    repeated BloodMessageDomainLimitData search_areas = 2;
}

message RequestGetBloodMessageListResponse {
    repeated BloodMessageData messages = 1;
}

message RequestEvaluateBloodMessage {
    required uint32 online_area_id = 1;
    required uint32 message_id = 2;
    required bool was_poor = 3;
}

message RequestEvaluateBloodMessageResponse {
    // Empty response.
}

message RequestGetBloodMessageEvaluation {
    repeated LocatedBloodMessage messages = 1;
}

message BloodMessageEvaluationData {
    required uint32 message_id = 1;
    required uint32 good = 2;
    required uint32 poor = 3;
}

message RequestGetBloodMessageEvaluationResponse {
    repeated BloodMessageEvaluationData messages = 1;
}

message PushRequestEvaluateBloodMessage {
    required PushMessageId push_message_id = 1; // 918
    required uint32 player_id = 2; 
    required uint32 message_id = 3;
    required string player_steam_id = 4; 
    required bool was_poor = 5; 
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Blood Stains
// ------------------------------------------------------------------------------------------------------------

message BloodstainInfo { 
    required uint32 online_area_id = 1;
    required uint32 bloodstain_id = 2;
    required bytes data = 3;    
}

message RequestCreateBloodstain {
    required uint32 online_area_id = 1;
    required bytes  data = 2;                       
    required bytes  ghost_data = 3;         
}

message RequestGetBloodstainList {
    required uint32 max_stains = 1;                 // Always seems to be 32
    repeated DomainLimitData search_areas = 2;
}

message RequestGetBloodstainListResponse {
    repeated BloodstainInfo bloodstains = 1;
}

message RequestGetDeadingGhost {
    required uint32 online_area_id = 1;    
    required uint32 bloodstain_id = 2;
}

message RequestGetDeadingGhostResponse {
    required uint32 online_area_id = 1;    
    required uint32 bloodstain_id = 2;
    required bytes data = 3;
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Logging
// ------------------------------------------------------------------------------------------------------------

// New for this protobuf, its not defined in DS3, we should fine out what struct
// it actually maps to.
message LogCommonInfo_1 {
    required uint32 unknown_1 = 34; // 0, 1, 2
    required uint32 unknown_2 = 37; // 0, 1
}

// Wraps common information about a log message sent to the server.
message LogCommonInfo {
    required LogCommonInfo_1 unknown_1 = 3;
    required Frpg2PlayerData.UnknownStruct1 unknown_2 = 7;
}

// Sent in RequestNotifyProtoBufLog and used to determine which protobuf
// is serialized in the raw data field.
enum LogType
{
    UseMagicLog = 2020;
    ActGestureLog = 2021;
    UseItemLog = 3000;
    PurchaseItemLog = 3001;
    GetItemLog = 3002;
    DropItemLog = 3003;
    LeaveItemLog = 3004;
    SaleItemLog = 3005;
    StrengthenWeaponLog = 3010;
    GlobalEventLog = 5001;
    SystemOptionLog = 8001;
    VisitResultLog = 7040;
    QuickMatchResultLog = 7050;
    QuickMatchEndLog = 7060;
    // LevelUpLog = 0;                      // Never sent?
    // BrokenEquipmentLog = 0;              // Never sent?
    // AccessWarehouseLog = 0;              // Never sent?
    // RepairEquipmentLog = 0;              // Never sent?
    // EquipMagicLog = 0;                   // Never sent?        
    // ChaneEstusFlaskNumLog = 0;           // Never sent?
    // CreateBloodMessageLog = 0;           // Never sent?
    // EvaluateBloodMessageLog = 0;         // Never sent?
    // ConvertSaveDataLog = 0;
}

message DomainLimitData {
    required uint32 online_area_id = 1;
    required uint32 max_items = 2;
}

message KillerInfo {
    required uint32 killer_player_id = 1;
    required uint32 unknown_2 = 2;              // 25
    required uint32 unknown_3 = 3;              // 2
    required uint32 unknown_4 = 4;              // 18446744073709551615 - Timestamp probably   
}

message KillEnemyInfo {
    required uint32 enemy_type_id = 1;
    required uint32 count = 2;
}

message PartyMemberInfo {
    required uint32 player_id = 1;
    required uint32 char_id = 2;
    required uint32 unknown_2 = 3;
    required uint32 unknown_4 = 4;
    required uint32 unknown_5 = 5;
    required uint32 unknown_6 = 6;
}

// Send periodically throughout the game to send telemetry data. The
// event specific data is stored as a protobuf serialized into the data
// field. Which protobuf it is defined by the type. Look on FpdLogMessage.proto
// for all their definitions.
message RequestNotifyProtoBufLog {
    required LogType type = 1; 
    required bytes common = 2;      // Switching this to bytes, the format of this data seems to vary greatly, not sure its a defined struct.

    // This is an embedded protobuf, its one of the *Log protobufs
    // in the FpdLogMessage.proto file.
    required bytes data = 3;
}

// Sent when user dies.
message RequestNotifyDie {
    required string unknown_1 = 1;                      // "" This occassionally seems to turn into a mosteriously nested struct, I feel like this might be a bytes array.
    required uint32 map_id = 2;         
    required Frpg2PlayerData.Vector location = 3;
    required uint32 unknown_4 = 4;                      // 0
    required uint32 unknown_5 = 5;                      // 477    
    required uint32 unknown_6 = 6;                      // 0
    required uint32 unknown_7 = 7;                      // 10002
    required KillerInfo unknown_8 = 8;                  // { 4006136, 25, 2, 18446744073709551615 }
}

// Sent when user kills an enemy.
message RequestNotifyKillEnemy {
    required LogCommonInfo info = 1;
    repeated KillEnemyInfo enemys = 2;
    required uint32 map_id = 3;
    required Frpg2PlayerData.Vector location = 4;
}

// Sent when user kills the boss of an area (including in coop)
message RequestNotifyKillBoss {
    required string unknown_1 = 1;
    required uint32 boss_id = 2;
    required uint32 unknown_3 = 3;          // 1
    required uint32 unknown_4 = 4;          // 1
    required uint32 unknown_5 = 5;          // 1
    required uint32 unknown_6 = 6;          // 140
    required uint32 map_id = 8;
}

// Sent when user joins another users game, or someone else joins their game.
message RequestNotifyJoinMultiplay { 
    required Frpg2PlayerData.AllStatus all_status = 1;
    required uint32 map_id = 2;
    required uint32 online_area_id = 3;
    required uint32 unknown_2 = 4;
    required uint32 unknown_3 = 5;
    repeated PartyMemberInfo party_member_info = 6;
}

// Sent when user is in a game with no other users connected.
message RequestNotifyLeaveMultiplay {  
    required Frpg2PlayerData.AllStatus all_status = 1;
    required uint32 map_id = 2;
    required uint32 online_area_id = 3;
    required uint32 unknown_2 = 4;
    required uint32 unknown_3 = 5;
    required uint32 unknown_4 = 6;
    repeated PartyMemberInfo party_member_info = 7;
}

// Sent when the user's sign is removed.
message RequestNotifyCreateSignResult {
    required Frpg2PlayerData.AllStatus all_status = 1;
    required uint32 map_id = 2;
    required uint32 online_area_id = 3;
    required Frpg2PlayerData.Vector location = 4;
    required uint32 sign_unique_number = 5;              // 528745087
    required uint32 unknown_2 = 6;                       // 0
    required uint32 unknown_3 = 7;                       // 3
    required uint32 unknown_4 = 8;                       // 2
}

// Sent when user summons a given sign.
message RequestNotifySummonSignResult {
    required string unknown_1 = 1;                      // ""
    required uint32 map_id = 2;
    required uint32 online_area_id = 3;
    required Frpg2PlayerData.Vector location = 4;
    required SignInfo sign_info = 5;
    required uint32 unknown_6 = 6;                       // 0
    required uint32 unknown_7 = 7;                       // 15, 18, 0       0 on fail
    required uint32 unknown_8 = 8;                       // 1, 2            2 on fail, 1 on success
}

// Sent when the user has invaded another game.
message RequestNotifyBreakInResult {
    // Unknown
}

// Seemingly unused.
message RequestNotifyDisconnectSession {
    // Unknown
}

// Seemingly unused.
message RequestNotifyDisconnectSessionResponse {
    // Unknown
}

message RequestNotifyRegisterCharacter {
    required Frpg2PlayerData.AllStatus status = 1;
    required uint32 unknown_2 = 2;                  // 0
    required uint32 unknown_3 = 3;                  // 0
    required uint32 unknown_4 = 4;                  // 6
    required uint32 unknown_5 = 5;                  // 1
    required uint32 unknown_6 = 6;                  // 0
    required uint32 unknown_7 = 7;                  // 2
    required uint32 unknown_8 = 8;                  // 0
    required uint32 unknown_9 = 9;                  // 0
    required uint32 unknown_10 = 10;                // 1
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Summon Signs
// ------------------------------------------------------------------------------------------------------------

// Order of these events appear to be:
//
// As Summonee:
//
//   >> RequestCreateSign
//   << CreateSummonSignResponse
//   >> RequestUpdateSign (Multiple times, seems to keep them alive)
//   >> RequestRemoveSign
//   >> RequestNotifyCreateSignResult
//   << PushRequestSummonSign
//
//   Presumably if its not possible to summon:
//   >> RequestRejectSign
//
// As Summoner:
//   >> RequestSummonSign
//   << PushRequestRemoveSign
//   >> RequestNotifySummonSighResult
//
//   Presumably if its not possible to summon:
//   << PushRequestRejectSign

enum Covenant
{
    Covenant_None = 0;
    Covenant_Blade_of_the_Darkmoon = 1;
    Covenant_Warriors_of_Sunlight = 2;
    Covenant_Mound_Makers = 3;
    Covenant_Spears_of_the_Church = 4;
    Covenant_Fingers_of_Rosaria = 5;
    Covenant_Watchdogs_of_Farron = 6;
    Covenant_Aldrich_Faithfuls = 7;
    Covenant_Way_of_Blue = 8;
    Covenant_Blue_Sentinels = 9;
}

message SummonSignMessage {
    required uint32 player_id = 1;
    required string steam_id = 2;
    required SignInfo sign_info = 3;
    required bytes player_struct = 4;
}

message RemoveSignMessage {
    required uint32 player_id = 1;
    required uint32 sign_id = 2;
}

message RejectSignMessage {
    required uint32 sign_id = 1;
    required uint32 unknown_2 = 2;      // Usually just 1, maybe an error-code of some type?
}

message CachedSign {
    // Unknown
}

message GetSignResult {
    repeated SignInfo sign_info_without_data = 1;       // Gets sent back if already_have_signs in SignDomainGetInfo gets passed with the sign and they still exist.
    repeated SignData sign_data = 2;
}

message SignInfo {
    required uint32 player_id = 1;
    required uint32 sign_id = 2;
}

message SignData {
    required SignInfo sign_info = 1;
    required uint32 online_area_id = 2;
    required MatchingParameter matching_parameter = 3;
    required bytes player_struct = 4;
    required string steam_id = 5;                       // sometimes a steamid, sometimes a 3 value substruct
    required uint32 is_red_sign = 6;                    // I *think* this is correct, needs further testing.
}

message MatchingParameter {
    required uint32 unknown_id_1 = 1;                     // 1350000
    required uint32 unknown_id_2 = 2;                     // 2
    required uint32 unknown_id_3 = 3;                     // 1,0
    required uint32 unknown_id_4 = 4;                     // 1
    required uint32 unknown_id_5 = 5;                     // 0
    required uint32 soul_level = 6;
    required uint32 soul_memory = 7;
    optional string unknown_string = 8;
    required uint32 unknown_id_9 = 9;                     // 0, 1, 7
    required string password = 10;
    required Covenant covenant = 11;
    required uint32 weapon_level = 14;
}

message SignGetFlags {
    required uint32 unknown_id_1 = 1;                     // 1
    required uint32 unknown_id_2 = 2;                     // 1
    required uint32 unknown_id_3 = 3;                     // 0
}

message SignDomainGetInfo {
    required uint32 online_area_id = 1;                     // 30004
    required uint32 max_signs = 2;                          // 32
    repeated SignInfo already_have_signs = 3;
}

message RequestGetSignList {
    required uint32 unknown_id_1 = 1;                       // Always 0
    repeated SignDomainGetInfo search_areas = 2;
    required uint32 max_signs = 3;                          // 0
    required MatchingParameter matching_parameter = 4;
    required SignGetFlags sign_get_flags = 5;
}

message RequestGetSignListResponse {
    optional GetSignResult get_sign_result = 1;
}

message RequestCreateSign {
    required uint32 map_id = 1;
    required uint32 online_area_id = 2;
    required MatchingParameter matching_parameter = 3;
    required bool is_red_sign = 4;
    required bytes player_struct = 5;
}

message RequestCreateSignResponse {
    required uint32 sign_id = 1;
}

message RequestSummonSign {
    required uint32 map_id = 1;
    required uint32 online_area_id = 2;
    required SignInfo sign_info = 3;
    required bytes player_struct = 4;
}

message RequestSummonSignResponse {
    // Empty response.
}

message RequestRemoveSign {
    required uint32 map_id = 1;
    required uint32 online_area_id = 2;
    required uint32 sign_id = 3;
}

message RequestRemoveSignResponse {
    // Empty response.
}

message RequestUpdateSign {
    required uint32 map_id = 1;
    required uint32 online_area_id = 2;
    required uint32 sign_id = 3;
}

message RequestUpdateSignResponse {
    // Empty response.
}

message RequestRejectSign {
    required uint32 unknown_1 = 1;              // 50331088
    required uint32 unknown_2 = 2;              // 587202560
    required uint32 sign_id = 3;
    required bool unknown_4 = 4;                // 1
    required bool unknown_5 = 5;                // 1
}

message RequestRejectSignResponse {
    // Empty response.
}

message RequestGetRightMatchingArea {
    required MatchingParameter matching_parameter = 1;
    required uint32 unknown = 2;
}

message RequestGetRightMatchingAreaResponse {          
    repeated group Area_info = 1 {
        required uint32 online_area_id = 1;
        required uint32 population = 2;             // Seems to be on a scale of 0-5.
    }
}

message PushRequestRemoveSign {
    required PushMessageId push_message_id = 1;     // 829
    required RemoveSignMessage message = 2;
}

message PushRequestSummonSign {
    required PushMessageId push_message_id = 1;     // 830
    required SummonSignMessage message = 2;
}

message PushRequestRejectSign {
    // Guessing a bit on this one as haven't got it in the wild yet. But they all follow the same pattern.
    required PushMessageId push_message_id = 1;
    required RejectSignMessage message = 2;
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Break In Messages
// ------------------------------------------------------------------------------------------------------------

// Order of these events are:
//
//      Invader        >> RequestGetBreakInTargetList
//      Invader        << RequestGetBreakInTargetListResponse
//      Invader        >> RequestBreakInTarget
//      Host           << PushRequestBreakInTarget
//      Host           >> RequestRejectBreakInTarget or RequestSendMessageToPlayers (containing PushRequestAllowBreakInTarget)
//      Invader        << PushRequestAllowBreakInTarget PushRequestRejectBreakInTarget
//      Invader        >> RequestNotifyBreakInResult

message BreakInTargetData {
    required uint32 player_id = 1;
    required string steam_id = 2;
}

message RequestGetBreakInTargetList { 
    required uint32 map_id = 1;
    required uint32 online_area_id = 2;
    required uint32 max_targets = 3;                       
    required MatchingParameter matching_parameter = 4;
    required uint32 unknown_5 = 5;                          // 0
}

message RequestGetBreakInTargetListResponse {
    required uint32 map_id = 1;
    required uint32 online_area_id = 2;
    repeated BreakInTargetData target_data = 3;
}

message PushRequestAllowBreakInTarget { 
    required PushMessageId push_message_id = 1;
    required uint32 player_id = 2;                          // Host playerid
    required bytes  player_struct = 3;
    required uint32 unknown_4 = 4;                          // 0
}

message PushRequestBreakInTarget { 
    required PushMessageId push_message_id = 1;
    required uint32 player_id = 2;                          // invading playerid
    required string steam_id = 3;       
    required uint32 unknown_4 = 4;                          // 0
    required uint32 map_id = 5;
    required uint32 online_area_id = 6;
}

message PushRequestRemoveBreakInTarget {
    required PushMessageId push_message_id = 1;

    // Unknown - Never actually seen the server ever send this.

    // Unknown - The fields in this have been figured out based on reading ghidra, not seen in the wild.
    required uint32 unknown_2 = 2;
    required string unknown_3 = 3;                          // WIRETYPE_LENGTH_DELIMITED, guessing string, might be BreakInTargetData
    required uint32 unknown_4 = 4;
}

message RequestBreakInTarget {
    required uint32 map_id = 1;
    required uint32 online_area_id = 2;
    required uint32 player_id = 3;
    required uint32 unknown_4 = 4;                          // Seems to always be 0
}

message RequestRejectBreakInTarget {
    required uint32 player_id = 1;                         
    required uint32 unknown_2 = 2;                          // 1
    required uint32 map_id = 3;
    required uint32 online_area_id = 4;
    required uint32 unknown_5 = 5;                          // 0
}

message PushRequestRejectBreakInTarget {
    required PushMessageId push_message_id = 1;            // 934
    required uint32 player_id = 2;
    required uint32 unknown_3 = 3;                         // 1
    required string steam_id = 4;                           
    required uint32 unknown_5 = 5;                         // 0
}

message RequestBreakInTargetResponse {
    // Empty response.
}

message RequestRejectBreakInTargetResponse {
    // Empty response.
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Ghost Data
// ------------------------------------------------------------------------------------------------------------

message RequestGetGhostDataList {
    required uint32 max_ghosts = 1;                 // Always seems to be 3
    repeated DomainLimitData search_areas = 2;
}

message GhostData {
    required uint32 unknown_1 = 1;                  // Always seems to be 0.
    required uint32 ghost_id = 2;
    required bytes  data = 3;
}

message RequestCreateGhostData {
    required uint32 online_area_id = 1;
    required bytes data = 2;
}

message RequestCreateGhostDataResponse {
    // Empty response.
}

message RequestGetGhostDataListResponse {
    repeated GhostData ghosts = 1;
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Vistors (Join via covenenant I think)
// ------------------------------------------------------------------------------------------------------------

// Seems to basically work the same as invasions just without the PushRequestAllowBreakInTarget exchange step.

// Order of these events:
//
//      Host >> RequestGetVisitorList
//      Host << RequestGetVisitorListResponse
//      Host >> RequestVisit
//      Summonee << PushRequestVisit
//      Host << PushRequestRemoveVisitor
//      Sumoneee >> VisitResultLog
//
// Side note the frequency of request calls for watchdogs is all over the place, I'm not suprised people never see
// them being summoned.

// I think this is basically just the pool of visitors we request from.
enum VisitorPool
{
    VisitorPool_None                    = -1;   // Not used in network, just handy sentinel value for server code.
    VisitorPool_Way_of_Blue             = 0;    // This grabs darkmoon & blue sentinels
                                                // No idea what 1 is, doesn't look like its used anywhere.
    VisitorPool_Watchdog_of_Farron      = 2;
    VisitorPool_Aldrich_Faithful        = 3;
    VisitorPool_Spear_of_the_Church     = 4;
}

message RequestGetVisitorList {
    required uint32 map_id = 1;   
    required uint32 online_area_id = 2;   
    required uint32 max_visitors = 3;
    required MatchingParameter matching_parameter = 4;
    required VisitorPool visitor_pool = 5;                      
    required uint32 unknown_6 = 6;                              // 0
}

message VisitorData {
    required uint32 player_id = 1;
    required string player_steam_id = 2;
}

message RequestGetVisitorListResponse {
    required uint32 map_id = 1;   
    required uint32 online_area_id = 2;  
    repeated VisitorData visitors = 3;
}

message PushRequestRemoveVisitor {
    required PushMessageId push_message_id = 1;     
    required uint32 player_id = 2;
    required string player_steam_id = 3;
    required VisitorPool visitor_pool = 4;                           
}

message RequestVisit {
    required uint32 map_id = 1;   
    required uint32 online_area_id = 2;   
    required VisitorPool visitor_pool = 3;        
    required uint32 player_id = 4;              
    required bytes  data = 5;
}

message PushRequestVisit {
    required PushMessageId push_message_id = 1;         // 951 - Push message id
    required uint32 player_id = 2; 
    required string player_steam_id = 3;
    required bytes  data = 4;                           
    required VisitorPool visitor_pool = 5;       
    required uint32 map_id = 6;
    required uint32 online_area_id = 7;
}

message RequestRejectVisit {
    required uint32 player_id = 1;                         
    required VisitorPool visitor_pool = 2;              // total guess might be unknown_5 
    required uint32 map_id = 3;
    required uint32 online_area_id = 4;
    required uint32 unknown_5 = 5;                      // 0  
}

message PushRequestRejectVisit {
    required PushMessageId push_message_id = 1;
    
    // Unknown - The fields in this have been figured out based on reading ghidra and looking at BreakIn code, not seen in the wild.
    required uint32 player_id = 2;
    required VisitorPool visitor_pool = 3;              // total guess might be unknown_5   
    required string steam_id = 4;                           
    required uint32 unknown_5 = 5;                         
}

message RequestVisitResponse {
    // Empty response.
}

message RequestRejectVisitResponse {
    // Empty response.
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Bells, this is for archdragon peak I believe.
// ------------------------------------------------------------------------------------------------------------

message RequestNotifyRingBell {
    required uint32 online_area_id = 1;    
    required bytes  data = 2;                   // "\001\000\000\000\004\000\000\000\001\000\000\000"
}

message RequestNotifyRingBellResponse {
    // Empty response.
}

message PushRequestNotifyRingBell {
    required PushMessageId push_message_id = 1;     // Almost certainly a push message id.
    required uint32 player_id = 2;    
    required uint32 online_area_id = 3;    
    required bytes  data = 4;                   // "\001\000\000\000\004\000\000\000\002\000\000\000" or "\001\000\000\000\004\000\000\000\001\000\000\000"
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Misc
// ------------------------------------------------------------------------------------------------------------

message RequestBenchmarkThroughput {
    // Unknown
}

message RequestBenchmarkThroughputResponse {
    // Unknown
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Regulation Files
// ------------------------------------------------------------------------------------------------------------

message RequestGetRegulationFile {
    // Unknown
}

message RequestGetRegulationFileResponse {
    // Unknown
}

message RegulationFileMessage {
    // Unknown
}

message RegulationFileDiffData {
    // Unknown
}

message RegulationFileUpdateMessage {
    // Unknown
}

message RegulationFileUpdatePushMessage {
    required PushMessageId push_message_id = 1;
    // Unknown
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Networking
// ------------------------------------------------------------------------------------------------------------

message RequestMeasureUploadBandwidth {
    // Unknown
}

message RequestMeasureUploadBandwidthResponse {
    // Unknown
}

message RequestMeasureDownloadBandwidth {
    // Unknown
}

message RequestMeasureDownloadBandwidthResponse {
    // Unknown
}

message RequestSendMessageToPlayers { 
    repeated uint32 player_ids = 1; 
    required bytes message = 2;     // This is normally a push message, the first field of which is an id to distinguish what type it is.
}

message RequestSendMessageToPlayersResponse {
    // Unknown
}

message RequestSendMessageToSelectLanguagePlayers {
    // Unknown
}

message RequestSendMessageToSelectLanguagePlayersResponse {
    // Unknown
}

message RequestSendMessageToAllPlayers {
    // Unknown
}

message RequestSendMessageToAllPlayersResponse {
    // Unknown
}

message RequestSendPlayerList {
    // Unknown
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Ranking (I'm assuming this is for covenants)
// ------------------------------------------------------------------------------------------------------------

message RankingData {
    required uint32 player_id = 1;  
    required uint32 character_id = 2;   
    required uint32 serial_rank = 3;    // Index of rank globally, no duplicates.
    required uint32 rank = 4;           // Rank of player, may be duplicates if multiple players have same score.
    required uint32 score = 5;          
    required bytes  data = 6;           // Payload of some description. Contains steam-id and various other things inside it. My guess is its as RankingDataPack
}

message RankingRotationID {
    // Unknown
}

message RankingRecordCount {
    // Unknown
}

message RankingDataPack {
    // Unknown
}

message RequestRegisterRankingData {
    required uint32 board_id = 1;     
    required uint32 character_id = 2;     
    required uint32 score = 3;         
    required bytes  data = 4;           // Probably a serialized RankingDataPack
}

message RequestRegisterRankingDataResponse {
    // Empty Response.
}

message RequestGetRankingData {
    required uint32 board_id = 1;     
    required uint32 offset = 2;       // 1-indexed.
    required uint32 count = 3;         
}

message RequestGetRankingDataResponse {
    repeated RankingData data = 1;
}

message RequestGetCharacterRankingData {
    required uint32 board_id = 1;       
    required uint32 character_id = 2; 
}

message RequestGetCharacterRankingDataResponse {
    optional RankingData data = 1;
}

message RequestCountRankingData {
    required uint32 board_id = 1;       
}

message RequestCountRankingDataResponse {
    required uint32 count = 1;
}

message RequestGetCurrentRank {
    // Unknown - Never seen the client send this when using ranked functionality.
}

message RequestGetCurrentRankResponse {
    // Unknown
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Online shop - This for showing DLC?
// ------------------------------------------------------------------------------------------------------------

message RequestGetOnlineShopItemList {
    // Unknown
}

message RequestGetOnlineShopItemListResponse {
    message Lineup {
        // Unknown
    }
    // Unknown
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Quick Matches (Undead Matches)
// ------------------------------------------------------------------------------------------------------------

// >> RequestSearchQuickMatch
// << RequestSearchQuickMatchResponse
// 
// Match found:
// >> RequestJoinQuickMatch
// << PushRequestAcceptQuickMatch / PushRequestRejectQuickMatch
//
// Nothing Found:
// >> RequestRegisterQuickMatch
// >> RequestUpdateQuickMatch
// 
//  Give up:
//      >> QuickMatchResultLog
//      >> RequestUnregisterQuickMatch
//
//  Find match:
//      << PushRequestJoinQuickMatch
//      >> RequestAcceptQuickMatch
//      >> QuickMatchResultLog
//      >> RequestUnregisterQuickMatch
//      >> RequestSendQuickMatchStart
//      << RequestSendQuickMatchStartResponse       
//      >> RequestSendQuickMatchResult              Not sent if using password matching.
//      << RequestSendQuickMatchResultResponse
//      >> QuickMatchEndLog

enum QuickMatchGameMode {
    Duel = 0;
    TwoPlayerBrawl = 1;
    FourPlayerBrawl = 2;
    SixPlayerBrawl = 3;
    // Brawl (Group) searchs for Four and Six then registers for Six.
    TwoVersusTwo = 4;
    ThreeVersusThree = 5;
    // Co-op Match (Group) search for TwoVersusTwo and ThreeVersusThree then registers for ThreeVersusThree

    // Team matches are used if you set "password applies to: Friendly team only"
    TwoVersusTwo_Team = 6;
    ThreeVersusThree_Team = 7;
}

message QuickMatchRank {
    optional uint32 rank = 1;       
    optional uint32 xp = 2;         
}

message QuickMatchRankCache {
    // Unknown
}

message QuickMatchSession {
    message Result_list {
        // Unknown
    }
    // Unknown
}

message QuickMatchApologyPoint {
    // Unknown
}

message QuickMatchData {
    required uint32 host_player_id = 1;      
    required string host_player_steam_id = 2;       // Not sure this is right, looks like { 6:49, 6:0x6535313130303030, 12:0x31393834 }    
    required uint32 online_area_id = 3;             
}

message QuickMatchSearchResult {
    optional QuickMatchData data = 2;
    required uint32 unknown_3 = 3;                  // Always 0
    required uint32 unknown_4 = 4;                  // Always 0
}

message AcceptQuickMatchMessage {
    required uint32 host_player_id = 1;  
    required string host_player_steam_id = 2;
    required bytes  metadata = 3;   
}

message RejectQuickMatchMessage {
    // Based on ghidra, not managed to reproduce in-game.
    required uint32 host_player_id = 1;  
    required string host_player_steam_id = 2;
}

message RemoveQuickMatchMessage {
    // Unknown
}

message JoinQuickMatchMessage {
    required uint32 join_player_id = 1;
    required string join_player_steam_id = 2;
    required uint32 unknown_3 = 3;                  // 1, 14
    required uint32 online_area_id = 4;             
    required uint32 unknown_5 = 5;                  // 0
    required string unknown_6 = 6;                  // ""
}

message PushRequestJoinQuickMatch {
    required PushMessageId push_message_id = 1;                  // 832
    required JoinQuickMatchMessage message = 2;
}

message PushRequestAcceptQuickMatch {
    required PushMessageId push_message_id = 1;                  // 833
    required AcceptQuickMatchMessage message = 2;
}

message PushRequestRejectQuickMatch {
    // Based on ghidra, not managed to reproduce in-game.
    required PushMessageId push_message_id = 1;                     // 0x0342
    required RejectQuickMatchMessage message = 2;
}

message RequestSearchQuickMatch {
    required QuickMatchGameMode mode = 1;
    repeated group Map_id_list = 2 {
        required uint32 map_id = 1;
        required uint32 online_area_id = 2;
    }
    required uint32 unknown_3 = 3;                      // 5    
    required MatchingParameter matching_parameter = 4;
}

message RequestSearchQuickMatchResponse {
    repeated QuickMatchSearchResult matches = 1;
}

message RequestRegisterQuickMatch {
    required QuickMatchGameMode mode = 1;
    required uint32 map_id = 2;
    required uint32 online_area_id = 3; 
    required MatchingParameter matching_parameter = 4;
    required uint32 unknown_5 = 5;                      // 0
}

message RequestUnregisterQuickMatch {
    required QuickMatchGameMode mode = 1;
    required uint32 map_id = 2;
    required uint32 online_area_id = 3; 
    required uint32 unknown_4 = 4;                      // 0
}

message RequestRegisterQuickMatchResponse {
    // Empty response.
}

message RequestUnregisterQuickMatchResponse {
    // Empty response.
}

message RequestUpdateQuickMatch {
    required QuickMatchGameMode mode = 1;
    required uint32 map_id = 2;
    required uint32 online_area_id = 3; 
}

message RequestUpdateQuickMatchResponse {
    // Empty response.
}

message RequestJoinQuickMatch {
    required QuickMatchGameMode mode = 1;
    required uint32 unknown_2 = 2;                  // 1
    required uint32 host_player_id = 4;              
    required uint32 map_id = 5;                  
    required uint32 online_area_id = 6;             
    required uint32 unknown_7 = 7;                  // 0
    required string password = 8;                   // ""
}

message RequestJoinQuickMatchResponse {
    // Empty response.
}

message RequestAcceptQuickMatch {
    required QuickMatchGameMode mode = 1;
    required uint32 join_player_id = 4;                           
    required bytes  data = 5;                  
}

message RequestAcceptQuickMatchResponse {
    // Empty response.
}

message RequestRejectQuickMatch {
    required QuickMatchGameMode mode = 1;
    required uint32 map_id = 2;  
    required uint32 online_area_id = 3;
    required uint32 join_player_id = 4; 
    required uint32 unknown_5 = 5;              // 2
}

message RequestRejectQuickMatchResponse {
    // Empty response.
}

message RequestSendQuickMatchStart {
    required uint32 unknown_1 = 1;                  // 0                <- Probably game mode?
    repeated group  Session_member_list = 2 {
        required uint32 player_id = 1;
        required uint32 unknown_2 = 2;              // 1, 14        (Might be unknown_3 from JoinQuickMatchMessage)
    }
}

message RequestSendQuickMatchStartResponse {
    // Empty response.
}

enum QuickMatchResult{
    QuickMatchResult_Win = 0;
    QuickMatchResult_Lose = 1;
    QuickMatchResult_Draw = 2;
}

message RequestSendQuickMatchResult {
    required uint32 unknown_1 = 1;                      // 0            <- Probably game mode?
    required uint32 unknown_2 = 2;                      // 1
    required QuickMatchResult result = 3;               // 0, 1     0 if win, 1 if lose, 2 if draw
    required bool local_won = 4;                        // 0, 1     1 if win, 0 if lose, 0 if draw
    required QuickMatchRank remote_rank = 5;            // lose{ 0, 0 }                         win{ 0, 0 } { 0, 0 } { 0, 0 } { 0, 0 } { 0, 0 }
    required QuickMatchRank local_rank = 6;             // lose{ 0, 0 } { 0, 750 } { 0, 1500 }  win{ 0, 2250 } { 0, 4500 } { 0, 6750 } { 0, 9000 } { 1, 2000 }
    required string unknown_7 = 7;                      // Looks like a timestamp + player_id "202108171531370006872049"
}

message RequestSendQuickMatchResultResponse {
    required uint32 unknown_1 = 1;                      // 0            <- Probably game mode?
    required QuickMatchRank new_local_rank = 2;         // { 0, 750 } { 0, 1500 } { 0, 2250 } { 0, 4450 } { 0, 6750 } { 0, 9000 } { 1, 2000 } { 1, 2200 }
}

message RequestPushSendQuickMatchStart {
    // Unknown - Not seen this send by client.
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Marks
// ------------------------------------------------------------------------------------------------------------

// This is all cut content from map ceremonies. We can ignore all of this.

message RitualMarkData {
    // Unknown
}

message LocatedRitualMark {
    // Unknown
}

message RitualMarkDomainLimit {
    // Unknown
}

message RequestCreateMark {
    // Unknown
}

message RequestCreateMarkResponse {
    // Unknown
}

message RequestRemoveMark {
    // Unknown
}

message RequestRemoveMarkResponse {
    // Unknown
}

message RequestReentryMark {
    // Unknown
}

message RequestReentryMarkResponse {
    // Unknown
}

message RequestGetMarkList {
    // Unknown
}

message RequestGetMarkListResponse {
    // Unknown
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Misc, most of these seem like artifacts from management tools?
// ------------------------------------------------------------------------------------------------------------

message LoginForXboxOne {
    // Unknown
}

message SocketOptionSetting {
    // Unknown
}

message GetConnectGameServerPortIdResponse {
    // Unknown
}

message UserLogout {
    // Unknown
}

message ManagementTextMessage {
    required PushMessageId push_message_id = 1;
    required string unknown_2 = 2;
    required string unknown_3 = 3;
    required uint32 unknown_4 = 4;
    required uint32 unknown_5 = 5;
}

message NRLogUploadRequest {
    // Unknown
}

message NRLoggingMessage {
    // Unknown
}

message ServerPing {
    // Unknown
}

message NotifyClientServerInfoToPushServer {
    // Unknown
}

message PushLoginUserInfo {
    // Unknown
}

message NotifyLoginToPushServer {
    // Unknown
}

message NotifyLogoutToPushServer {
    // Unknown
}

message RequestCheckLogin {
    // Unknown
}

message UserLoginInfo {
    // Unknown
}

message PushRequestHeader {
    required PushMessageId push_message_id = 1;
}

message RangedLimit {
    // Unknown
}

message PlayerUserIDPair {
    // Unknown
}

message PlayerStatusUploadConfig {
    // Unknown
}

message LoginClientInfo {
    // Unknown
}

message RequestCheckLoginResponse {
    // Unknown
}

message RequestGetPlayerConnectGameServer {
    // Unknown
}

message PlayerConnectServerInfo {
    // Unknown
}

message RequestGetPlayerConnectGameServerResponse {
    // Unknown
}

message RequestGetServerConnectTime {
    // Unknown
}

message RequestGetServerConnectTimeResponse {
    // Unknown
}

message RequestGetConnectionCount {
    // Unknown
}

message RequestGetConnectionCountResponse {
    // Unknown
}

message RequestDisconnectUser {
    // Unknown
}

message RequestDisconnectAllUser {
    // Unknown
}

message RequestSendMessageToPushClient {
    // Unknown
}

message RequestGetServerSidePlayerStatus {
    // Unknown
}