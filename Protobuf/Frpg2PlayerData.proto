/*
 * Dark Souls 3 - Open Server
 * Copyright (C) 2021 Tim Leonard
 *
 * This program is free software; licensed under the MIT license. 
 * You should have received a copy of the license along with this program. 
 * If not, see <https://opensource.org/licenses/MIT>.
 */

// Credit: A lot of information here has been derived from the protobufs of AmirBohd's ModEngine2.

syntax = "proto2";
option optimize_for = LITE_RUNTIME;
package Frpg2PlayerData;

message DateTime {
    required uint32 year = 1;
    required uint32 month = 2;
    required uint32 day = 3;
    required uint32 hours = 4;
    required uint32 minutes = 5;
    required uint32 seconds = 6;
    required uint32 tzdiff = 7; 
}

message UnknownStruct1 {
    optional int64 unknown_1 = 1;   // Always seems to be 3576692768, wondering if this is an offline id of some description?
    optional string unknown_2 = 2;  // Mostly unused, when this is filled in it looks like a timestamp followed by the player id. eg. 202108092109340005938762
    optional int64 unknown_3 = 3;   // Always seems to be either -1 or 0
}

message AllStatus {
    optional PlayerLocation player_location = 1;
    optional LogInfo log_info = 2;
    optional PlayerStatus player_status = 3;
    optional PlayData play_data = 4;
    optional StatsInfo stats_info = 5;
    optional Equipment equipment = 6;
    optional UnknownStruct1 unknown_1 = 7;
}

message PlayerStatus {
    optional int32 soul_level = 4; 
    repeated int32 recent_online_areas = 17;
    repeated uint32 unknown2 = 18; //0 or 1
    optional int32 hp = 23;
    optional int32 max_hp = 24;
    optional int32 base_max_hp = 25;
    optional int32 fp = 26;
    optional int32 max_fp = 27;
    optional int32 base_max_fp = 28;
    optional int32 stamina = 29;
    optional int32 max_stamina = 30;
    optional int32 base_max_stamina = 31;
    optional string name = 38;
    optional int32 vigor = 40;
    optional int32 attunement = 41;
    optional int32 endurance = 42;
    optional int32 vitality = 43;
    optional int32 strength = 44;
    optional int32 dexterity = 45;
    optional int32 intelligence = 46;
    optional int32 faith = 47;
    optional int32 luck = 48;
    optional DefenseInfo defense_info = 58;
    optional CutRateInfo cutrate_info = 59;
    optional ResistanceInfo armor_resistance_info = 60;
    optional ResistanceInfo base_resistance_info = 61;
}

message PlayData {
    optional uint32 unknown_1 = 1; //144680
    optional uint32 unknown_2 = 4; //0
    optional uint32 unknown_3 = 5; //0
    optional uint32 unknown_4 = 6; //5
    optional uint32 unknown_5 = 7; //11
    optional BonfireInfo bonfire_info = 8;
}

message LogInfo {
    optional uint32 unknown_1 = 1; //144680
    optional uint32 unknown_2 = 6; //24
    optional uint32 unknown_3 = 7; //404
    optional uint32 unknown_4 = 8; //0
    optional uint32 unknown_5 = 9; //3
    optional uint32 unknown_6 = 10; //78
}

message StatsInfo {
    optional uint32 unknown_1 = 1;
    optional uint32 unknown_2 = 2;
    optional uint32 unknown_3 = 3;
    optional uint32 unknown_4 = 4;
    optional uint32 unknown_5 = 5;
    optional uint32 unknown6 = 6;
    optional DateTime date_time_1 = 7;
    optional DateTime date_time_2 = 8;
}

message Equipment {
    optional int32 left_weapon_1 = 1;
    optional int32 left_weapon_2 = 2;
    optional int32 left_weapon_3 = 3;
    optional int32 right_weapon_1 = 4;
    optional int32 right_weapon_2 = 5;
    optional int32 right_weapon_3 = 6;
    optional int32 head = 7;
    optional int32 chest = 8;
    optional int32 hands = 9;
    optional int32 legs = 10;
    optional int32 ring_1 = 11;
    optional int32 ring_2 = 12;
    optional int32 ring_3 = 13;
    optional int32 ring_4 = 14;
    optional int32 quick_item_1 = 15;
    optional int32 quick_item_2 = 16;
    optional int32 quick_item_3 = 17;
    optional int32 quick_item_4 = 18;
    optional int32 quick_item_5 = 19;
    optional int32 quick_item_6 = 20;
    optional int32 quick_item_7 = 21;
    optional int32 quick_item_8 = 22;
    optional int32 quick_item_9 = 23;
    optional int32 quick_item_10 = 24;
    optional int32 tool_belt_1 = 25;
    optional int32 tool_belt_2 = 26;
    optional int32 tool_belt_3 = 27;
    optional int32 tool_belt_4 = 28;
    optional int32 tool_belt_5 = 29;
    optional int32 arrow_1 = 30;
    optional int32 arrow_2 = 31;
    optional int32 bolt_1 = 32;
    optional int32 bolt_2 = 33;
    optional int32 spell_1 = 34;
    optional int32 spell_2 = 35;
    optional int32 spell_3 = 36;
    optional int32 spell_4 = 37;
    optional int32 spell_5 = 38;
    optional int32 spell_6 = 39;
    optional int32 spell_7 = 40;
    optional int32 spell_8 = 41;
    optional int32 spell_9 = 42;
    optional int32 spell_10 = 43;
    optional int32 spell_11 = 44;
    optional int32 spell_12 = 45;
    optional int32 spell_13 = 46;
    optional int32 spell_14 = 47;
    optional int32 unknown_0 = 48;
    optional int32 unknown_1 = 49;
    optional int32 unknown_2 = 50;
    optional int32 unknown_3 = 51;
    optional int32 unknown_4 = 52;
    optional int32 unknown_5 = 53;
    optional int32 unknown_6 = 54;
    optional int32 unknown_7 = 55;
    optional int32 unknown_8 = 56;
    optional int32 unknown_9 = 57;
    optional int32 unknown_10 = 58;
    optional int32 unknown_11 = 59;
    optional int32 unknown_12 = 60;
}

message PlayerLocation {
    optional uint32 online_area_id_lower = 1;
    optional uint32 online_area_id_upper = 2;
}

message DefenseInfo {
    optional uint32 physical = 1;
    optional uint32 strike = 2;
    optional uint32 slash = 3;
    optional uint32 thrust = 4;
    optional uint32 magic = 5;
    optional uint32 fire = 6;
    optional uint32 lightning = 7;
    optional uint32 dark = 8;
}

message CutRateInfo {
    optional float physical = 1;
    optional float strike = 2;
    optional float slash = 3;
    optional float thrust = 4;
    optional float magic = 5;
    optional float fire = 6;
    optional float lightning = 7;
    optional float dark = 8;
}

message ResistanceInfo {
    optional uint32 bleed = 1;
    optional uint32 poison = 2;
    optional uint32 frost = 3;
    optional uint32 curse = 4;
}

message Vector {
    required float x = 1;
    required float y = 2;
    required float z = 3;
}

message BonfireInfo {
    required uint32 bonfire_id = 1;
    required uint32 has_been_lit = 2;
}