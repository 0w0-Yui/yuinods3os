// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Frpg2PlayerData.proto

#ifndef PROTOBUF_Frpg2PlayerData_2eproto__INCLUDED
#define PROTOBUF_Frpg2PlayerData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace Frpg2PlayerData {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Frpg2PlayerData_2eproto();
void protobuf_AssignDesc_Frpg2PlayerData_2eproto();
void protobuf_ShutdownFile_Frpg2PlayerData_2eproto();

class DateTime;

// ===================================================================

class DateTime : public ::google::protobuf::MessageLite {
 public:
  DateTime();
  virtual ~DateTime();

  DateTime(const DateTime& from);

  inline DateTime& operator=(const DateTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const DateTime& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DateTime* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DateTime* other);

  // implements Message ----------------------------------------------

  DateTime* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DateTime& from);
  void MergeFrom(const DateTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 year = 1;
  inline bool has_year() const;
  inline void clear_year();
  static const int kYearFieldNumber = 1;
  inline ::google::protobuf::uint32 year() const;
  inline void set_year(::google::protobuf::uint32 value);

  // required uint32 month = 2;
  inline bool has_month() const;
  inline void clear_month();
  static const int kMonthFieldNumber = 2;
  inline ::google::protobuf::uint32 month() const;
  inline void set_month(::google::protobuf::uint32 value);

  // required uint32 day = 3;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 3;
  inline ::google::protobuf::uint32 day() const;
  inline void set_day(::google::protobuf::uint32 value);

  // required uint32 hours = 4;
  inline bool has_hours() const;
  inline void clear_hours();
  static const int kHoursFieldNumber = 4;
  inline ::google::protobuf::uint32 hours() const;
  inline void set_hours(::google::protobuf::uint32 value);

  // required uint32 minutes = 5;
  inline bool has_minutes() const;
  inline void clear_minutes();
  static const int kMinutesFieldNumber = 5;
  inline ::google::protobuf::uint32 minutes() const;
  inline void set_minutes(::google::protobuf::uint32 value);

  // required uint32 seconds = 6;
  inline bool has_seconds() const;
  inline void clear_seconds();
  static const int kSecondsFieldNumber = 6;
  inline ::google::protobuf::uint32 seconds() const;
  inline void set_seconds(::google::protobuf::uint32 value);

  // required uint32 tzdiff = 7;
  inline bool has_tzdiff() const;
  inline void clear_tzdiff();
  static const int kTzdiffFieldNumber = 7;
  inline ::google::protobuf::uint32 tzdiff() const;
  inline void set_tzdiff(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Frpg2PlayerData.DateTime)
 private:
  inline void set_has_year();
  inline void clear_has_year();
  inline void set_has_month();
  inline void clear_has_month();
  inline void set_has_day();
  inline void clear_has_day();
  inline void set_has_hours();
  inline void clear_has_hours();
  inline void set_has_minutes();
  inline void clear_has_minutes();
  inline void set_has_seconds();
  inline void clear_has_seconds();
  inline void set_has_tzdiff();
  inline void clear_has_tzdiff();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 year_;
  ::google::protobuf::uint32 month_;
  ::google::protobuf::uint32 day_;
  ::google::protobuf::uint32 hours_;
  ::google::protobuf::uint32 minutes_;
  ::google::protobuf::uint32 seconds_;
  ::google::protobuf::uint32 tzdiff_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Frpg2PlayerData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Frpg2PlayerData_2eproto();
  #endif
  friend void protobuf_AssignDesc_Frpg2PlayerData_2eproto();
  friend void protobuf_ShutdownFile_Frpg2PlayerData_2eproto();

  void InitAsDefaultInstance();
  static DateTime* default_instance_;
};
// ===================================================================


// ===================================================================

// DateTime

// required uint32 year = 1;
inline bool DateTime::has_year() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DateTime::set_has_year() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DateTime::clear_has_year() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DateTime::clear_year() {
  year_ = 0u;
  clear_has_year();
}
inline ::google::protobuf::uint32 DateTime::year() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.DateTime.year)
  return year_;
}
inline void DateTime::set_year(::google::protobuf::uint32 value) {
  set_has_year();
  year_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.DateTime.year)
}

// required uint32 month = 2;
inline bool DateTime::has_month() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DateTime::set_has_month() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DateTime::clear_has_month() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DateTime::clear_month() {
  month_ = 0u;
  clear_has_month();
}
inline ::google::protobuf::uint32 DateTime::month() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.DateTime.month)
  return month_;
}
inline void DateTime::set_month(::google::protobuf::uint32 value) {
  set_has_month();
  month_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.DateTime.month)
}

// required uint32 day = 3;
inline bool DateTime::has_day() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DateTime::set_has_day() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DateTime::clear_has_day() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DateTime::clear_day() {
  day_ = 0u;
  clear_has_day();
}
inline ::google::protobuf::uint32 DateTime::day() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.DateTime.day)
  return day_;
}
inline void DateTime::set_day(::google::protobuf::uint32 value) {
  set_has_day();
  day_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.DateTime.day)
}

// required uint32 hours = 4;
inline bool DateTime::has_hours() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DateTime::set_has_hours() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DateTime::clear_has_hours() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DateTime::clear_hours() {
  hours_ = 0u;
  clear_has_hours();
}
inline ::google::protobuf::uint32 DateTime::hours() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.DateTime.hours)
  return hours_;
}
inline void DateTime::set_hours(::google::protobuf::uint32 value) {
  set_has_hours();
  hours_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.DateTime.hours)
}

// required uint32 minutes = 5;
inline bool DateTime::has_minutes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DateTime::set_has_minutes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DateTime::clear_has_minutes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DateTime::clear_minutes() {
  minutes_ = 0u;
  clear_has_minutes();
}
inline ::google::protobuf::uint32 DateTime::minutes() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.DateTime.minutes)
  return minutes_;
}
inline void DateTime::set_minutes(::google::protobuf::uint32 value) {
  set_has_minutes();
  minutes_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.DateTime.minutes)
}

// required uint32 seconds = 6;
inline bool DateTime::has_seconds() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DateTime::set_has_seconds() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DateTime::clear_has_seconds() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DateTime::clear_seconds() {
  seconds_ = 0u;
  clear_has_seconds();
}
inline ::google::protobuf::uint32 DateTime::seconds() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.DateTime.seconds)
  return seconds_;
}
inline void DateTime::set_seconds(::google::protobuf::uint32 value) {
  set_has_seconds();
  seconds_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.DateTime.seconds)
}

// required uint32 tzdiff = 7;
inline bool DateTime::has_tzdiff() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DateTime::set_has_tzdiff() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DateTime::clear_has_tzdiff() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DateTime::clear_tzdiff() {
  tzdiff_ = 0u;
  clear_has_tzdiff();
}
inline ::google::protobuf::uint32 DateTime::tzdiff() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.DateTime.tzdiff)
  return tzdiff_;
}
inline void DateTime::set_tzdiff(::google::protobuf::uint32 value) {
  set_has_tzdiff();
  tzdiff_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.DateTime.tzdiff)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Frpg2PlayerData

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Frpg2PlayerData_2eproto__INCLUDED
