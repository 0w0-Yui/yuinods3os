// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Frpg2PlayerData.proto

#ifndef PROTOBUF_Frpg2PlayerData_2eproto__INCLUDED
#define PROTOBUF_Frpg2PlayerData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace Frpg2PlayerData {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Frpg2PlayerData_2eproto();
void protobuf_AssignDesc_Frpg2PlayerData_2eproto();
void protobuf_ShutdownFile_Frpg2PlayerData_2eproto();

class DateTime;
class AllStatus;
class unknown_struct_1;
class UpdateAllDelta;
class PlayerStatus;
class PlayData;
class LogInfo;
class StatsInfo;
class Equipment;
class PlayerLocation;
class DefenseInfo;
class CutRateInfo;
class ResistanceInfo;
class Vector;
class BonfireInfo;

// ===================================================================

class DateTime : public ::google::protobuf::MessageLite {
 public:
  DateTime();
  virtual ~DateTime();

  DateTime(const DateTime& from);

  inline DateTime& operator=(const DateTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const DateTime& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DateTime* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DateTime* other);

  // implements Message ----------------------------------------------

  DateTime* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DateTime& from);
  void MergeFrom(const DateTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 year = 1;
  inline bool has_year() const;
  inline void clear_year();
  static const int kYearFieldNumber = 1;
  inline ::google::protobuf::uint32 year() const;
  inline void set_year(::google::protobuf::uint32 value);

  // required uint32 month = 2;
  inline bool has_month() const;
  inline void clear_month();
  static const int kMonthFieldNumber = 2;
  inline ::google::protobuf::uint32 month() const;
  inline void set_month(::google::protobuf::uint32 value);

  // required uint32 day = 3;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 3;
  inline ::google::protobuf::uint32 day() const;
  inline void set_day(::google::protobuf::uint32 value);

  // required uint32 hours = 4;
  inline bool has_hours() const;
  inline void clear_hours();
  static const int kHoursFieldNumber = 4;
  inline ::google::protobuf::uint32 hours() const;
  inline void set_hours(::google::protobuf::uint32 value);

  // required uint32 minutes = 5;
  inline bool has_minutes() const;
  inline void clear_minutes();
  static const int kMinutesFieldNumber = 5;
  inline ::google::protobuf::uint32 minutes() const;
  inline void set_minutes(::google::protobuf::uint32 value);

  // required uint32 seconds = 6;
  inline bool has_seconds() const;
  inline void clear_seconds();
  static const int kSecondsFieldNumber = 6;
  inline ::google::protobuf::uint32 seconds() const;
  inline void set_seconds(::google::protobuf::uint32 value);

  // required uint32 tzdiff = 7;
  inline bool has_tzdiff() const;
  inline void clear_tzdiff();
  static const int kTzdiffFieldNumber = 7;
  inline ::google::protobuf::uint32 tzdiff() const;
  inline void set_tzdiff(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Frpg2PlayerData.DateTime)
 private:
  inline void set_has_year();
  inline void clear_has_year();
  inline void set_has_month();
  inline void clear_has_month();
  inline void set_has_day();
  inline void clear_has_day();
  inline void set_has_hours();
  inline void clear_has_hours();
  inline void set_has_minutes();
  inline void clear_has_minutes();
  inline void set_has_seconds();
  inline void clear_has_seconds();
  inline void set_has_tzdiff();
  inline void clear_has_tzdiff();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 year_;
  ::google::protobuf::uint32 month_;
  ::google::protobuf::uint32 day_;
  ::google::protobuf::uint32 hours_;
  ::google::protobuf::uint32 minutes_;
  ::google::protobuf::uint32 seconds_;
  ::google::protobuf::uint32 tzdiff_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Frpg2PlayerData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Frpg2PlayerData_2eproto();
  #endif
  friend void protobuf_AssignDesc_Frpg2PlayerData_2eproto();
  friend void protobuf_ShutdownFile_Frpg2PlayerData_2eproto();

  void InitAsDefaultInstance();
  static DateTime* default_instance_;
};
// -------------------------------------------------------------------

class AllStatus : public ::google::protobuf::MessageLite {
 public:
  AllStatus();
  virtual ~AllStatus();

  AllStatus(const AllStatus& from);

  inline AllStatus& operator=(const AllStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const AllStatus& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const AllStatus* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(AllStatus* other);

  // implements Message ----------------------------------------------

  AllStatus* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const AllStatus& from);
  void MergeFrom(const AllStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Frpg2PlayerData.PlayerLocation player_location = 1;
  inline bool has_player_location() const;
  inline void clear_player_location();
  static const int kPlayerLocationFieldNumber = 1;
  inline const ::Frpg2PlayerData::PlayerLocation& player_location() const;
  inline ::Frpg2PlayerData::PlayerLocation* mutable_player_location();
  inline ::Frpg2PlayerData::PlayerLocation* release_player_location();
  inline void set_allocated_player_location(::Frpg2PlayerData::PlayerLocation* player_location);

  // optional .Frpg2PlayerData.LogInfo log_info = 2;
  inline bool has_log_info() const;
  inline void clear_log_info();
  static const int kLogInfoFieldNumber = 2;
  inline const ::Frpg2PlayerData::LogInfo& log_info() const;
  inline ::Frpg2PlayerData::LogInfo* mutable_log_info();
  inline ::Frpg2PlayerData::LogInfo* release_log_info();
  inline void set_allocated_log_info(::Frpg2PlayerData::LogInfo* log_info);

  // optional .Frpg2PlayerData.PlayerStatus player_status = 3;
  inline bool has_player_status() const;
  inline void clear_player_status();
  static const int kPlayerStatusFieldNumber = 3;
  inline const ::Frpg2PlayerData::PlayerStatus& player_status() const;
  inline ::Frpg2PlayerData::PlayerStatus* mutable_player_status();
  inline ::Frpg2PlayerData::PlayerStatus* release_player_status();
  inline void set_allocated_player_status(::Frpg2PlayerData::PlayerStatus* player_status);

  // optional .Frpg2PlayerData.PlayData play_data = 4;
  inline bool has_play_data() const;
  inline void clear_play_data();
  static const int kPlayDataFieldNumber = 4;
  inline const ::Frpg2PlayerData::PlayData& play_data() const;
  inline ::Frpg2PlayerData::PlayData* mutable_play_data();
  inline ::Frpg2PlayerData::PlayData* release_play_data();
  inline void set_allocated_play_data(::Frpg2PlayerData::PlayData* play_data);

  // optional .Frpg2PlayerData.StatsInfo stats_info = 5;
  inline bool has_stats_info() const;
  inline void clear_stats_info();
  static const int kStatsInfoFieldNumber = 5;
  inline const ::Frpg2PlayerData::StatsInfo& stats_info() const;
  inline ::Frpg2PlayerData::StatsInfo* mutable_stats_info();
  inline ::Frpg2PlayerData::StatsInfo* release_stats_info();
  inline void set_allocated_stats_info(::Frpg2PlayerData::StatsInfo* stats_info);

  // optional .Frpg2PlayerData.Equipment equipment = 6;
  inline bool has_equipment() const;
  inline void clear_equipment();
  static const int kEquipmentFieldNumber = 6;
  inline const ::Frpg2PlayerData::Equipment& equipment() const;
  inline ::Frpg2PlayerData::Equipment* mutable_equipment();
  inline ::Frpg2PlayerData::Equipment* release_equipment();
  inline void set_allocated_equipment(::Frpg2PlayerData::Equipment* equipment);

  // optional string steam_id = 7;
  inline bool has_steam_id() const;
  inline void clear_steam_id();
  static const int kSteamIdFieldNumber = 7;
  inline const ::std::string& steam_id() const;
  inline void set_steam_id(const ::std::string& value);
  inline void set_steam_id(const char* value);
  inline void set_steam_id(const char* value, size_t size);
  inline ::std::string* mutable_steam_id();
  inline ::std::string* release_steam_id();
  inline void set_allocated_steam_id(::std::string* steam_id);

  // @@protoc_insertion_point(class_scope:Frpg2PlayerData.AllStatus)
 private:
  inline void set_has_player_location();
  inline void clear_has_player_location();
  inline void set_has_log_info();
  inline void clear_has_log_info();
  inline void set_has_player_status();
  inline void clear_has_player_status();
  inline void set_has_play_data();
  inline void clear_has_play_data();
  inline void set_has_stats_info();
  inline void clear_has_stats_info();
  inline void set_has_equipment();
  inline void clear_has_equipment();
  inline void set_has_steam_id();
  inline void clear_has_steam_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Frpg2PlayerData::PlayerLocation* player_location_;
  ::Frpg2PlayerData::LogInfo* log_info_;
  ::Frpg2PlayerData::PlayerStatus* player_status_;
  ::Frpg2PlayerData::PlayData* play_data_;
  ::Frpg2PlayerData::StatsInfo* stats_info_;
  ::Frpg2PlayerData::Equipment* equipment_;
  ::std::string* steam_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Frpg2PlayerData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Frpg2PlayerData_2eproto();
  #endif
  friend void protobuf_AssignDesc_Frpg2PlayerData_2eproto();
  friend void protobuf_ShutdownFile_Frpg2PlayerData_2eproto();

  void InitAsDefaultInstance();
  static AllStatus* default_instance_;
};
// -------------------------------------------------------------------

class unknown_struct_1 : public ::google::protobuf::MessageLite {
 public:
  unknown_struct_1();
  virtual ~unknown_struct_1();

  unknown_struct_1(const unknown_struct_1& from);

  inline unknown_struct_1& operator=(const unknown_struct_1& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const unknown_struct_1& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const unknown_struct_1* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(unknown_struct_1* other);

  // implements Message ----------------------------------------------

  unknown_struct_1* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const unknown_struct_1& from);
  void MergeFrom(const unknown_struct_1& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 unknown_1 = 1;
  inline bool has_unknown_1() const;
  inline void clear_unknown_1();
  static const int kUnknown1FieldNumber = 1;
  inline ::google::protobuf::int64 unknown_1() const;
  inline void set_unknown_1(::google::protobuf::int64 value);

  // optional string unknown_2 = 2;
  inline bool has_unknown_2() const;
  inline void clear_unknown_2();
  static const int kUnknown2FieldNumber = 2;
  inline const ::std::string& unknown_2() const;
  inline void set_unknown_2(const ::std::string& value);
  inline void set_unknown_2(const char* value);
  inline void set_unknown_2(const char* value, size_t size);
  inline ::std::string* mutable_unknown_2();
  inline ::std::string* release_unknown_2();
  inline void set_allocated_unknown_2(::std::string* unknown_2);

  // optional int64 unknown_3 = 3;
  inline bool has_unknown_3() const;
  inline void clear_unknown_3();
  static const int kUnknown3FieldNumber = 3;
  inline ::google::protobuf::int64 unknown_3() const;
  inline void set_unknown_3(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Frpg2PlayerData.unknown_struct_1)
 private:
  inline void set_has_unknown_1();
  inline void clear_has_unknown_1();
  inline void set_has_unknown_2();
  inline void clear_has_unknown_2();
  inline void set_has_unknown_3();
  inline void clear_has_unknown_3();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 unknown_1_;
  ::std::string* unknown_2_;
  ::google::protobuf::int64 unknown_3_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Frpg2PlayerData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Frpg2PlayerData_2eproto();
  #endif
  friend void protobuf_AssignDesc_Frpg2PlayerData_2eproto();
  friend void protobuf_ShutdownFile_Frpg2PlayerData_2eproto();

  void InitAsDefaultInstance();
  static unknown_struct_1* default_instance_;
};
// -------------------------------------------------------------------

class UpdateAllDelta : public ::google::protobuf::MessageLite {
 public:
  UpdateAllDelta();
  virtual ~UpdateAllDelta();

  UpdateAllDelta(const UpdateAllDelta& from);

  inline UpdateAllDelta& operator=(const UpdateAllDelta& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const UpdateAllDelta& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const UpdateAllDelta* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(UpdateAllDelta* other);

  // implements Message ----------------------------------------------

  UpdateAllDelta* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const UpdateAllDelta& from);
  void MergeFrom(const UpdateAllDelta& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Frpg2PlayerData.PlayerLocation player_location = 1;
  inline bool has_player_location() const;
  inline void clear_player_location();
  static const int kPlayerLocationFieldNumber = 1;
  inline const ::Frpg2PlayerData::PlayerLocation& player_location() const;
  inline ::Frpg2PlayerData::PlayerLocation* mutable_player_location();
  inline ::Frpg2PlayerData::PlayerLocation* release_player_location();
  inline void set_allocated_player_location(::Frpg2PlayerData::PlayerLocation* player_location);

  // optional .Frpg2PlayerData.LogInfo log_info = 2;
  inline bool has_log_info() const;
  inline void clear_log_info();
  static const int kLogInfoFieldNumber = 2;
  inline const ::Frpg2PlayerData::LogInfo& log_info() const;
  inline ::Frpg2PlayerData::LogInfo* mutable_log_info();
  inline ::Frpg2PlayerData::LogInfo* release_log_info();
  inline void set_allocated_log_info(::Frpg2PlayerData::LogInfo* log_info);

  // optional .Frpg2PlayerData.PlayerStatus player_status = 3;
  inline bool has_player_status() const;
  inline void clear_player_status();
  static const int kPlayerStatusFieldNumber = 3;
  inline const ::Frpg2PlayerData::PlayerStatus& player_status() const;
  inline ::Frpg2PlayerData::PlayerStatus* mutable_player_status();
  inline ::Frpg2PlayerData::PlayerStatus* release_player_status();
  inline void set_allocated_player_status(::Frpg2PlayerData::PlayerStatus* player_status);

  // optional .Frpg2PlayerData.PlayData play_data = 4;
  inline bool has_play_data() const;
  inline void clear_play_data();
  static const int kPlayDataFieldNumber = 4;
  inline const ::Frpg2PlayerData::PlayData& play_data() const;
  inline ::Frpg2PlayerData::PlayData* mutable_play_data();
  inline ::Frpg2PlayerData::PlayData* release_play_data();
  inline void set_allocated_play_data(::Frpg2PlayerData::PlayData* play_data);

  // optional .Frpg2PlayerData.StatsInfo stats_info = 5;
  inline bool has_stats_info() const;
  inline void clear_stats_info();
  static const int kStatsInfoFieldNumber = 5;
  inline const ::Frpg2PlayerData::StatsInfo& stats_info() const;
  inline ::Frpg2PlayerData::StatsInfo* mutable_stats_info();
  inline ::Frpg2PlayerData::StatsInfo* release_stats_info();
  inline void set_allocated_stats_info(::Frpg2PlayerData::StatsInfo* stats_info);

  // optional .Frpg2PlayerData.Equipment equipment = 6;
  inline bool has_equipment() const;
  inline void clear_equipment();
  static const int kEquipmentFieldNumber = 6;
  inline const ::Frpg2PlayerData::Equipment& equipment() const;
  inline ::Frpg2PlayerData::Equipment* mutable_equipment();
  inline ::Frpg2PlayerData::Equipment* release_equipment();
  inline void set_allocated_equipment(::Frpg2PlayerData::Equipment* equipment);

  // optional .Frpg2PlayerData.unknown_struct_1 unknown_1 = 7;
  inline bool has_unknown_1() const;
  inline void clear_unknown_1();
  static const int kUnknown1FieldNumber = 7;
  inline const ::Frpg2PlayerData::unknown_struct_1& unknown_1() const;
  inline ::Frpg2PlayerData::unknown_struct_1* mutable_unknown_1();
  inline ::Frpg2PlayerData::unknown_struct_1* release_unknown_1();
  inline void set_allocated_unknown_1(::Frpg2PlayerData::unknown_struct_1* unknown_1);

  // @@protoc_insertion_point(class_scope:Frpg2PlayerData.UpdateAllDelta)
 private:
  inline void set_has_player_location();
  inline void clear_has_player_location();
  inline void set_has_log_info();
  inline void clear_has_log_info();
  inline void set_has_player_status();
  inline void clear_has_player_status();
  inline void set_has_play_data();
  inline void clear_has_play_data();
  inline void set_has_stats_info();
  inline void clear_has_stats_info();
  inline void set_has_equipment();
  inline void clear_has_equipment();
  inline void set_has_unknown_1();
  inline void clear_has_unknown_1();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Frpg2PlayerData::PlayerLocation* player_location_;
  ::Frpg2PlayerData::LogInfo* log_info_;
  ::Frpg2PlayerData::PlayerStatus* player_status_;
  ::Frpg2PlayerData::PlayData* play_data_;
  ::Frpg2PlayerData::StatsInfo* stats_info_;
  ::Frpg2PlayerData::Equipment* equipment_;
  ::Frpg2PlayerData::unknown_struct_1* unknown_1_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Frpg2PlayerData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Frpg2PlayerData_2eproto();
  #endif
  friend void protobuf_AssignDesc_Frpg2PlayerData_2eproto();
  friend void protobuf_ShutdownFile_Frpg2PlayerData_2eproto();

  void InitAsDefaultInstance();
  static UpdateAllDelta* default_instance_;
};
// -------------------------------------------------------------------

class PlayerStatus : public ::google::protobuf::MessageLite {
 public:
  PlayerStatus();
  virtual ~PlayerStatus();

  PlayerStatus(const PlayerStatus& from);

  inline PlayerStatus& operator=(const PlayerStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const PlayerStatus& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PlayerStatus* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PlayerStatus* other);

  // implements Message ----------------------------------------------

  PlayerStatus* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PlayerStatus& from);
  void MergeFrom(const PlayerStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 soul_level = 4;
  inline bool has_soul_level() const;
  inline void clear_soul_level();
  static const int kSoulLevelFieldNumber = 4;
  inline ::google::protobuf::int32 soul_level() const;
  inline void set_soul_level(::google::protobuf::int32 value);

  // repeated int32 recent_online_areas = 17;
  inline int recent_online_areas_size() const;
  inline void clear_recent_online_areas();
  static const int kRecentOnlineAreasFieldNumber = 17;
  inline ::google::protobuf::int32 recent_online_areas(int index) const;
  inline void set_recent_online_areas(int index, ::google::protobuf::int32 value);
  inline void add_recent_online_areas(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      recent_online_areas() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_recent_online_areas();

  // repeated uint32 unknown2 = 18;
  inline int unknown2_size() const;
  inline void clear_unknown2();
  static const int kUnknown2FieldNumber = 18;
  inline ::google::protobuf::uint32 unknown2(int index) const;
  inline void set_unknown2(int index, ::google::protobuf::uint32 value);
  inline void add_unknown2(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      unknown2() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_unknown2();

  // optional int32 hp = 23;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 23;
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);

  // optional int32 max_hp = 24;
  inline bool has_max_hp() const;
  inline void clear_max_hp();
  static const int kMaxHpFieldNumber = 24;
  inline ::google::protobuf::int32 max_hp() const;
  inline void set_max_hp(::google::protobuf::int32 value);

  // optional int32 base_max_hp = 25;
  inline bool has_base_max_hp() const;
  inline void clear_base_max_hp();
  static const int kBaseMaxHpFieldNumber = 25;
  inline ::google::protobuf::int32 base_max_hp() const;
  inline void set_base_max_hp(::google::protobuf::int32 value);

  // optional int32 fp = 26;
  inline bool has_fp() const;
  inline void clear_fp();
  static const int kFpFieldNumber = 26;
  inline ::google::protobuf::int32 fp() const;
  inline void set_fp(::google::protobuf::int32 value);

  // optional int32 max_fp = 27;
  inline bool has_max_fp() const;
  inline void clear_max_fp();
  static const int kMaxFpFieldNumber = 27;
  inline ::google::protobuf::int32 max_fp() const;
  inline void set_max_fp(::google::protobuf::int32 value);

  // optional int32 base_max_fp = 28;
  inline bool has_base_max_fp() const;
  inline void clear_base_max_fp();
  static const int kBaseMaxFpFieldNumber = 28;
  inline ::google::protobuf::int32 base_max_fp() const;
  inline void set_base_max_fp(::google::protobuf::int32 value);

  // optional int32 stamina = 29;
  inline bool has_stamina() const;
  inline void clear_stamina();
  static const int kStaminaFieldNumber = 29;
  inline ::google::protobuf::int32 stamina() const;
  inline void set_stamina(::google::protobuf::int32 value);

  // optional int32 max_stamina = 30;
  inline bool has_max_stamina() const;
  inline void clear_max_stamina();
  static const int kMaxStaminaFieldNumber = 30;
  inline ::google::protobuf::int32 max_stamina() const;
  inline void set_max_stamina(::google::protobuf::int32 value);

  // optional int32 base_max_stamina = 31;
  inline bool has_base_max_stamina() const;
  inline void clear_base_max_stamina();
  static const int kBaseMaxStaminaFieldNumber = 31;
  inline ::google::protobuf::int32 base_max_stamina() const;
  inline void set_base_max_stamina(::google::protobuf::int32 value);

  // optional string name = 38;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 38;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 vigor = 40;
  inline bool has_vigor() const;
  inline void clear_vigor();
  static const int kVigorFieldNumber = 40;
  inline ::google::protobuf::int32 vigor() const;
  inline void set_vigor(::google::protobuf::int32 value);

  // optional int32 attunement = 41;
  inline bool has_attunement() const;
  inline void clear_attunement();
  static const int kAttunementFieldNumber = 41;
  inline ::google::protobuf::int32 attunement() const;
  inline void set_attunement(::google::protobuf::int32 value);

  // optional int32 endurance = 42;
  inline bool has_endurance() const;
  inline void clear_endurance();
  static const int kEnduranceFieldNumber = 42;
  inline ::google::protobuf::int32 endurance() const;
  inline void set_endurance(::google::protobuf::int32 value);

  // optional int32 vitality = 43;
  inline bool has_vitality() const;
  inline void clear_vitality();
  static const int kVitalityFieldNumber = 43;
  inline ::google::protobuf::int32 vitality() const;
  inline void set_vitality(::google::protobuf::int32 value);

  // optional int32 strength = 44;
  inline bool has_strength() const;
  inline void clear_strength();
  static const int kStrengthFieldNumber = 44;
  inline ::google::protobuf::int32 strength() const;
  inline void set_strength(::google::protobuf::int32 value);

  // optional int32 dexterity = 45;
  inline bool has_dexterity() const;
  inline void clear_dexterity();
  static const int kDexterityFieldNumber = 45;
  inline ::google::protobuf::int32 dexterity() const;
  inline void set_dexterity(::google::protobuf::int32 value);

  // optional int32 intelligence = 46;
  inline bool has_intelligence() const;
  inline void clear_intelligence();
  static const int kIntelligenceFieldNumber = 46;
  inline ::google::protobuf::int32 intelligence() const;
  inline void set_intelligence(::google::protobuf::int32 value);

  // optional int32 faith = 47;
  inline bool has_faith() const;
  inline void clear_faith();
  static const int kFaithFieldNumber = 47;
  inline ::google::protobuf::int32 faith() const;
  inline void set_faith(::google::protobuf::int32 value);

  // optional int32 luck = 48;
  inline bool has_luck() const;
  inline void clear_luck();
  static const int kLuckFieldNumber = 48;
  inline ::google::protobuf::int32 luck() const;
  inline void set_luck(::google::protobuf::int32 value);

  // optional .Frpg2PlayerData.DefenseInfo defense_info = 58;
  inline bool has_defense_info() const;
  inline void clear_defense_info();
  static const int kDefenseInfoFieldNumber = 58;
  inline const ::Frpg2PlayerData::DefenseInfo& defense_info() const;
  inline ::Frpg2PlayerData::DefenseInfo* mutable_defense_info();
  inline ::Frpg2PlayerData::DefenseInfo* release_defense_info();
  inline void set_allocated_defense_info(::Frpg2PlayerData::DefenseInfo* defense_info);

  // optional .Frpg2PlayerData.CutRateInfo cutrate_info = 59;
  inline bool has_cutrate_info() const;
  inline void clear_cutrate_info();
  static const int kCutrateInfoFieldNumber = 59;
  inline const ::Frpg2PlayerData::CutRateInfo& cutrate_info() const;
  inline ::Frpg2PlayerData::CutRateInfo* mutable_cutrate_info();
  inline ::Frpg2PlayerData::CutRateInfo* release_cutrate_info();
  inline void set_allocated_cutrate_info(::Frpg2PlayerData::CutRateInfo* cutrate_info);

  // optional .Frpg2PlayerData.ResistanceInfo armor_resistance_info = 60;
  inline bool has_armor_resistance_info() const;
  inline void clear_armor_resistance_info();
  static const int kArmorResistanceInfoFieldNumber = 60;
  inline const ::Frpg2PlayerData::ResistanceInfo& armor_resistance_info() const;
  inline ::Frpg2PlayerData::ResistanceInfo* mutable_armor_resistance_info();
  inline ::Frpg2PlayerData::ResistanceInfo* release_armor_resistance_info();
  inline void set_allocated_armor_resistance_info(::Frpg2PlayerData::ResistanceInfo* armor_resistance_info);

  // optional .Frpg2PlayerData.ResistanceInfo base_resistance_info = 61;
  inline bool has_base_resistance_info() const;
  inline void clear_base_resistance_info();
  static const int kBaseResistanceInfoFieldNumber = 61;
  inline const ::Frpg2PlayerData::ResistanceInfo& base_resistance_info() const;
  inline ::Frpg2PlayerData::ResistanceInfo* mutable_base_resistance_info();
  inline ::Frpg2PlayerData::ResistanceInfo* release_base_resistance_info();
  inline void set_allocated_base_resistance_info(::Frpg2PlayerData::ResistanceInfo* base_resistance_info);

  // @@protoc_insertion_point(class_scope:Frpg2PlayerData.PlayerStatus)
 private:
  inline void set_has_soul_level();
  inline void clear_has_soul_level();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_max_hp();
  inline void clear_has_max_hp();
  inline void set_has_base_max_hp();
  inline void clear_has_base_max_hp();
  inline void set_has_fp();
  inline void clear_has_fp();
  inline void set_has_max_fp();
  inline void clear_has_max_fp();
  inline void set_has_base_max_fp();
  inline void clear_has_base_max_fp();
  inline void set_has_stamina();
  inline void clear_has_stamina();
  inline void set_has_max_stamina();
  inline void clear_has_max_stamina();
  inline void set_has_base_max_stamina();
  inline void clear_has_base_max_stamina();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_vigor();
  inline void clear_has_vigor();
  inline void set_has_attunement();
  inline void clear_has_attunement();
  inline void set_has_endurance();
  inline void clear_has_endurance();
  inline void set_has_vitality();
  inline void clear_has_vitality();
  inline void set_has_strength();
  inline void clear_has_strength();
  inline void set_has_dexterity();
  inline void clear_has_dexterity();
  inline void set_has_intelligence();
  inline void clear_has_intelligence();
  inline void set_has_faith();
  inline void clear_has_faith();
  inline void set_has_luck();
  inline void clear_has_luck();
  inline void set_has_defense_info();
  inline void clear_has_defense_info();
  inline void set_has_cutrate_info();
  inline void clear_has_cutrate_info();
  inline void set_has_armor_resistance_info();
  inline void clear_has_armor_resistance_info();
  inline void set_has_base_resistance_info();
  inline void clear_has_base_resistance_info();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > recent_online_areas_;
  ::google::protobuf::int32 soul_level_;
  ::google::protobuf::int32 hp_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > unknown2_;
  ::google::protobuf::int32 max_hp_;
  ::google::protobuf::int32 base_max_hp_;
  ::google::protobuf::int32 fp_;
  ::google::protobuf::int32 max_fp_;
  ::google::protobuf::int32 base_max_fp_;
  ::google::protobuf::int32 stamina_;
  ::google::protobuf::int32 max_stamina_;
  ::google::protobuf::int32 base_max_stamina_;
  ::std::string* name_;
  ::google::protobuf::int32 vigor_;
  ::google::protobuf::int32 attunement_;
  ::google::protobuf::int32 endurance_;
  ::google::protobuf::int32 vitality_;
  ::google::protobuf::int32 strength_;
  ::google::protobuf::int32 dexterity_;
  ::google::protobuf::int32 intelligence_;
  ::google::protobuf::int32 faith_;
  ::Frpg2PlayerData::DefenseInfo* defense_info_;
  ::Frpg2PlayerData::CutRateInfo* cutrate_info_;
  ::Frpg2PlayerData::ResistanceInfo* armor_resistance_info_;
  ::Frpg2PlayerData::ResistanceInfo* base_resistance_info_;
  ::google::protobuf::int32 luck_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Frpg2PlayerData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Frpg2PlayerData_2eproto();
  #endif
  friend void protobuf_AssignDesc_Frpg2PlayerData_2eproto();
  friend void protobuf_ShutdownFile_Frpg2PlayerData_2eproto();

  void InitAsDefaultInstance();
  static PlayerStatus* default_instance_;
};
// -------------------------------------------------------------------

class PlayData : public ::google::protobuf::MessageLite {
 public:
  PlayData();
  virtual ~PlayData();

  PlayData(const PlayData& from);

  inline PlayData& operator=(const PlayData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const PlayData& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PlayData* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PlayData* other);

  // implements Message ----------------------------------------------

  PlayData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PlayData& from);
  void MergeFrom(const PlayData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 unknown_1 = 1;
  inline bool has_unknown_1() const;
  inline void clear_unknown_1();
  static const int kUnknown1FieldNumber = 1;
  inline ::google::protobuf::uint32 unknown_1() const;
  inline void set_unknown_1(::google::protobuf::uint32 value);

  // optional uint32 unknown_2 = 4;
  inline bool has_unknown_2() const;
  inline void clear_unknown_2();
  static const int kUnknown2FieldNumber = 4;
  inline ::google::protobuf::uint32 unknown_2() const;
  inline void set_unknown_2(::google::protobuf::uint32 value);

  // optional uint32 unknown_3 = 5;
  inline bool has_unknown_3() const;
  inline void clear_unknown_3();
  static const int kUnknown3FieldNumber = 5;
  inline ::google::protobuf::uint32 unknown_3() const;
  inline void set_unknown_3(::google::protobuf::uint32 value);

  // optional uint32 unknown_4 = 6;
  inline bool has_unknown_4() const;
  inline void clear_unknown_4();
  static const int kUnknown4FieldNumber = 6;
  inline ::google::protobuf::uint32 unknown_4() const;
  inline void set_unknown_4(::google::protobuf::uint32 value);

  // optional uint32 unknown_5 = 7;
  inline bool has_unknown_5() const;
  inline void clear_unknown_5();
  static const int kUnknown5FieldNumber = 7;
  inline ::google::protobuf::uint32 unknown_5() const;
  inline void set_unknown_5(::google::protobuf::uint32 value);

  // optional .Frpg2PlayerData.BonfireInfo bonfire_info = 8;
  inline bool has_bonfire_info() const;
  inline void clear_bonfire_info();
  static const int kBonfireInfoFieldNumber = 8;
  inline const ::Frpg2PlayerData::BonfireInfo& bonfire_info() const;
  inline ::Frpg2PlayerData::BonfireInfo* mutable_bonfire_info();
  inline ::Frpg2PlayerData::BonfireInfo* release_bonfire_info();
  inline void set_allocated_bonfire_info(::Frpg2PlayerData::BonfireInfo* bonfire_info);

  // @@protoc_insertion_point(class_scope:Frpg2PlayerData.PlayData)
 private:
  inline void set_has_unknown_1();
  inline void clear_has_unknown_1();
  inline void set_has_unknown_2();
  inline void clear_has_unknown_2();
  inline void set_has_unknown_3();
  inline void clear_has_unknown_3();
  inline void set_has_unknown_4();
  inline void clear_has_unknown_4();
  inline void set_has_unknown_5();
  inline void clear_has_unknown_5();
  inline void set_has_bonfire_info();
  inline void clear_has_bonfire_info();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 unknown_1_;
  ::google::protobuf::uint32 unknown_2_;
  ::google::protobuf::uint32 unknown_3_;
  ::google::protobuf::uint32 unknown_4_;
  ::Frpg2PlayerData::BonfireInfo* bonfire_info_;
  ::google::protobuf::uint32 unknown_5_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Frpg2PlayerData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Frpg2PlayerData_2eproto();
  #endif
  friend void protobuf_AssignDesc_Frpg2PlayerData_2eproto();
  friend void protobuf_ShutdownFile_Frpg2PlayerData_2eproto();

  void InitAsDefaultInstance();
  static PlayData* default_instance_;
};
// -------------------------------------------------------------------

class LogInfo : public ::google::protobuf::MessageLite {
 public:
  LogInfo();
  virtual ~LogInfo();

  LogInfo(const LogInfo& from);

  inline LogInfo& operator=(const LogInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const LogInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const LogInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(LogInfo* other);

  // implements Message ----------------------------------------------

  LogInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const LogInfo& from);
  void MergeFrom(const LogInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 unknown_1 = 1;
  inline bool has_unknown_1() const;
  inline void clear_unknown_1();
  static const int kUnknown1FieldNumber = 1;
  inline ::google::protobuf::uint32 unknown_1() const;
  inline void set_unknown_1(::google::protobuf::uint32 value);

  // optional uint32 unknown_2 = 6;
  inline bool has_unknown_2() const;
  inline void clear_unknown_2();
  static const int kUnknown2FieldNumber = 6;
  inline ::google::protobuf::uint32 unknown_2() const;
  inline void set_unknown_2(::google::protobuf::uint32 value);

  // optional uint32 unknown_3 = 7;
  inline bool has_unknown_3() const;
  inline void clear_unknown_3();
  static const int kUnknown3FieldNumber = 7;
  inline ::google::protobuf::uint32 unknown_3() const;
  inline void set_unknown_3(::google::protobuf::uint32 value);

  // optional uint32 unknown_4 = 8;
  inline bool has_unknown_4() const;
  inline void clear_unknown_4();
  static const int kUnknown4FieldNumber = 8;
  inline ::google::protobuf::uint32 unknown_4() const;
  inline void set_unknown_4(::google::protobuf::uint32 value);

  // optional uint32 unknown_5 = 9;
  inline bool has_unknown_5() const;
  inline void clear_unknown_5();
  static const int kUnknown5FieldNumber = 9;
  inline ::google::protobuf::uint32 unknown_5() const;
  inline void set_unknown_5(::google::protobuf::uint32 value);

  // optional uint32 unknown_6 = 10;
  inline bool has_unknown_6() const;
  inline void clear_unknown_6();
  static const int kUnknown6FieldNumber = 10;
  inline ::google::protobuf::uint32 unknown_6() const;
  inline void set_unknown_6(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Frpg2PlayerData.LogInfo)
 private:
  inline void set_has_unknown_1();
  inline void clear_has_unknown_1();
  inline void set_has_unknown_2();
  inline void clear_has_unknown_2();
  inline void set_has_unknown_3();
  inline void clear_has_unknown_3();
  inline void set_has_unknown_4();
  inline void clear_has_unknown_4();
  inline void set_has_unknown_5();
  inline void clear_has_unknown_5();
  inline void set_has_unknown_6();
  inline void clear_has_unknown_6();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 unknown_1_;
  ::google::protobuf::uint32 unknown_2_;
  ::google::protobuf::uint32 unknown_3_;
  ::google::protobuf::uint32 unknown_4_;
  ::google::protobuf::uint32 unknown_5_;
  ::google::protobuf::uint32 unknown_6_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Frpg2PlayerData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Frpg2PlayerData_2eproto();
  #endif
  friend void protobuf_AssignDesc_Frpg2PlayerData_2eproto();
  friend void protobuf_ShutdownFile_Frpg2PlayerData_2eproto();

  void InitAsDefaultInstance();
  static LogInfo* default_instance_;
};
// -------------------------------------------------------------------

class StatsInfo : public ::google::protobuf::MessageLite {
 public:
  StatsInfo();
  virtual ~StatsInfo();

  StatsInfo(const StatsInfo& from);

  inline StatsInfo& operator=(const StatsInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const StatsInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const StatsInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(StatsInfo* other);

  // implements Message ----------------------------------------------

  StatsInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const StatsInfo& from);
  void MergeFrom(const StatsInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 unknown_1 = 1;
  inline bool has_unknown_1() const;
  inline void clear_unknown_1();
  static const int kUnknown1FieldNumber = 1;
  inline ::google::protobuf::uint32 unknown_1() const;
  inline void set_unknown_1(::google::protobuf::uint32 value);

  // optional uint32 unknown_2 = 2;
  inline bool has_unknown_2() const;
  inline void clear_unknown_2();
  static const int kUnknown2FieldNumber = 2;
  inline ::google::protobuf::uint32 unknown_2() const;
  inline void set_unknown_2(::google::protobuf::uint32 value);

  // optional uint32 unknown_3 = 3;
  inline bool has_unknown_3() const;
  inline void clear_unknown_3();
  static const int kUnknown3FieldNumber = 3;
  inline ::google::protobuf::uint32 unknown_3() const;
  inline void set_unknown_3(::google::protobuf::uint32 value);

  // optional uint32 unknown_4 = 4;
  inline bool has_unknown_4() const;
  inline void clear_unknown_4();
  static const int kUnknown4FieldNumber = 4;
  inline ::google::protobuf::uint32 unknown_4() const;
  inline void set_unknown_4(::google::protobuf::uint32 value);

  // optional uint32 unknown_5 = 5;
  inline bool has_unknown_5() const;
  inline void clear_unknown_5();
  static const int kUnknown5FieldNumber = 5;
  inline ::google::protobuf::uint32 unknown_5() const;
  inline void set_unknown_5(::google::protobuf::uint32 value);

  // optional uint32 unknown6 = 6;
  inline bool has_unknown6() const;
  inline void clear_unknown6();
  static const int kUnknown6FieldNumber = 6;
  inline ::google::protobuf::uint32 unknown6() const;
  inline void set_unknown6(::google::protobuf::uint32 value);

  // optional .Frpg2PlayerData.DateTime date_time_1 = 7;
  inline bool has_date_time_1() const;
  inline void clear_date_time_1();
  static const int kDateTime1FieldNumber = 7;
  inline const ::Frpg2PlayerData::DateTime& date_time_1() const;
  inline ::Frpg2PlayerData::DateTime* mutable_date_time_1();
  inline ::Frpg2PlayerData::DateTime* release_date_time_1();
  inline void set_allocated_date_time_1(::Frpg2PlayerData::DateTime* date_time_1);

  // optional .Frpg2PlayerData.DateTime date_time_2 = 8;
  inline bool has_date_time_2() const;
  inline void clear_date_time_2();
  static const int kDateTime2FieldNumber = 8;
  inline const ::Frpg2PlayerData::DateTime& date_time_2() const;
  inline ::Frpg2PlayerData::DateTime* mutable_date_time_2();
  inline ::Frpg2PlayerData::DateTime* release_date_time_2();
  inline void set_allocated_date_time_2(::Frpg2PlayerData::DateTime* date_time_2);

  // @@protoc_insertion_point(class_scope:Frpg2PlayerData.StatsInfo)
 private:
  inline void set_has_unknown_1();
  inline void clear_has_unknown_1();
  inline void set_has_unknown_2();
  inline void clear_has_unknown_2();
  inline void set_has_unknown_3();
  inline void clear_has_unknown_3();
  inline void set_has_unknown_4();
  inline void clear_has_unknown_4();
  inline void set_has_unknown_5();
  inline void clear_has_unknown_5();
  inline void set_has_unknown6();
  inline void clear_has_unknown6();
  inline void set_has_date_time_1();
  inline void clear_has_date_time_1();
  inline void set_has_date_time_2();
  inline void clear_has_date_time_2();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 unknown_1_;
  ::google::protobuf::uint32 unknown_2_;
  ::google::protobuf::uint32 unknown_3_;
  ::google::protobuf::uint32 unknown_4_;
  ::google::protobuf::uint32 unknown_5_;
  ::google::protobuf::uint32 unknown6_;
  ::Frpg2PlayerData::DateTime* date_time_1_;
  ::Frpg2PlayerData::DateTime* date_time_2_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Frpg2PlayerData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Frpg2PlayerData_2eproto();
  #endif
  friend void protobuf_AssignDesc_Frpg2PlayerData_2eproto();
  friend void protobuf_ShutdownFile_Frpg2PlayerData_2eproto();

  void InitAsDefaultInstance();
  static StatsInfo* default_instance_;
};
// -------------------------------------------------------------------

class Equipment : public ::google::protobuf::MessageLite {
 public:
  Equipment();
  virtual ~Equipment();

  Equipment(const Equipment& from);

  inline Equipment& operator=(const Equipment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const Equipment& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Equipment* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Equipment* other);

  // implements Message ----------------------------------------------

  Equipment* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Equipment& from);
  void MergeFrom(const Equipment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 left_weapon_1 = 1;
  inline bool has_left_weapon_1() const;
  inline void clear_left_weapon_1();
  static const int kLeftWeapon1FieldNumber = 1;
  inline ::google::protobuf::int32 left_weapon_1() const;
  inline void set_left_weapon_1(::google::protobuf::int32 value);

  // optional int32 left_weapon_2 = 2;
  inline bool has_left_weapon_2() const;
  inline void clear_left_weapon_2();
  static const int kLeftWeapon2FieldNumber = 2;
  inline ::google::protobuf::int32 left_weapon_2() const;
  inline void set_left_weapon_2(::google::protobuf::int32 value);

  // optional int32 left_weapon_3 = 3;
  inline bool has_left_weapon_3() const;
  inline void clear_left_weapon_3();
  static const int kLeftWeapon3FieldNumber = 3;
  inline ::google::protobuf::int32 left_weapon_3() const;
  inline void set_left_weapon_3(::google::protobuf::int32 value);

  // optional int32 right_weapon_1 = 4;
  inline bool has_right_weapon_1() const;
  inline void clear_right_weapon_1();
  static const int kRightWeapon1FieldNumber = 4;
  inline ::google::protobuf::int32 right_weapon_1() const;
  inline void set_right_weapon_1(::google::protobuf::int32 value);

  // optional int32 right_weapon_2 = 5;
  inline bool has_right_weapon_2() const;
  inline void clear_right_weapon_2();
  static const int kRightWeapon2FieldNumber = 5;
  inline ::google::protobuf::int32 right_weapon_2() const;
  inline void set_right_weapon_2(::google::protobuf::int32 value);

  // optional int32 right_weapon_3 = 6;
  inline bool has_right_weapon_3() const;
  inline void clear_right_weapon_3();
  static const int kRightWeapon3FieldNumber = 6;
  inline ::google::protobuf::int32 right_weapon_3() const;
  inline void set_right_weapon_3(::google::protobuf::int32 value);

  // optional int32 head = 7;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 7;
  inline ::google::protobuf::int32 head() const;
  inline void set_head(::google::protobuf::int32 value);

  // optional int32 chest = 8;
  inline bool has_chest() const;
  inline void clear_chest();
  static const int kChestFieldNumber = 8;
  inline ::google::protobuf::int32 chest() const;
  inline void set_chest(::google::protobuf::int32 value);

  // optional int32 hands = 9;
  inline bool has_hands() const;
  inline void clear_hands();
  static const int kHandsFieldNumber = 9;
  inline ::google::protobuf::int32 hands() const;
  inline void set_hands(::google::protobuf::int32 value);

  // optional int32 legs = 10;
  inline bool has_legs() const;
  inline void clear_legs();
  static const int kLegsFieldNumber = 10;
  inline ::google::protobuf::int32 legs() const;
  inline void set_legs(::google::protobuf::int32 value);

  // optional int32 ring_1 = 11;
  inline bool has_ring_1() const;
  inline void clear_ring_1();
  static const int kRing1FieldNumber = 11;
  inline ::google::protobuf::int32 ring_1() const;
  inline void set_ring_1(::google::protobuf::int32 value);

  // optional int32 ring_2 = 12;
  inline bool has_ring_2() const;
  inline void clear_ring_2();
  static const int kRing2FieldNumber = 12;
  inline ::google::protobuf::int32 ring_2() const;
  inline void set_ring_2(::google::protobuf::int32 value);

  // optional int32 ring_3 = 13;
  inline bool has_ring_3() const;
  inline void clear_ring_3();
  static const int kRing3FieldNumber = 13;
  inline ::google::protobuf::int32 ring_3() const;
  inline void set_ring_3(::google::protobuf::int32 value);

  // optional int32 ring_4 = 14;
  inline bool has_ring_4() const;
  inline void clear_ring_4();
  static const int kRing4FieldNumber = 14;
  inline ::google::protobuf::int32 ring_4() const;
  inline void set_ring_4(::google::protobuf::int32 value);

  // optional int32 quick_item_1 = 15;
  inline bool has_quick_item_1() const;
  inline void clear_quick_item_1();
  static const int kQuickItem1FieldNumber = 15;
  inline ::google::protobuf::int32 quick_item_1() const;
  inline void set_quick_item_1(::google::protobuf::int32 value);

  // optional int32 quick_item_2 = 16;
  inline bool has_quick_item_2() const;
  inline void clear_quick_item_2();
  static const int kQuickItem2FieldNumber = 16;
  inline ::google::protobuf::int32 quick_item_2() const;
  inline void set_quick_item_2(::google::protobuf::int32 value);

  // optional int32 quick_item_3 = 17;
  inline bool has_quick_item_3() const;
  inline void clear_quick_item_3();
  static const int kQuickItem3FieldNumber = 17;
  inline ::google::protobuf::int32 quick_item_3() const;
  inline void set_quick_item_3(::google::protobuf::int32 value);

  // optional int32 quick_item_4 = 18;
  inline bool has_quick_item_4() const;
  inline void clear_quick_item_4();
  static const int kQuickItem4FieldNumber = 18;
  inline ::google::protobuf::int32 quick_item_4() const;
  inline void set_quick_item_4(::google::protobuf::int32 value);

  // optional int32 quick_item_5 = 19;
  inline bool has_quick_item_5() const;
  inline void clear_quick_item_5();
  static const int kQuickItem5FieldNumber = 19;
  inline ::google::protobuf::int32 quick_item_5() const;
  inline void set_quick_item_5(::google::protobuf::int32 value);

  // optional int32 quick_item_6 = 20;
  inline bool has_quick_item_6() const;
  inline void clear_quick_item_6();
  static const int kQuickItem6FieldNumber = 20;
  inline ::google::protobuf::int32 quick_item_6() const;
  inline void set_quick_item_6(::google::protobuf::int32 value);

  // optional int32 quick_item_7 = 21;
  inline bool has_quick_item_7() const;
  inline void clear_quick_item_7();
  static const int kQuickItem7FieldNumber = 21;
  inline ::google::protobuf::int32 quick_item_7() const;
  inline void set_quick_item_7(::google::protobuf::int32 value);

  // optional int32 quick_item_8 = 22;
  inline bool has_quick_item_8() const;
  inline void clear_quick_item_8();
  static const int kQuickItem8FieldNumber = 22;
  inline ::google::protobuf::int32 quick_item_8() const;
  inline void set_quick_item_8(::google::protobuf::int32 value);

  // optional int32 quick_item_9 = 23;
  inline bool has_quick_item_9() const;
  inline void clear_quick_item_9();
  static const int kQuickItem9FieldNumber = 23;
  inline ::google::protobuf::int32 quick_item_9() const;
  inline void set_quick_item_9(::google::protobuf::int32 value);

  // optional int32 quick_item_10 = 24;
  inline bool has_quick_item_10() const;
  inline void clear_quick_item_10();
  static const int kQuickItem10FieldNumber = 24;
  inline ::google::protobuf::int32 quick_item_10() const;
  inline void set_quick_item_10(::google::protobuf::int32 value);

  // optional int32 tool_belt_1 = 25;
  inline bool has_tool_belt_1() const;
  inline void clear_tool_belt_1();
  static const int kToolBelt1FieldNumber = 25;
  inline ::google::protobuf::int32 tool_belt_1() const;
  inline void set_tool_belt_1(::google::protobuf::int32 value);

  // optional int32 tool_belt_2 = 26;
  inline bool has_tool_belt_2() const;
  inline void clear_tool_belt_2();
  static const int kToolBelt2FieldNumber = 26;
  inline ::google::protobuf::int32 tool_belt_2() const;
  inline void set_tool_belt_2(::google::protobuf::int32 value);

  // optional int32 tool_belt_3 = 27;
  inline bool has_tool_belt_3() const;
  inline void clear_tool_belt_3();
  static const int kToolBelt3FieldNumber = 27;
  inline ::google::protobuf::int32 tool_belt_3() const;
  inline void set_tool_belt_3(::google::protobuf::int32 value);

  // optional int32 tool_belt_4 = 28;
  inline bool has_tool_belt_4() const;
  inline void clear_tool_belt_4();
  static const int kToolBelt4FieldNumber = 28;
  inline ::google::protobuf::int32 tool_belt_4() const;
  inline void set_tool_belt_4(::google::protobuf::int32 value);

  // optional int32 tool_belt_5 = 29;
  inline bool has_tool_belt_5() const;
  inline void clear_tool_belt_5();
  static const int kToolBelt5FieldNumber = 29;
  inline ::google::protobuf::int32 tool_belt_5() const;
  inline void set_tool_belt_5(::google::protobuf::int32 value);

  // optional int32 arrow_1 = 30;
  inline bool has_arrow_1() const;
  inline void clear_arrow_1();
  static const int kArrow1FieldNumber = 30;
  inline ::google::protobuf::int32 arrow_1() const;
  inline void set_arrow_1(::google::protobuf::int32 value);

  // optional int32 arrow_2 = 31;
  inline bool has_arrow_2() const;
  inline void clear_arrow_2();
  static const int kArrow2FieldNumber = 31;
  inline ::google::protobuf::int32 arrow_2() const;
  inline void set_arrow_2(::google::protobuf::int32 value);

  // optional int32 bolt_1 = 32;
  inline bool has_bolt_1() const;
  inline void clear_bolt_1();
  static const int kBolt1FieldNumber = 32;
  inline ::google::protobuf::int32 bolt_1() const;
  inline void set_bolt_1(::google::protobuf::int32 value);

  // optional int32 bolt_2 = 33;
  inline bool has_bolt_2() const;
  inline void clear_bolt_2();
  static const int kBolt2FieldNumber = 33;
  inline ::google::protobuf::int32 bolt_2() const;
  inline void set_bolt_2(::google::protobuf::int32 value);

  // optional int32 spell_1 = 34;
  inline bool has_spell_1() const;
  inline void clear_spell_1();
  static const int kSpell1FieldNumber = 34;
  inline ::google::protobuf::int32 spell_1() const;
  inline void set_spell_1(::google::protobuf::int32 value);

  // optional int32 spell_2 = 35;
  inline bool has_spell_2() const;
  inline void clear_spell_2();
  static const int kSpell2FieldNumber = 35;
  inline ::google::protobuf::int32 spell_2() const;
  inline void set_spell_2(::google::protobuf::int32 value);

  // optional int32 spell_3 = 36;
  inline bool has_spell_3() const;
  inline void clear_spell_3();
  static const int kSpell3FieldNumber = 36;
  inline ::google::protobuf::int32 spell_3() const;
  inline void set_spell_3(::google::protobuf::int32 value);

  // optional int32 spell_4 = 37;
  inline bool has_spell_4() const;
  inline void clear_spell_4();
  static const int kSpell4FieldNumber = 37;
  inline ::google::protobuf::int32 spell_4() const;
  inline void set_spell_4(::google::protobuf::int32 value);

  // optional int32 spell_5 = 38;
  inline bool has_spell_5() const;
  inline void clear_spell_5();
  static const int kSpell5FieldNumber = 38;
  inline ::google::protobuf::int32 spell_5() const;
  inline void set_spell_5(::google::protobuf::int32 value);

  // optional int32 spell_6 = 39;
  inline bool has_spell_6() const;
  inline void clear_spell_6();
  static const int kSpell6FieldNumber = 39;
  inline ::google::protobuf::int32 spell_6() const;
  inline void set_spell_6(::google::protobuf::int32 value);

  // optional int32 spell_7 = 40;
  inline bool has_spell_7() const;
  inline void clear_spell_7();
  static const int kSpell7FieldNumber = 40;
  inline ::google::protobuf::int32 spell_7() const;
  inline void set_spell_7(::google::protobuf::int32 value);

  // optional int32 spell_8 = 41;
  inline bool has_spell_8() const;
  inline void clear_spell_8();
  static const int kSpell8FieldNumber = 41;
  inline ::google::protobuf::int32 spell_8() const;
  inline void set_spell_8(::google::protobuf::int32 value);

  // optional int32 spell_9 = 42;
  inline bool has_spell_9() const;
  inline void clear_spell_9();
  static const int kSpell9FieldNumber = 42;
  inline ::google::protobuf::int32 spell_9() const;
  inline void set_spell_9(::google::protobuf::int32 value);

  // optional int32 spell_10 = 43;
  inline bool has_spell_10() const;
  inline void clear_spell_10();
  static const int kSpell10FieldNumber = 43;
  inline ::google::protobuf::int32 spell_10() const;
  inline void set_spell_10(::google::protobuf::int32 value);

  // optional int32 spell_11 = 44;
  inline bool has_spell_11() const;
  inline void clear_spell_11();
  static const int kSpell11FieldNumber = 44;
  inline ::google::protobuf::int32 spell_11() const;
  inline void set_spell_11(::google::protobuf::int32 value);

  // optional int32 spell_12 = 45;
  inline bool has_spell_12() const;
  inline void clear_spell_12();
  static const int kSpell12FieldNumber = 45;
  inline ::google::protobuf::int32 spell_12() const;
  inline void set_spell_12(::google::protobuf::int32 value);

  // optional int32 spell_13 = 46;
  inline bool has_spell_13() const;
  inline void clear_spell_13();
  static const int kSpell13FieldNumber = 46;
  inline ::google::protobuf::int32 spell_13() const;
  inline void set_spell_13(::google::protobuf::int32 value);

  // optional int32 spell_14 = 47;
  inline bool has_spell_14() const;
  inline void clear_spell_14();
  static const int kSpell14FieldNumber = 47;
  inline ::google::protobuf::int32 spell_14() const;
  inline void set_spell_14(::google::protobuf::int32 value);

  // optional int32 unknown_0 = 48;
  inline bool has_unknown_0() const;
  inline void clear_unknown_0();
  static const int kUnknown0FieldNumber = 48;
  inline ::google::protobuf::int32 unknown_0() const;
  inline void set_unknown_0(::google::protobuf::int32 value);

  // optional int32 unknown_1 = 49;
  inline bool has_unknown_1() const;
  inline void clear_unknown_1();
  static const int kUnknown1FieldNumber = 49;
  inline ::google::protobuf::int32 unknown_1() const;
  inline void set_unknown_1(::google::protobuf::int32 value);

  // optional int32 unknown_2 = 50;
  inline bool has_unknown_2() const;
  inline void clear_unknown_2();
  static const int kUnknown2FieldNumber = 50;
  inline ::google::protobuf::int32 unknown_2() const;
  inline void set_unknown_2(::google::protobuf::int32 value);

  // optional int32 unknown_3 = 51;
  inline bool has_unknown_3() const;
  inline void clear_unknown_3();
  static const int kUnknown3FieldNumber = 51;
  inline ::google::protobuf::int32 unknown_3() const;
  inline void set_unknown_3(::google::protobuf::int32 value);

  // optional int32 unknown_4 = 52;
  inline bool has_unknown_4() const;
  inline void clear_unknown_4();
  static const int kUnknown4FieldNumber = 52;
  inline ::google::protobuf::int32 unknown_4() const;
  inline void set_unknown_4(::google::protobuf::int32 value);

  // optional int32 unknown_5 = 53;
  inline bool has_unknown_5() const;
  inline void clear_unknown_5();
  static const int kUnknown5FieldNumber = 53;
  inline ::google::protobuf::int32 unknown_5() const;
  inline void set_unknown_5(::google::protobuf::int32 value);

  // optional int32 unknown_6 = 54;
  inline bool has_unknown_6() const;
  inline void clear_unknown_6();
  static const int kUnknown6FieldNumber = 54;
  inline ::google::protobuf::int32 unknown_6() const;
  inline void set_unknown_6(::google::protobuf::int32 value);

  // optional int32 unknown_7 = 55;
  inline bool has_unknown_7() const;
  inline void clear_unknown_7();
  static const int kUnknown7FieldNumber = 55;
  inline ::google::protobuf::int32 unknown_7() const;
  inline void set_unknown_7(::google::protobuf::int32 value);

  // optional int32 unknown_8 = 56;
  inline bool has_unknown_8() const;
  inline void clear_unknown_8();
  static const int kUnknown8FieldNumber = 56;
  inline ::google::protobuf::int32 unknown_8() const;
  inline void set_unknown_8(::google::protobuf::int32 value);

  // optional int32 unknown_9 = 57;
  inline bool has_unknown_9() const;
  inline void clear_unknown_9();
  static const int kUnknown9FieldNumber = 57;
  inline ::google::protobuf::int32 unknown_9() const;
  inline void set_unknown_9(::google::protobuf::int32 value);

  // optional int32 unknown_10 = 58;
  inline bool has_unknown_10() const;
  inline void clear_unknown_10();
  static const int kUnknown10FieldNumber = 58;
  inline ::google::protobuf::int32 unknown_10() const;
  inline void set_unknown_10(::google::protobuf::int32 value);

  // optional int32 unknown_11 = 59;
  inline bool has_unknown_11() const;
  inline void clear_unknown_11();
  static const int kUnknown11FieldNumber = 59;
  inline ::google::protobuf::int32 unknown_11() const;
  inline void set_unknown_11(::google::protobuf::int32 value);

  // optional int32 unknown_12 = 60;
  inline bool has_unknown_12() const;
  inline void clear_unknown_12();
  static const int kUnknown12FieldNumber = 60;
  inline ::google::protobuf::int32 unknown_12() const;
  inline void set_unknown_12(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Frpg2PlayerData.Equipment)
 private:
  inline void set_has_left_weapon_1();
  inline void clear_has_left_weapon_1();
  inline void set_has_left_weapon_2();
  inline void clear_has_left_weapon_2();
  inline void set_has_left_weapon_3();
  inline void clear_has_left_weapon_3();
  inline void set_has_right_weapon_1();
  inline void clear_has_right_weapon_1();
  inline void set_has_right_weapon_2();
  inline void clear_has_right_weapon_2();
  inline void set_has_right_weapon_3();
  inline void clear_has_right_weapon_3();
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_chest();
  inline void clear_has_chest();
  inline void set_has_hands();
  inline void clear_has_hands();
  inline void set_has_legs();
  inline void clear_has_legs();
  inline void set_has_ring_1();
  inline void clear_has_ring_1();
  inline void set_has_ring_2();
  inline void clear_has_ring_2();
  inline void set_has_ring_3();
  inline void clear_has_ring_3();
  inline void set_has_ring_4();
  inline void clear_has_ring_4();
  inline void set_has_quick_item_1();
  inline void clear_has_quick_item_1();
  inline void set_has_quick_item_2();
  inline void clear_has_quick_item_2();
  inline void set_has_quick_item_3();
  inline void clear_has_quick_item_3();
  inline void set_has_quick_item_4();
  inline void clear_has_quick_item_4();
  inline void set_has_quick_item_5();
  inline void clear_has_quick_item_5();
  inline void set_has_quick_item_6();
  inline void clear_has_quick_item_6();
  inline void set_has_quick_item_7();
  inline void clear_has_quick_item_7();
  inline void set_has_quick_item_8();
  inline void clear_has_quick_item_8();
  inline void set_has_quick_item_9();
  inline void clear_has_quick_item_9();
  inline void set_has_quick_item_10();
  inline void clear_has_quick_item_10();
  inline void set_has_tool_belt_1();
  inline void clear_has_tool_belt_1();
  inline void set_has_tool_belt_2();
  inline void clear_has_tool_belt_2();
  inline void set_has_tool_belt_3();
  inline void clear_has_tool_belt_3();
  inline void set_has_tool_belt_4();
  inline void clear_has_tool_belt_4();
  inline void set_has_tool_belt_5();
  inline void clear_has_tool_belt_5();
  inline void set_has_arrow_1();
  inline void clear_has_arrow_1();
  inline void set_has_arrow_2();
  inline void clear_has_arrow_2();
  inline void set_has_bolt_1();
  inline void clear_has_bolt_1();
  inline void set_has_bolt_2();
  inline void clear_has_bolt_2();
  inline void set_has_spell_1();
  inline void clear_has_spell_1();
  inline void set_has_spell_2();
  inline void clear_has_spell_2();
  inline void set_has_spell_3();
  inline void clear_has_spell_3();
  inline void set_has_spell_4();
  inline void clear_has_spell_4();
  inline void set_has_spell_5();
  inline void clear_has_spell_5();
  inline void set_has_spell_6();
  inline void clear_has_spell_6();
  inline void set_has_spell_7();
  inline void clear_has_spell_7();
  inline void set_has_spell_8();
  inline void clear_has_spell_8();
  inline void set_has_spell_9();
  inline void clear_has_spell_9();
  inline void set_has_spell_10();
  inline void clear_has_spell_10();
  inline void set_has_spell_11();
  inline void clear_has_spell_11();
  inline void set_has_spell_12();
  inline void clear_has_spell_12();
  inline void set_has_spell_13();
  inline void clear_has_spell_13();
  inline void set_has_spell_14();
  inline void clear_has_spell_14();
  inline void set_has_unknown_0();
  inline void clear_has_unknown_0();
  inline void set_has_unknown_1();
  inline void clear_has_unknown_1();
  inline void set_has_unknown_2();
  inline void clear_has_unknown_2();
  inline void set_has_unknown_3();
  inline void clear_has_unknown_3();
  inline void set_has_unknown_4();
  inline void clear_has_unknown_4();
  inline void set_has_unknown_5();
  inline void clear_has_unknown_5();
  inline void set_has_unknown_6();
  inline void clear_has_unknown_6();
  inline void set_has_unknown_7();
  inline void clear_has_unknown_7();
  inline void set_has_unknown_8();
  inline void clear_has_unknown_8();
  inline void set_has_unknown_9();
  inline void clear_has_unknown_9();
  inline void set_has_unknown_10();
  inline void clear_has_unknown_10();
  inline void set_has_unknown_11();
  inline void clear_has_unknown_11();
  inline void set_has_unknown_12();
  inline void clear_has_unknown_12();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[2];
  ::google::protobuf::int32 left_weapon_1_;
  ::google::protobuf::int32 left_weapon_2_;
  ::google::protobuf::int32 left_weapon_3_;
  ::google::protobuf::int32 right_weapon_1_;
  ::google::protobuf::int32 right_weapon_2_;
  ::google::protobuf::int32 right_weapon_3_;
  ::google::protobuf::int32 head_;
  ::google::protobuf::int32 chest_;
  ::google::protobuf::int32 hands_;
  ::google::protobuf::int32 legs_;
  ::google::protobuf::int32 ring_1_;
  ::google::protobuf::int32 ring_2_;
  ::google::protobuf::int32 ring_3_;
  ::google::protobuf::int32 ring_4_;
  ::google::protobuf::int32 quick_item_1_;
  ::google::protobuf::int32 quick_item_2_;
  ::google::protobuf::int32 quick_item_3_;
  ::google::protobuf::int32 quick_item_4_;
  ::google::protobuf::int32 quick_item_5_;
  ::google::protobuf::int32 quick_item_6_;
  ::google::protobuf::int32 quick_item_7_;
  ::google::protobuf::int32 quick_item_8_;
  ::google::protobuf::int32 quick_item_9_;
  ::google::protobuf::int32 quick_item_10_;
  ::google::protobuf::int32 tool_belt_1_;
  ::google::protobuf::int32 tool_belt_2_;
  ::google::protobuf::int32 tool_belt_3_;
  ::google::protobuf::int32 tool_belt_4_;
  ::google::protobuf::int32 tool_belt_5_;
  ::google::protobuf::int32 arrow_1_;
  ::google::protobuf::int32 arrow_2_;
  ::google::protobuf::int32 bolt_1_;
  ::google::protobuf::int32 bolt_2_;
  ::google::protobuf::int32 spell_1_;
  ::google::protobuf::int32 spell_2_;
  ::google::protobuf::int32 spell_3_;
  ::google::protobuf::int32 spell_4_;
  ::google::protobuf::int32 spell_5_;
  ::google::protobuf::int32 spell_6_;
  ::google::protobuf::int32 spell_7_;
  ::google::protobuf::int32 spell_8_;
  ::google::protobuf::int32 spell_9_;
  ::google::protobuf::int32 spell_10_;
  ::google::protobuf::int32 spell_11_;
  ::google::protobuf::int32 spell_12_;
  ::google::protobuf::int32 spell_13_;
  ::google::protobuf::int32 spell_14_;
  ::google::protobuf::int32 unknown_0_;
  ::google::protobuf::int32 unknown_1_;
  ::google::protobuf::int32 unknown_2_;
  ::google::protobuf::int32 unknown_3_;
  ::google::protobuf::int32 unknown_4_;
  ::google::protobuf::int32 unknown_5_;
  ::google::protobuf::int32 unknown_6_;
  ::google::protobuf::int32 unknown_7_;
  ::google::protobuf::int32 unknown_8_;
  ::google::protobuf::int32 unknown_9_;
  ::google::protobuf::int32 unknown_10_;
  ::google::protobuf::int32 unknown_11_;
  ::google::protobuf::int32 unknown_12_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Frpg2PlayerData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Frpg2PlayerData_2eproto();
  #endif
  friend void protobuf_AssignDesc_Frpg2PlayerData_2eproto();
  friend void protobuf_ShutdownFile_Frpg2PlayerData_2eproto();

  void InitAsDefaultInstance();
  static Equipment* default_instance_;
};
// -------------------------------------------------------------------

class PlayerLocation : public ::google::protobuf::MessageLite {
 public:
  PlayerLocation();
  virtual ~PlayerLocation();

  PlayerLocation(const PlayerLocation& from);

  inline PlayerLocation& operator=(const PlayerLocation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const PlayerLocation& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PlayerLocation* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PlayerLocation* other);

  // implements Message ----------------------------------------------

  PlayerLocation* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PlayerLocation& from);
  void MergeFrom(const PlayerLocation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 online_area_id_lower = 1;
  inline bool has_online_area_id_lower() const;
  inline void clear_online_area_id_lower();
  static const int kOnlineAreaIdLowerFieldNumber = 1;
  inline ::google::protobuf::uint32 online_area_id_lower() const;
  inline void set_online_area_id_lower(::google::protobuf::uint32 value);

  // optional uint32 online_area_id_upper = 2;
  inline bool has_online_area_id_upper() const;
  inline void clear_online_area_id_upper();
  static const int kOnlineAreaIdUpperFieldNumber = 2;
  inline ::google::protobuf::uint32 online_area_id_upper() const;
  inline void set_online_area_id_upper(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Frpg2PlayerData.PlayerLocation)
 private:
  inline void set_has_online_area_id_lower();
  inline void clear_has_online_area_id_lower();
  inline void set_has_online_area_id_upper();
  inline void clear_has_online_area_id_upper();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 online_area_id_lower_;
  ::google::protobuf::uint32 online_area_id_upper_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Frpg2PlayerData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Frpg2PlayerData_2eproto();
  #endif
  friend void protobuf_AssignDesc_Frpg2PlayerData_2eproto();
  friend void protobuf_ShutdownFile_Frpg2PlayerData_2eproto();

  void InitAsDefaultInstance();
  static PlayerLocation* default_instance_;
};
// -------------------------------------------------------------------

class DefenseInfo : public ::google::protobuf::MessageLite {
 public:
  DefenseInfo();
  virtual ~DefenseInfo();

  DefenseInfo(const DefenseInfo& from);

  inline DefenseInfo& operator=(const DefenseInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const DefenseInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DefenseInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DefenseInfo* other);

  // implements Message ----------------------------------------------

  DefenseInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DefenseInfo& from);
  void MergeFrom(const DefenseInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 physical = 1;
  inline bool has_physical() const;
  inline void clear_physical();
  static const int kPhysicalFieldNumber = 1;
  inline ::google::protobuf::uint32 physical() const;
  inline void set_physical(::google::protobuf::uint32 value);

  // optional uint32 strike = 2;
  inline bool has_strike() const;
  inline void clear_strike();
  static const int kStrikeFieldNumber = 2;
  inline ::google::protobuf::uint32 strike() const;
  inline void set_strike(::google::protobuf::uint32 value);

  // optional uint32 slash = 3;
  inline bool has_slash() const;
  inline void clear_slash();
  static const int kSlashFieldNumber = 3;
  inline ::google::protobuf::uint32 slash() const;
  inline void set_slash(::google::protobuf::uint32 value);

  // optional uint32 thrust = 4;
  inline bool has_thrust() const;
  inline void clear_thrust();
  static const int kThrustFieldNumber = 4;
  inline ::google::protobuf::uint32 thrust() const;
  inline void set_thrust(::google::protobuf::uint32 value);

  // optional uint32 magic = 5;
  inline bool has_magic() const;
  inline void clear_magic();
  static const int kMagicFieldNumber = 5;
  inline ::google::protobuf::uint32 magic() const;
  inline void set_magic(::google::protobuf::uint32 value);

  // optional uint32 fire = 6;
  inline bool has_fire() const;
  inline void clear_fire();
  static const int kFireFieldNumber = 6;
  inline ::google::protobuf::uint32 fire() const;
  inline void set_fire(::google::protobuf::uint32 value);

  // optional uint32 lightning = 7;
  inline bool has_lightning() const;
  inline void clear_lightning();
  static const int kLightningFieldNumber = 7;
  inline ::google::protobuf::uint32 lightning() const;
  inline void set_lightning(::google::protobuf::uint32 value);

  // optional uint32 dark = 8;
  inline bool has_dark() const;
  inline void clear_dark();
  static const int kDarkFieldNumber = 8;
  inline ::google::protobuf::uint32 dark() const;
  inline void set_dark(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Frpg2PlayerData.DefenseInfo)
 private:
  inline void set_has_physical();
  inline void clear_has_physical();
  inline void set_has_strike();
  inline void clear_has_strike();
  inline void set_has_slash();
  inline void clear_has_slash();
  inline void set_has_thrust();
  inline void clear_has_thrust();
  inline void set_has_magic();
  inline void clear_has_magic();
  inline void set_has_fire();
  inline void clear_has_fire();
  inline void set_has_lightning();
  inline void clear_has_lightning();
  inline void set_has_dark();
  inline void clear_has_dark();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 physical_;
  ::google::protobuf::uint32 strike_;
  ::google::protobuf::uint32 slash_;
  ::google::protobuf::uint32 thrust_;
  ::google::protobuf::uint32 magic_;
  ::google::protobuf::uint32 fire_;
  ::google::protobuf::uint32 lightning_;
  ::google::protobuf::uint32 dark_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Frpg2PlayerData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Frpg2PlayerData_2eproto();
  #endif
  friend void protobuf_AssignDesc_Frpg2PlayerData_2eproto();
  friend void protobuf_ShutdownFile_Frpg2PlayerData_2eproto();

  void InitAsDefaultInstance();
  static DefenseInfo* default_instance_;
};
// -------------------------------------------------------------------

class CutRateInfo : public ::google::protobuf::MessageLite {
 public:
  CutRateInfo();
  virtual ~CutRateInfo();

  CutRateInfo(const CutRateInfo& from);

  inline CutRateInfo& operator=(const CutRateInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const CutRateInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CutRateInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CutRateInfo* other);

  // implements Message ----------------------------------------------

  CutRateInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CutRateInfo& from);
  void MergeFrom(const CutRateInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float physical = 1;
  inline bool has_physical() const;
  inline void clear_physical();
  static const int kPhysicalFieldNumber = 1;
  inline float physical() const;
  inline void set_physical(float value);

  // optional float strike = 2;
  inline bool has_strike() const;
  inline void clear_strike();
  static const int kStrikeFieldNumber = 2;
  inline float strike() const;
  inline void set_strike(float value);

  // optional float slash = 3;
  inline bool has_slash() const;
  inline void clear_slash();
  static const int kSlashFieldNumber = 3;
  inline float slash() const;
  inline void set_slash(float value);

  // optional float thrust = 4;
  inline bool has_thrust() const;
  inline void clear_thrust();
  static const int kThrustFieldNumber = 4;
  inline float thrust() const;
  inline void set_thrust(float value);

  // optional float magic = 5;
  inline bool has_magic() const;
  inline void clear_magic();
  static const int kMagicFieldNumber = 5;
  inline float magic() const;
  inline void set_magic(float value);

  // optional float fire = 6;
  inline bool has_fire() const;
  inline void clear_fire();
  static const int kFireFieldNumber = 6;
  inline float fire() const;
  inline void set_fire(float value);

  // optional float lightning = 7;
  inline bool has_lightning() const;
  inline void clear_lightning();
  static const int kLightningFieldNumber = 7;
  inline float lightning() const;
  inline void set_lightning(float value);

  // optional float dark = 8;
  inline bool has_dark() const;
  inline void clear_dark();
  static const int kDarkFieldNumber = 8;
  inline float dark() const;
  inline void set_dark(float value);

  // @@protoc_insertion_point(class_scope:Frpg2PlayerData.CutRateInfo)
 private:
  inline void set_has_physical();
  inline void clear_has_physical();
  inline void set_has_strike();
  inline void clear_has_strike();
  inline void set_has_slash();
  inline void clear_has_slash();
  inline void set_has_thrust();
  inline void clear_has_thrust();
  inline void set_has_magic();
  inline void clear_has_magic();
  inline void set_has_fire();
  inline void clear_has_fire();
  inline void set_has_lightning();
  inline void clear_has_lightning();
  inline void set_has_dark();
  inline void clear_has_dark();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float physical_;
  float strike_;
  float slash_;
  float thrust_;
  float magic_;
  float fire_;
  float lightning_;
  float dark_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Frpg2PlayerData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Frpg2PlayerData_2eproto();
  #endif
  friend void protobuf_AssignDesc_Frpg2PlayerData_2eproto();
  friend void protobuf_ShutdownFile_Frpg2PlayerData_2eproto();

  void InitAsDefaultInstance();
  static CutRateInfo* default_instance_;
};
// -------------------------------------------------------------------

class ResistanceInfo : public ::google::protobuf::MessageLite {
 public:
  ResistanceInfo();
  virtual ~ResistanceInfo();

  ResistanceInfo(const ResistanceInfo& from);

  inline ResistanceInfo& operator=(const ResistanceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ResistanceInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ResistanceInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ResistanceInfo* other);

  // implements Message ----------------------------------------------

  ResistanceInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ResistanceInfo& from);
  void MergeFrom(const ResistanceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 bleed = 1;
  inline bool has_bleed() const;
  inline void clear_bleed();
  static const int kBleedFieldNumber = 1;
  inline ::google::protobuf::uint32 bleed() const;
  inline void set_bleed(::google::protobuf::uint32 value);

  // optional uint32 poison = 2;
  inline bool has_poison() const;
  inline void clear_poison();
  static const int kPoisonFieldNumber = 2;
  inline ::google::protobuf::uint32 poison() const;
  inline void set_poison(::google::protobuf::uint32 value);

  // optional uint32 frost = 3;
  inline bool has_frost() const;
  inline void clear_frost();
  static const int kFrostFieldNumber = 3;
  inline ::google::protobuf::uint32 frost() const;
  inline void set_frost(::google::protobuf::uint32 value);

  // optional uint32 curse = 4;
  inline bool has_curse() const;
  inline void clear_curse();
  static const int kCurseFieldNumber = 4;
  inline ::google::protobuf::uint32 curse() const;
  inline void set_curse(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Frpg2PlayerData.ResistanceInfo)
 private:
  inline void set_has_bleed();
  inline void clear_has_bleed();
  inline void set_has_poison();
  inline void clear_has_poison();
  inline void set_has_frost();
  inline void clear_has_frost();
  inline void set_has_curse();
  inline void clear_has_curse();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 bleed_;
  ::google::protobuf::uint32 poison_;
  ::google::protobuf::uint32 frost_;
  ::google::protobuf::uint32 curse_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Frpg2PlayerData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Frpg2PlayerData_2eproto();
  #endif
  friend void protobuf_AssignDesc_Frpg2PlayerData_2eproto();
  friend void protobuf_ShutdownFile_Frpg2PlayerData_2eproto();

  void InitAsDefaultInstance();
  static ResistanceInfo* default_instance_;
};
// -------------------------------------------------------------------

class Vector : public ::google::protobuf::MessageLite {
 public:
  Vector();
  virtual ~Vector();

  Vector(const Vector& from);

  inline Vector& operator=(const Vector& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const Vector& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Vector* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Vector* other);

  // implements Message ----------------------------------------------

  Vector* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Vector& from);
  void MergeFrom(const Vector& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // required float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);

  // @@protoc_insertion_point(class_scope:Frpg2PlayerData.Vector)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  float z_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Frpg2PlayerData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Frpg2PlayerData_2eproto();
  #endif
  friend void protobuf_AssignDesc_Frpg2PlayerData_2eproto();
  friend void protobuf_ShutdownFile_Frpg2PlayerData_2eproto();

  void InitAsDefaultInstance();
  static Vector* default_instance_;
};
// -------------------------------------------------------------------

class BonfireInfo : public ::google::protobuf::MessageLite {
 public:
  BonfireInfo();
  virtual ~BonfireInfo();

  BonfireInfo(const BonfireInfo& from);

  inline BonfireInfo& operator=(const BonfireInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const BonfireInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const BonfireInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(BonfireInfo* other);

  // implements Message ----------------------------------------------

  BonfireInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BonfireInfo& from);
  void MergeFrom(const BonfireInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 bonfire_id = 1;
  inline bool has_bonfire_id() const;
  inline void clear_bonfire_id();
  static const int kBonfireIdFieldNumber = 1;
  inline ::google::protobuf::uint32 bonfire_id() const;
  inline void set_bonfire_id(::google::protobuf::uint32 value);

  // required uint32 has_been_lit = 2;
  inline bool has_has_been_lit() const;
  inline void clear_has_been_lit();
  static const int kHasBeenLitFieldNumber = 2;
  inline ::google::protobuf::uint32 has_been_lit() const;
  inline void set_has_been_lit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Frpg2PlayerData.BonfireInfo)
 private:
  inline void set_has_bonfire_id();
  inline void clear_has_bonfire_id();
  inline void set_has_has_been_lit();
  inline void clear_has_has_been_lit();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 bonfire_id_;
  ::google::protobuf::uint32 has_been_lit_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Frpg2PlayerData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Frpg2PlayerData_2eproto();
  #endif
  friend void protobuf_AssignDesc_Frpg2PlayerData_2eproto();
  friend void protobuf_ShutdownFile_Frpg2PlayerData_2eproto();

  void InitAsDefaultInstance();
  static BonfireInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// DateTime

// required uint32 year = 1;
inline bool DateTime::has_year() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DateTime::set_has_year() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DateTime::clear_has_year() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DateTime::clear_year() {
  year_ = 0u;
  clear_has_year();
}
inline ::google::protobuf::uint32 DateTime::year() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.DateTime.year)
  return year_;
}
inline void DateTime::set_year(::google::protobuf::uint32 value) {
  set_has_year();
  year_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.DateTime.year)
}

// required uint32 month = 2;
inline bool DateTime::has_month() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DateTime::set_has_month() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DateTime::clear_has_month() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DateTime::clear_month() {
  month_ = 0u;
  clear_has_month();
}
inline ::google::protobuf::uint32 DateTime::month() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.DateTime.month)
  return month_;
}
inline void DateTime::set_month(::google::protobuf::uint32 value) {
  set_has_month();
  month_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.DateTime.month)
}

// required uint32 day = 3;
inline bool DateTime::has_day() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DateTime::set_has_day() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DateTime::clear_has_day() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DateTime::clear_day() {
  day_ = 0u;
  clear_has_day();
}
inline ::google::protobuf::uint32 DateTime::day() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.DateTime.day)
  return day_;
}
inline void DateTime::set_day(::google::protobuf::uint32 value) {
  set_has_day();
  day_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.DateTime.day)
}

// required uint32 hours = 4;
inline bool DateTime::has_hours() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DateTime::set_has_hours() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DateTime::clear_has_hours() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DateTime::clear_hours() {
  hours_ = 0u;
  clear_has_hours();
}
inline ::google::protobuf::uint32 DateTime::hours() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.DateTime.hours)
  return hours_;
}
inline void DateTime::set_hours(::google::protobuf::uint32 value) {
  set_has_hours();
  hours_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.DateTime.hours)
}

// required uint32 minutes = 5;
inline bool DateTime::has_minutes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DateTime::set_has_minutes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DateTime::clear_has_minutes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DateTime::clear_minutes() {
  minutes_ = 0u;
  clear_has_minutes();
}
inline ::google::protobuf::uint32 DateTime::minutes() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.DateTime.minutes)
  return minutes_;
}
inline void DateTime::set_minutes(::google::protobuf::uint32 value) {
  set_has_minutes();
  minutes_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.DateTime.minutes)
}

// required uint32 seconds = 6;
inline bool DateTime::has_seconds() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DateTime::set_has_seconds() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DateTime::clear_has_seconds() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DateTime::clear_seconds() {
  seconds_ = 0u;
  clear_has_seconds();
}
inline ::google::protobuf::uint32 DateTime::seconds() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.DateTime.seconds)
  return seconds_;
}
inline void DateTime::set_seconds(::google::protobuf::uint32 value) {
  set_has_seconds();
  seconds_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.DateTime.seconds)
}

// required uint32 tzdiff = 7;
inline bool DateTime::has_tzdiff() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DateTime::set_has_tzdiff() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DateTime::clear_has_tzdiff() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DateTime::clear_tzdiff() {
  tzdiff_ = 0u;
  clear_has_tzdiff();
}
inline ::google::protobuf::uint32 DateTime::tzdiff() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.DateTime.tzdiff)
  return tzdiff_;
}
inline void DateTime::set_tzdiff(::google::protobuf::uint32 value) {
  set_has_tzdiff();
  tzdiff_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.DateTime.tzdiff)
}

// -------------------------------------------------------------------

// AllStatus

// optional .Frpg2PlayerData.PlayerLocation player_location = 1;
inline bool AllStatus::has_player_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllStatus::set_has_player_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllStatus::clear_has_player_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllStatus::clear_player_location() {
  if (player_location_ != NULL) player_location_->::Frpg2PlayerData::PlayerLocation::Clear();
  clear_has_player_location();
}
inline const ::Frpg2PlayerData::PlayerLocation& AllStatus::player_location() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.AllStatus.player_location)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return player_location_ != NULL ? *player_location_ : *default_instance().player_location_;
#else
  return player_location_ != NULL ? *player_location_ : *default_instance_->player_location_;
#endif
}
inline ::Frpg2PlayerData::PlayerLocation* AllStatus::mutable_player_location() {
  set_has_player_location();
  if (player_location_ == NULL) player_location_ = new ::Frpg2PlayerData::PlayerLocation;
  // @@protoc_insertion_point(field_mutable:Frpg2PlayerData.AllStatus.player_location)
  return player_location_;
}
inline ::Frpg2PlayerData::PlayerLocation* AllStatus::release_player_location() {
  clear_has_player_location();
  ::Frpg2PlayerData::PlayerLocation* temp = player_location_;
  player_location_ = NULL;
  return temp;
}
inline void AllStatus::set_allocated_player_location(::Frpg2PlayerData::PlayerLocation* player_location) {
  delete player_location_;
  player_location_ = player_location;
  if (player_location) {
    set_has_player_location();
  } else {
    clear_has_player_location();
  }
  // @@protoc_insertion_point(field_set_allocated:Frpg2PlayerData.AllStatus.player_location)
}

// optional .Frpg2PlayerData.LogInfo log_info = 2;
inline bool AllStatus::has_log_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AllStatus::set_has_log_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AllStatus::clear_has_log_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AllStatus::clear_log_info() {
  if (log_info_ != NULL) log_info_->::Frpg2PlayerData::LogInfo::Clear();
  clear_has_log_info();
}
inline const ::Frpg2PlayerData::LogInfo& AllStatus::log_info() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.AllStatus.log_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return log_info_ != NULL ? *log_info_ : *default_instance().log_info_;
#else
  return log_info_ != NULL ? *log_info_ : *default_instance_->log_info_;
#endif
}
inline ::Frpg2PlayerData::LogInfo* AllStatus::mutable_log_info() {
  set_has_log_info();
  if (log_info_ == NULL) log_info_ = new ::Frpg2PlayerData::LogInfo;
  // @@protoc_insertion_point(field_mutable:Frpg2PlayerData.AllStatus.log_info)
  return log_info_;
}
inline ::Frpg2PlayerData::LogInfo* AllStatus::release_log_info() {
  clear_has_log_info();
  ::Frpg2PlayerData::LogInfo* temp = log_info_;
  log_info_ = NULL;
  return temp;
}
inline void AllStatus::set_allocated_log_info(::Frpg2PlayerData::LogInfo* log_info) {
  delete log_info_;
  log_info_ = log_info;
  if (log_info) {
    set_has_log_info();
  } else {
    clear_has_log_info();
  }
  // @@protoc_insertion_point(field_set_allocated:Frpg2PlayerData.AllStatus.log_info)
}

// optional .Frpg2PlayerData.PlayerStatus player_status = 3;
inline bool AllStatus::has_player_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AllStatus::set_has_player_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AllStatus::clear_has_player_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AllStatus::clear_player_status() {
  if (player_status_ != NULL) player_status_->::Frpg2PlayerData::PlayerStatus::Clear();
  clear_has_player_status();
}
inline const ::Frpg2PlayerData::PlayerStatus& AllStatus::player_status() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.AllStatus.player_status)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return player_status_ != NULL ? *player_status_ : *default_instance().player_status_;
#else
  return player_status_ != NULL ? *player_status_ : *default_instance_->player_status_;
#endif
}
inline ::Frpg2PlayerData::PlayerStatus* AllStatus::mutable_player_status() {
  set_has_player_status();
  if (player_status_ == NULL) player_status_ = new ::Frpg2PlayerData::PlayerStatus;
  // @@protoc_insertion_point(field_mutable:Frpg2PlayerData.AllStatus.player_status)
  return player_status_;
}
inline ::Frpg2PlayerData::PlayerStatus* AllStatus::release_player_status() {
  clear_has_player_status();
  ::Frpg2PlayerData::PlayerStatus* temp = player_status_;
  player_status_ = NULL;
  return temp;
}
inline void AllStatus::set_allocated_player_status(::Frpg2PlayerData::PlayerStatus* player_status) {
  delete player_status_;
  player_status_ = player_status;
  if (player_status) {
    set_has_player_status();
  } else {
    clear_has_player_status();
  }
  // @@protoc_insertion_point(field_set_allocated:Frpg2PlayerData.AllStatus.player_status)
}

// optional .Frpg2PlayerData.PlayData play_data = 4;
inline bool AllStatus::has_play_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AllStatus::set_has_play_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AllStatus::clear_has_play_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AllStatus::clear_play_data() {
  if (play_data_ != NULL) play_data_->::Frpg2PlayerData::PlayData::Clear();
  clear_has_play_data();
}
inline const ::Frpg2PlayerData::PlayData& AllStatus::play_data() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.AllStatus.play_data)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return play_data_ != NULL ? *play_data_ : *default_instance().play_data_;
#else
  return play_data_ != NULL ? *play_data_ : *default_instance_->play_data_;
#endif
}
inline ::Frpg2PlayerData::PlayData* AllStatus::mutable_play_data() {
  set_has_play_data();
  if (play_data_ == NULL) play_data_ = new ::Frpg2PlayerData::PlayData;
  // @@protoc_insertion_point(field_mutable:Frpg2PlayerData.AllStatus.play_data)
  return play_data_;
}
inline ::Frpg2PlayerData::PlayData* AllStatus::release_play_data() {
  clear_has_play_data();
  ::Frpg2PlayerData::PlayData* temp = play_data_;
  play_data_ = NULL;
  return temp;
}
inline void AllStatus::set_allocated_play_data(::Frpg2PlayerData::PlayData* play_data) {
  delete play_data_;
  play_data_ = play_data;
  if (play_data) {
    set_has_play_data();
  } else {
    clear_has_play_data();
  }
  // @@protoc_insertion_point(field_set_allocated:Frpg2PlayerData.AllStatus.play_data)
}

// optional .Frpg2PlayerData.StatsInfo stats_info = 5;
inline bool AllStatus::has_stats_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AllStatus::set_has_stats_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AllStatus::clear_has_stats_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AllStatus::clear_stats_info() {
  if (stats_info_ != NULL) stats_info_->::Frpg2PlayerData::StatsInfo::Clear();
  clear_has_stats_info();
}
inline const ::Frpg2PlayerData::StatsInfo& AllStatus::stats_info() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.AllStatus.stats_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return stats_info_ != NULL ? *stats_info_ : *default_instance().stats_info_;
#else
  return stats_info_ != NULL ? *stats_info_ : *default_instance_->stats_info_;
#endif
}
inline ::Frpg2PlayerData::StatsInfo* AllStatus::mutable_stats_info() {
  set_has_stats_info();
  if (stats_info_ == NULL) stats_info_ = new ::Frpg2PlayerData::StatsInfo;
  // @@protoc_insertion_point(field_mutable:Frpg2PlayerData.AllStatus.stats_info)
  return stats_info_;
}
inline ::Frpg2PlayerData::StatsInfo* AllStatus::release_stats_info() {
  clear_has_stats_info();
  ::Frpg2PlayerData::StatsInfo* temp = stats_info_;
  stats_info_ = NULL;
  return temp;
}
inline void AllStatus::set_allocated_stats_info(::Frpg2PlayerData::StatsInfo* stats_info) {
  delete stats_info_;
  stats_info_ = stats_info;
  if (stats_info) {
    set_has_stats_info();
  } else {
    clear_has_stats_info();
  }
  // @@protoc_insertion_point(field_set_allocated:Frpg2PlayerData.AllStatus.stats_info)
}

// optional .Frpg2PlayerData.Equipment equipment = 6;
inline bool AllStatus::has_equipment() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AllStatus::set_has_equipment() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AllStatus::clear_has_equipment() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AllStatus::clear_equipment() {
  if (equipment_ != NULL) equipment_->::Frpg2PlayerData::Equipment::Clear();
  clear_has_equipment();
}
inline const ::Frpg2PlayerData::Equipment& AllStatus::equipment() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.AllStatus.equipment)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return equipment_ != NULL ? *equipment_ : *default_instance().equipment_;
#else
  return equipment_ != NULL ? *equipment_ : *default_instance_->equipment_;
#endif
}
inline ::Frpg2PlayerData::Equipment* AllStatus::mutable_equipment() {
  set_has_equipment();
  if (equipment_ == NULL) equipment_ = new ::Frpg2PlayerData::Equipment;
  // @@protoc_insertion_point(field_mutable:Frpg2PlayerData.AllStatus.equipment)
  return equipment_;
}
inline ::Frpg2PlayerData::Equipment* AllStatus::release_equipment() {
  clear_has_equipment();
  ::Frpg2PlayerData::Equipment* temp = equipment_;
  equipment_ = NULL;
  return temp;
}
inline void AllStatus::set_allocated_equipment(::Frpg2PlayerData::Equipment* equipment) {
  delete equipment_;
  equipment_ = equipment;
  if (equipment) {
    set_has_equipment();
  } else {
    clear_has_equipment();
  }
  // @@protoc_insertion_point(field_set_allocated:Frpg2PlayerData.AllStatus.equipment)
}

// optional string steam_id = 7;
inline bool AllStatus::has_steam_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AllStatus::set_has_steam_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AllStatus::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AllStatus::clear_steam_id() {
  if (steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    steam_id_->clear();
  }
  clear_has_steam_id();
}
inline const ::std::string& AllStatus::steam_id() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.AllStatus.steam_id)
  return *steam_id_;
}
inline void AllStatus::set_steam_id(const ::std::string& value) {
  set_has_steam_id();
  if (steam_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    steam_id_ = new ::std::string;
  }
  steam_id_->assign(value);
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.AllStatus.steam_id)
}
inline void AllStatus::set_steam_id(const char* value) {
  set_has_steam_id();
  if (steam_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    steam_id_ = new ::std::string;
  }
  steam_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Frpg2PlayerData.AllStatus.steam_id)
}
inline void AllStatus::set_steam_id(const char* value, size_t size) {
  set_has_steam_id();
  if (steam_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    steam_id_ = new ::std::string;
  }
  steam_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Frpg2PlayerData.AllStatus.steam_id)
}
inline ::std::string* AllStatus::mutable_steam_id() {
  set_has_steam_id();
  if (steam_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    steam_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Frpg2PlayerData.AllStatus.steam_id)
  return steam_id_;
}
inline ::std::string* AllStatus::release_steam_id() {
  clear_has_steam_id();
  if (steam_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = steam_id_;
    steam_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AllStatus::set_allocated_steam_id(::std::string* steam_id) {
  if (steam_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete steam_id_;
  }
  if (steam_id) {
    set_has_steam_id();
    steam_id_ = steam_id;
  } else {
    clear_has_steam_id();
    steam_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Frpg2PlayerData.AllStatus.steam_id)
}

// -------------------------------------------------------------------

// unknown_struct_1

// optional int64 unknown_1 = 1;
inline bool unknown_struct_1::has_unknown_1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void unknown_struct_1::set_has_unknown_1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void unknown_struct_1::clear_has_unknown_1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void unknown_struct_1::clear_unknown_1() {
  unknown_1_ = GOOGLE_LONGLONG(0);
  clear_has_unknown_1();
}
inline ::google::protobuf::int64 unknown_struct_1::unknown_1() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.unknown_struct_1.unknown_1)
  return unknown_1_;
}
inline void unknown_struct_1::set_unknown_1(::google::protobuf::int64 value) {
  set_has_unknown_1();
  unknown_1_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.unknown_struct_1.unknown_1)
}

// optional string unknown_2 = 2;
inline bool unknown_struct_1::has_unknown_2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void unknown_struct_1::set_has_unknown_2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void unknown_struct_1::clear_has_unknown_2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void unknown_struct_1::clear_unknown_2() {
  if (unknown_2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unknown_2_->clear();
  }
  clear_has_unknown_2();
}
inline const ::std::string& unknown_struct_1::unknown_2() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.unknown_struct_1.unknown_2)
  return *unknown_2_;
}
inline void unknown_struct_1::set_unknown_2(const ::std::string& value) {
  set_has_unknown_2();
  if (unknown_2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unknown_2_ = new ::std::string;
  }
  unknown_2_->assign(value);
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.unknown_struct_1.unknown_2)
}
inline void unknown_struct_1::set_unknown_2(const char* value) {
  set_has_unknown_2();
  if (unknown_2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unknown_2_ = new ::std::string;
  }
  unknown_2_->assign(value);
  // @@protoc_insertion_point(field_set_char:Frpg2PlayerData.unknown_struct_1.unknown_2)
}
inline void unknown_struct_1::set_unknown_2(const char* value, size_t size) {
  set_has_unknown_2();
  if (unknown_2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unknown_2_ = new ::std::string;
  }
  unknown_2_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Frpg2PlayerData.unknown_struct_1.unknown_2)
}
inline ::std::string* unknown_struct_1::mutable_unknown_2() {
  set_has_unknown_2();
  if (unknown_2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unknown_2_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Frpg2PlayerData.unknown_struct_1.unknown_2)
  return unknown_2_;
}
inline ::std::string* unknown_struct_1::release_unknown_2() {
  clear_has_unknown_2();
  if (unknown_2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = unknown_2_;
    unknown_2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void unknown_struct_1::set_allocated_unknown_2(::std::string* unknown_2) {
  if (unknown_2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete unknown_2_;
  }
  if (unknown_2) {
    set_has_unknown_2();
    unknown_2_ = unknown_2;
  } else {
    clear_has_unknown_2();
    unknown_2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Frpg2PlayerData.unknown_struct_1.unknown_2)
}

// optional int64 unknown_3 = 3;
inline bool unknown_struct_1::has_unknown_3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void unknown_struct_1::set_has_unknown_3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void unknown_struct_1::clear_has_unknown_3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void unknown_struct_1::clear_unknown_3() {
  unknown_3_ = GOOGLE_LONGLONG(0);
  clear_has_unknown_3();
}
inline ::google::protobuf::int64 unknown_struct_1::unknown_3() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.unknown_struct_1.unknown_3)
  return unknown_3_;
}
inline void unknown_struct_1::set_unknown_3(::google::protobuf::int64 value) {
  set_has_unknown_3();
  unknown_3_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.unknown_struct_1.unknown_3)
}

// -------------------------------------------------------------------

// UpdateAllDelta

// optional .Frpg2PlayerData.PlayerLocation player_location = 1;
inline bool UpdateAllDelta::has_player_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateAllDelta::set_has_player_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateAllDelta::clear_has_player_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateAllDelta::clear_player_location() {
  if (player_location_ != NULL) player_location_->::Frpg2PlayerData::PlayerLocation::Clear();
  clear_has_player_location();
}
inline const ::Frpg2PlayerData::PlayerLocation& UpdateAllDelta::player_location() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.UpdateAllDelta.player_location)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return player_location_ != NULL ? *player_location_ : *default_instance().player_location_;
#else
  return player_location_ != NULL ? *player_location_ : *default_instance_->player_location_;
#endif
}
inline ::Frpg2PlayerData::PlayerLocation* UpdateAllDelta::mutable_player_location() {
  set_has_player_location();
  if (player_location_ == NULL) player_location_ = new ::Frpg2PlayerData::PlayerLocation;
  // @@protoc_insertion_point(field_mutable:Frpg2PlayerData.UpdateAllDelta.player_location)
  return player_location_;
}
inline ::Frpg2PlayerData::PlayerLocation* UpdateAllDelta::release_player_location() {
  clear_has_player_location();
  ::Frpg2PlayerData::PlayerLocation* temp = player_location_;
  player_location_ = NULL;
  return temp;
}
inline void UpdateAllDelta::set_allocated_player_location(::Frpg2PlayerData::PlayerLocation* player_location) {
  delete player_location_;
  player_location_ = player_location;
  if (player_location) {
    set_has_player_location();
  } else {
    clear_has_player_location();
  }
  // @@protoc_insertion_point(field_set_allocated:Frpg2PlayerData.UpdateAllDelta.player_location)
}

// optional .Frpg2PlayerData.LogInfo log_info = 2;
inline bool UpdateAllDelta::has_log_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateAllDelta::set_has_log_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateAllDelta::clear_has_log_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateAllDelta::clear_log_info() {
  if (log_info_ != NULL) log_info_->::Frpg2PlayerData::LogInfo::Clear();
  clear_has_log_info();
}
inline const ::Frpg2PlayerData::LogInfo& UpdateAllDelta::log_info() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.UpdateAllDelta.log_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return log_info_ != NULL ? *log_info_ : *default_instance().log_info_;
#else
  return log_info_ != NULL ? *log_info_ : *default_instance_->log_info_;
#endif
}
inline ::Frpg2PlayerData::LogInfo* UpdateAllDelta::mutable_log_info() {
  set_has_log_info();
  if (log_info_ == NULL) log_info_ = new ::Frpg2PlayerData::LogInfo;
  // @@protoc_insertion_point(field_mutable:Frpg2PlayerData.UpdateAllDelta.log_info)
  return log_info_;
}
inline ::Frpg2PlayerData::LogInfo* UpdateAllDelta::release_log_info() {
  clear_has_log_info();
  ::Frpg2PlayerData::LogInfo* temp = log_info_;
  log_info_ = NULL;
  return temp;
}
inline void UpdateAllDelta::set_allocated_log_info(::Frpg2PlayerData::LogInfo* log_info) {
  delete log_info_;
  log_info_ = log_info;
  if (log_info) {
    set_has_log_info();
  } else {
    clear_has_log_info();
  }
  // @@protoc_insertion_point(field_set_allocated:Frpg2PlayerData.UpdateAllDelta.log_info)
}

// optional .Frpg2PlayerData.PlayerStatus player_status = 3;
inline bool UpdateAllDelta::has_player_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdateAllDelta::set_has_player_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdateAllDelta::clear_has_player_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdateAllDelta::clear_player_status() {
  if (player_status_ != NULL) player_status_->::Frpg2PlayerData::PlayerStatus::Clear();
  clear_has_player_status();
}
inline const ::Frpg2PlayerData::PlayerStatus& UpdateAllDelta::player_status() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.UpdateAllDelta.player_status)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return player_status_ != NULL ? *player_status_ : *default_instance().player_status_;
#else
  return player_status_ != NULL ? *player_status_ : *default_instance_->player_status_;
#endif
}
inline ::Frpg2PlayerData::PlayerStatus* UpdateAllDelta::mutable_player_status() {
  set_has_player_status();
  if (player_status_ == NULL) player_status_ = new ::Frpg2PlayerData::PlayerStatus;
  // @@protoc_insertion_point(field_mutable:Frpg2PlayerData.UpdateAllDelta.player_status)
  return player_status_;
}
inline ::Frpg2PlayerData::PlayerStatus* UpdateAllDelta::release_player_status() {
  clear_has_player_status();
  ::Frpg2PlayerData::PlayerStatus* temp = player_status_;
  player_status_ = NULL;
  return temp;
}
inline void UpdateAllDelta::set_allocated_player_status(::Frpg2PlayerData::PlayerStatus* player_status) {
  delete player_status_;
  player_status_ = player_status;
  if (player_status) {
    set_has_player_status();
  } else {
    clear_has_player_status();
  }
  // @@protoc_insertion_point(field_set_allocated:Frpg2PlayerData.UpdateAllDelta.player_status)
}

// optional .Frpg2PlayerData.PlayData play_data = 4;
inline bool UpdateAllDelta::has_play_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UpdateAllDelta::set_has_play_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UpdateAllDelta::clear_has_play_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UpdateAllDelta::clear_play_data() {
  if (play_data_ != NULL) play_data_->::Frpg2PlayerData::PlayData::Clear();
  clear_has_play_data();
}
inline const ::Frpg2PlayerData::PlayData& UpdateAllDelta::play_data() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.UpdateAllDelta.play_data)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return play_data_ != NULL ? *play_data_ : *default_instance().play_data_;
#else
  return play_data_ != NULL ? *play_data_ : *default_instance_->play_data_;
#endif
}
inline ::Frpg2PlayerData::PlayData* UpdateAllDelta::mutable_play_data() {
  set_has_play_data();
  if (play_data_ == NULL) play_data_ = new ::Frpg2PlayerData::PlayData;
  // @@protoc_insertion_point(field_mutable:Frpg2PlayerData.UpdateAllDelta.play_data)
  return play_data_;
}
inline ::Frpg2PlayerData::PlayData* UpdateAllDelta::release_play_data() {
  clear_has_play_data();
  ::Frpg2PlayerData::PlayData* temp = play_data_;
  play_data_ = NULL;
  return temp;
}
inline void UpdateAllDelta::set_allocated_play_data(::Frpg2PlayerData::PlayData* play_data) {
  delete play_data_;
  play_data_ = play_data;
  if (play_data) {
    set_has_play_data();
  } else {
    clear_has_play_data();
  }
  // @@protoc_insertion_point(field_set_allocated:Frpg2PlayerData.UpdateAllDelta.play_data)
}

// optional .Frpg2PlayerData.StatsInfo stats_info = 5;
inline bool UpdateAllDelta::has_stats_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UpdateAllDelta::set_has_stats_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UpdateAllDelta::clear_has_stats_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UpdateAllDelta::clear_stats_info() {
  if (stats_info_ != NULL) stats_info_->::Frpg2PlayerData::StatsInfo::Clear();
  clear_has_stats_info();
}
inline const ::Frpg2PlayerData::StatsInfo& UpdateAllDelta::stats_info() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.UpdateAllDelta.stats_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return stats_info_ != NULL ? *stats_info_ : *default_instance().stats_info_;
#else
  return stats_info_ != NULL ? *stats_info_ : *default_instance_->stats_info_;
#endif
}
inline ::Frpg2PlayerData::StatsInfo* UpdateAllDelta::mutable_stats_info() {
  set_has_stats_info();
  if (stats_info_ == NULL) stats_info_ = new ::Frpg2PlayerData::StatsInfo;
  // @@protoc_insertion_point(field_mutable:Frpg2PlayerData.UpdateAllDelta.stats_info)
  return stats_info_;
}
inline ::Frpg2PlayerData::StatsInfo* UpdateAllDelta::release_stats_info() {
  clear_has_stats_info();
  ::Frpg2PlayerData::StatsInfo* temp = stats_info_;
  stats_info_ = NULL;
  return temp;
}
inline void UpdateAllDelta::set_allocated_stats_info(::Frpg2PlayerData::StatsInfo* stats_info) {
  delete stats_info_;
  stats_info_ = stats_info;
  if (stats_info) {
    set_has_stats_info();
  } else {
    clear_has_stats_info();
  }
  // @@protoc_insertion_point(field_set_allocated:Frpg2PlayerData.UpdateAllDelta.stats_info)
}

// optional .Frpg2PlayerData.Equipment equipment = 6;
inline bool UpdateAllDelta::has_equipment() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UpdateAllDelta::set_has_equipment() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UpdateAllDelta::clear_has_equipment() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UpdateAllDelta::clear_equipment() {
  if (equipment_ != NULL) equipment_->::Frpg2PlayerData::Equipment::Clear();
  clear_has_equipment();
}
inline const ::Frpg2PlayerData::Equipment& UpdateAllDelta::equipment() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.UpdateAllDelta.equipment)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return equipment_ != NULL ? *equipment_ : *default_instance().equipment_;
#else
  return equipment_ != NULL ? *equipment_ : *default_instance_->equipment_;
#endif
}
inline ::Frpg2PlayerData::Equipment* UpdateAllDelta::mutable_equipment() {
  set_has_equipment();
  if (equipment_ == NULL) equipment_ = new ::Frpg2PlayerData::Equipment;
  // @@protoc_insertion_point(field_mutable:Frpg2PlayerData.UpdateAllDelta.equipment)
  return equipment_;
}
inline ::Frpg2PlayerData::Equipment* UpdateAllDelta::release_equipment() {
  clear_has_equipment();
  ::Frpg2PlayerData::Equipment* temp = equipment_;
  equipment_ = NULL;
  return temp;
}
inline void UpdateAllDelta::set_allocated_equipment(::Frpg2PlayerData::Equipment* equipment) {
  delete equipment_;
  equipment_ = equipment;
  if (equipment) {
    set_has_equipment();
  } else {
    clear_has_equipment();
  }
  // @@protoc_insertion_point(field_set_allocated:Frpg2PlayerData.UpdateAllDelta.equipment)
}

// optional .Frpg2PlayerData.unknown_struct_1 unknown_1 = 7;
inline bool UpdateAllDelta::has_unknown_1() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UpdateAllDelta::set_has_unknown_1() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UpdateAllDelta::clear_has_unknown_1() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UpdateAllDelta::clear_unknown_1() {
  if (unknown_1_ != NULL) unknown_1_->::Frpg2PlayerData::unknown_struct_1::Clear();
  clear_has_unknown_1();
}
inline const ::Frpg2PlayerData::unknown_struct_1& UpdateAllDelta::unknown_1() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.UpdateAllDelta.unknown_1)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return unknown_1_ != NULL ? *unknown_1_ : *default_instance().unknown_1_;
#else
  return unknown_1_ != NULL ? *unknown_1_ : *default_instance_->unknown_1_;
#endif
}
inline ::Frpg2PlayerData::unknown_struct_1* UpdateAllDelta::mutable_unknown_1() {
  set_has_unknown_1();
  if (unknown_1_ == NULL) unknown_1_ = new ::Frpg2PlayerData::unknown_struct_1;
  // @@protoc_insertion_point(field_mutable:Frpg2PlayerData.UpdateAllDelta.unknown_1)
  return unknown_1_;
}
inline ::Frpg2PlayerData::unknown_struct_1* UpdateAllDelta::release_unknown_1() {
  clear_has_unknown_1();
  ::Frpg2PlayerData::unknown_struct_1* temp = unknown_1_;
  unknown_1_ = NULL;
  return temp;
}
inline void UpdateAllDelta::set_allocated_unknown_1(::Frpg2PlayerData::unknown_struct_1* unknown_1) {
  delete unknown_1_;
  unknown_1_ = unknown_1;
  if (unknown_1) {
    set_has_unknown_1();
  } else {
    clear_has_unknown_1();
  }
  // @@protoc_insertion_point(field_set_allocated:Frpg2PlayerData.UpdateAllDelta.unknown_1)
}

// -------------------------------------------------------------------

// PlayerStatus

// optional int32 soul_level = 4;
inline bool PlayerStatus::has_soul_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerStatus::set_has_soul_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerStatus::clear_has_soul_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerStatus::clear_soul_level() {
  soul_level_ = 0;
  clear_has_soul_level();
}
inline ::google::protobuf::int32 PlayerStatus::soul_level() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.PlayerStatus.soul_level)
  return soul_level_;
}
inline void PlayerStatus::set_soul_level(::google::protobuf::int32 value) {
  set_has_soul_level();
  soul_level_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.PlayerStatus.soul_level)
}

// repeated int32 recent_online_areas = 17;
inline int PlayerStatus::recent_online_areas_size() const {
  return recent_online_areas_.size();
}
inline void PlayerStatus::clear_recent_online_areas() {
  recent_online_areas_.Clear();
}
inline ::google::protobuf::int32 PlayerStatus::recent_online_areas(int index) const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.PlayerStatus.recent_online_areas)
  return recent_online_areas_.Get(index);
}
inline void PlayerStatus::set_recent_online_areas(int index, ::google::protobuf::int32 value) {
  recent_online_areas_.Set(index, value);
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.PlayerStatus.recent_online_areas)
}
inline void PlayerStatus::add_recent_online_areas(::google::protobuf::int32 value) {
  recent_online_areas_.Add(value);
  // @@protoc_insertion_point(field_add:Frpg2PlayerData.PlayerStatus.recent_online_areas)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PlayerStatus::recent_online_areas() const {
  // @@protoc_insertion_point(field_list:Frpg2PlayerData.PlayerStatus.recent_online_areas)
  return recent_online_areas_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PlayerStatus::mutable_recent_online_areas() {
  // @@protoc_insertion_point(field_mutable_list:Frpg2PlayerData.PlayerStatus.recent_online_areas)
  return &recent_online_areas_;
}

// repeated uint32 unknown2 = 18;
inline int PlayerStatus::unknown2_size() const {
  return unknown2_.size();
}
inline void PlayerStatus::clear_unknown2() {
  unknown2_.Clear();
}
inline ::google::protobuf::uint32 PlayerStatus::unknown2(int index) const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.PlayerStatus.unknown2)
  return unknown2_.Get(index);
}
inline void PlayerStatus::set_unknown2(int index, ::google::protobuf::uint32 value) {
  unknown2_.Set(index, value);
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.PlayerStatus.unknown2)
}
inline void PlayerStatus::add_unknown2(::google::protobuf::uint32 value) {
  unknown2_.Add(value);
  // @@protoc_insertion_point(field_add:Frpg2PlayerData.PlayerStatus.unknown2)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PlayerStatus::unknown2() const {
  // @@protoc_insertion_point(field_list:Frpg2PlayerData.PlayerStatus.unknown2)
  return unknown2_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PlayerStatus::mutable_unknown2() {
  // @@protoc_insertion_point(field_mutable_list:Frpg2PlayerData.PlayerStatus.unknown2)
  return &unknown2_;
}

// optional int32 hp = 23;
inline bool PlayerStatus::has_hp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerStatus::set_has_hp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerStatus::clear_has_hp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerStatus::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 PlayerStatus::hp() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.PlayerStatus.hp)
  return hp_;
}
inline void PlayerStatus::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.PlayerStatus.hp)
}

// optional int32 max_hp = 24;
inline bool PlayerStatus::has_max_hp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerStatus::set_has_max_hp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerStatus::clear_has_max_hp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerStatus::clear_max_hp() {
  max_hp_ = 0;
  clear_has_max_hp();
}
inline ::google::protobuf::int32 PlayerStatus::max_hp() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.PlayerStatus.max_hp)
  return max_hp_;
}
inline void PlayerStatus::set_max_hp(::google::protobuf::int32 value) {
  set_has_max_hp();
  max_hp_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.PlayerStatus.max_hp)
}

// optional int32 base_max_hp = 25;
inline bool PlayerStatus::has_base_max_hp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerStatus::set_has_base_max_hp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerStatus::clear_has_base_max_hp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerStatus::clear_base_max_hp() {
  base_max_hp_ = 0;
  clear_has_base_max_hp();
}
inline ::google::protobuf::int32 PlayerStatus::base_max_hp() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.PlayerStatus.base_max_hp)
  return base_max_hp_;
}
inline void PlayerStatus::set_base_max_hp(::google::protobuf::int32 value) {
  set_has_base_max_hp();
  base_max_hp_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.PlayerStatus.base_max_hp)
}

// optional int32 fp = 26;
inline bool PlayerStatus::has_fp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlayerStatus::set_has_fp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlayerStatus::clear_has_fp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlayerStatus::clear_fp() {
  fp_ = 0;
  clear_has_fp();
}
inline ::google::protobuf::int32 PlayerStatus::fp() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.PlayerStatus.fp)
  return fp_;
}
inline void PlayerStatus::set_fp(::google::protobuf::int32 value) {
  set_has_fp();
  fp_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.PlayerStatus.fp)
}

// optional int32 max_fp = 27;
inline bool PlayerStatus::has_max_fp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlayerStatus::set_has_max_fp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlayerStatus::clear_has_max_fp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlayerStatus::clear_max_fp() {
  max_fp_ = 0;
  clear_has_max_fp();
}
inline ::google::protobuf::int32 PlayerStatus::max_fp() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.PlayerStatus.max_fp)
  return max_fp_;
}
inline void PlayerStatus::set_max_fp(::google::protobuf::int32 value) {
  set_has_max_fp();
  max_fp_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.PlayerStatus.max_fp)
}

// optional int32 base_max_fp = 28;
inline bool PlayerStatus::has_base_max_fp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlayerStatus::set_has_base_max_fp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PlayerStatus::clear_has_base_max_fp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PlayerStatus::clear_base_max_fp() {
  base_max_fp_ = 0;
  clear_has_base_max_fp();
}
inline ::google::protobuf::int32 PlayerStatus::base_max_fp() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.PlayerStatus.base_max_fp)
  return base_max_fp_;
}
inline void PlayerStatus::set_base_max_fp(::google::protobuf::int32 value) {
  set_has_base_max_fp();
  base_max_fp_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.PlayerStatus.base_max_fp)
}

// optional int32 stamina = 29;
inline bool PlayerStatus::has_stamina() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PlayerStatus::set_has_stamina() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PlayerStatus::clear_has_stamina() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PlayerStatus::clear_stamina() {
  stamina_ = 0;
  clear_has_stamina();
}
inline ::google::protobuf::int32 PlayerStatus::stamina() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.PlayerStatus.stamina)
  return stamina_;
}
inline void PlayerStatus::set_stamina(::google::protobuf::int32 value) {
  set_has_stamina();
  stamina_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.PlayerStatus.stamina)
}

// optional int32 max_stamina = 30;
inline bool PlayerStatus::has_max_stamina() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PlayerStatus::set_has_max_stamina() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PlayerStatus::clear_has_max_stamina() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PlayerStatus::clear_max_stamina() {
  max_stamina_ = 0;
  clear_has_max_stamina();
}
inline ::google::protobuf::int32 PlayerStatus::max_stamina() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.PlayerStatus.max_stamina)
  return max_stamina_;
}
inline void PlayerStatus::set_max_stamina(::google::protobuf::int32 value) {
  set_has_max_stamina();
  max_stamina_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.PlayerStatus.max_stamina)
}

// optional int32 base_max_stamina = 31;
inline bool PlayerStatus::has_base_max_stamina() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PlayerStatus::set_has_base_max_stamina() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PlayerStatus::clear_has_base_max_stamina() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PlayerStatus::clear_base_max_stamina() {
  base_max_stamina_ = 0;
  clear_has_base_max_stamina();
}
inline ::google::protobuf::int32 PlayerStatus::base_max_stamina() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.PlayerStatus.base_max_stamina)
  return base_max_stamina_;
}
inline void PlayerStatus::set_base_max_stamina(::google::protobuf::int32 value) {
  set_has_base_max_stamina();
  base_max_stamina_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.PlayerStatus.base_max_stamina)
}

// optional string name = 38;
inline bool PlayerStatus::has_name() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PlayerStatus::set_has_name() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PlayerStatus::clear_has_name() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PlayerStatus::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PlayerStatus::name() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.PlayerStatus.name)
  return *name_;
}
inline void PlayerStatus::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.PlayerStatus.name)
}
inline void PlayerStatus::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Frpg2PlayerData.PlayerStatus.name)
}
inline void PlayerStatus::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Frpg2PlayerData.PlayerStatus.name)
}
inline ::std::string* PlayerStatus::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Frpg2PlayerData.PlayerStatus.name)
  return name_;
}
inline ::std::string* PlayerStatus::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PlayerStatus::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Frpg2PlayerData.PlayerStatus.name)
}

// optional int32 vigor = 40;
inline bool PlayerStatus::has_vigor() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PlayerStatus::set_has_vigor() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PlayerStatus::clear_has_vigor() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PlayerStatus::clear_vigor() {
  vigor_ = 0;
  clear_has_vigor();
}
inline ::google::protobuf::int32 PlayerStatus::vigor() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.PlayerStatus.vigor)
  return vigor_;
}
inline void PlayerStatus::set_vigor(::google::protobuf::int32 value) {
  set_has_vigor();
  vigor_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.PlayerStatus.vigor)
}

// optional int32 attunement = 41;
inline bool PlayerStatus::has_attunement() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PlayerStatus::set_has_attunement() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PlayerStatus::clear_has_attunement() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PlayerStatus::clear_attunement() {
  attunement_ = 0;
  clear_has_attunement();
}
inline ::google::protobuf::int32 PlayerStatus::attunement() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.PlayerStatus.attunement)
  return attunement_;
}
inline void PlayerStatus::set_attunement(::google::protobuf::int32 value) {
  set_has_attunement();
  attunement_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.PlayerStatus.attunement)
}

// optional int32 endurance = 42;
inline bool PlayerStatus::has_endurance() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PlayerStatus::set_has_endurance() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PlayerStatus::clear_has_endurance() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PlayerStatus::clear_endurance() {
  endurance_ = 0;
  clear_has_endurance();
}
inline ::google::protobuf::int32 PlayerStatus::endurance() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.PlayerStatus.endurance)
  return endurance_;
}
inline void PlayerStatus::set_endurance(::google::protobuf::int32 value) {
  set_has_endurance();
  endurance_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.PlayerStatus.endurance)
}

// optional int32 vitality = 43;
inline bool PlayerStatus::has_vitality() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PlayerStatus::set_has_vitality() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PlayerStatus::clear_has_vitality() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PlayerStatus::clear_vitality() {
  vitality_ = 0;
  clear_has_vitality();
}
inline ::google::protobuf::int32 PlayerStatus::vitality() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.PlayerStatus.vitality)
  return vitality_;
}
inline void PlayerStatus::set_vitality(::google::protobuf::int32 value) {
  set_has_vitality();
  vitality_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.PlayerStatus.vitality)
}

// optional int32 strength = 44;
inline bool PlayerStatus::has_strength() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PlayerStatus::set_has_strength() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PlayerStatus::clear_has_strength() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PlayerStatus::clear_strength() {
  strength_ = 0;
  clear_has_strength();
}
inline ::google::protobuf::int32 PlayerStatus::strength() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.PlayerStatus.strength)
  return strength_;
}
inline void PlayerStatus::set_strength(::google::protobuf::int32 value) {
  set_has_strength();
  strength_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.PlayerStatus.strength)
}

// optional int32 dexterity = 45;
inline bool PlayerStatus::has_dexterity() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PlayerStatus::set_has_dexterity() {
  _has_bits_[0] |= 0x00040000u;
}
inline void PlayerStatus::clear_has_dexterity() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void PlayerStatus::clear_dexterity() {
  dexterity_ = 0;
  clear_has_dexterity();
}
inline ::google::protobuf::int32 PlayerStatus::dexterity() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.PlayerStatus.dexterity)
  return dexterity_;
}
inline void PlayerStatus::set_dexterity(::google::protobuf::int32 value) {
  set_has_dexterity();
  dexterity_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.PlayerStatus.dexterity)
}

// optional int32 intelligence = 46;
inline bool PlayerStatus::has_intelligence() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void PlayerStatus::set_has_intelligence() {
  _has_bits_[0] |= 0x00080000u;
}
inline void PlayerStatus::clear_has_intelligence() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void PlayerStatus::clear_intelligence() {
  intelligence_ = 0;
  clear_has_intelligence();
}
inline ::google::protobuf::int32 PlayerStatus::intelligence() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.PlayerStatus.intelligence)
  return intelligence_;
}
inline void PlayerStatus::set_intelligence(::google::protobuf::int32 value) {
  set_has_intelligence();
  intelligence_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.PlayerStatus.intelligence)
}

// optional int32 faith = 47;
inline bool PlayerStatus::has_faith() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void PlayerStatus::set_has_faith() {
  _has_bits_[0] |= 0x00100000u;
}
inline void PlayerStatus::clear_has_faith() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void PlayerStatus::clear_faith() {
  faith_ = 0;
  clear_has_faith();
}
inline ::google::protobuf::int32 PlayerStatus::faith() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.PlayerStatus.faith)
  return faith_;
}
inline void PlayerStatus::set_faith(::google::protobuf::int32 value) {
  set_has_faith();
  faith_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.PlayerStatus.faith)
}

// optional int32 luck = 48;
inline bool PlayerStatus::has_luck() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void PlayerStatus::set_has_luck() {
  _has_bits_[0] |= 0x00200000u;
}
inline void PlayerStatus::clear_has_luck() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void PlayerStatus::clear_luck() {
  luck_ = 0;
  clear_has_luck();
}
inline ::google::protobuf::int32 PlayerStatus::luck() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.PlayerStatus.luck)
  return luck_;
}
inline void PlayerStatus::set_luck(::google::protobuf::int32 value) {
  set_has_luck();
  luck_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.PlayerStatus.luck)
}

// optional .Frpg2PlayerData.DefenseInfo defense_info = 58;
inline bool PlayerStatus::has_defense_info() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void PlayerStatus::set_has_defense_info() {
  _has_bits_[0] |= 0x00400000u;
}
inline void PlayerStatus::clear_has_defense_info() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void PlayerStatus::clear_defense_info() {
  if (defense_info_ != NULL) defense_info_->::Frpg2PlayerData::DefenseInfo::Clear();
  clear_has_defense_info();
}
inline const ::Frpg2PlayerData::DefenseInfo& PlayerStatus::defense_info() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.PlayerStatus.defense_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return defense_info_ != NULL ? *defense_info_ : *default_instance().defense_info_;
#else
  return defense_info_ != NULL ? *defense_info_ : *default_instance_->defense_info_;
#endif
}
inline ::Frpg2PlayerData::DefenseInfo* PlayerStatus::mutable_defense_info() {
  set_has_defense_info();
  if (defense_info_ == NULL) defense_info_ = new ::Frpg2PlayerData::DefenseInfo;
  // @@protoc_insertion_point(field_mutable:Frpg2PlayerData.PlayerStatus.defense_info)
  return defense_info_;
}
inline ::Frpg2PlayerData::DefenseInfo* PlayerStatus::release_defense_info() {
  clear_has_defense_info();
  ::Frpg2PlayerData::DefenseInfo* temp = defense_info_;
  defense_info_ = NULL;
  return temp;
}
inline void PlayerStatus::set_allocated_defense_info(::Frpg2PlayerData::DefenseInfo* defense_info) {
  delete defense_info_;
  defense_info_ = defense_info;
  if (defense_info) {
    set_has_defense_info();
  } else {
    clear_has_defense_info();
  }
  // @@protoc_insertion_point(field_set_allocated:Frpg2PlayerData.PlayerStatus.defense_info)
}

// optional .Frpg2PlayerData.CutRateInfo cutrate_info = 59;
inline bool PlayerStatus::has_cutrate_info() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void PlayerStatus::set_has_cutrate_info() {
  _has_bits_[0] |= 0x00800000u;
}
inline void PlayerStatus::clear_has_cutrate_info() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void PlayerStatus::clear_cutrate_info() {
  if (cutrate_info_ != NULL) cutrate_info_->::Frpg2PlayerData::CutRateInfo::Clear();
  clear_has_cutrate_info();
}
inline const ::Frpg2PlayerData::CutRateInfo& PlayerStatus::cutrate_info() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.PlayerStatus.cutrate_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return cutrate_info_ != NULL ? *cutrate_info_ : *default_instance().cutrate_info_;
#else
  return cutrate_info_ != NULL ? *cutrate_info_ : *default_instance_->cutrate_info_;
#endif
}
inline ::Frpg2PlayerData::CutRateInfo* PlayerStatus::mutable_cutrate_info() {
  set_has_cutrate_info();
  if (cutrate_info_ == NULL) cutrate_info_ = new ::Frpg2PlayerData::CutRateInfo;
  // @@protoc_insertion_point(field_mutable:Frpg2PlayerData.PlayerStatus.cutrate_info)
  return cutrate_info_;
}
inline ::Frpg2PlayerData::CutRateInfo* PlayerStatus::release_cutrate_info() {
  clear_has_cutrate_info();
  ::Frpg2PlayerData::CutRateInfo* temp = cutrate_info_;
  cutrate_info_ = NULL;
  return temp;
}
inline void PlayerStatus::set_allocated_cutrate_info(::Frpg2PlayerData::CutRateInfo* cutrate_info) {
  delete cutrate_info_;
  cutrate_info_ = cutrate_info;
  if (cutrate_info) {
    set_has_cutrate_info();
  } else {
    clear_has_cutrate_info();
  }
  // @@protoc_insertion_point(field_set_allocated:Frpg2PlayerData.PlayerStatus.cutrate_info)
}

// optional .Frpg2PlayerData.ResistanceInfo armor_resistance_info = 60;
inline bool PlayerStatus::has_armor_resistance_info() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void PlayerStatus::set_has_armor_resistance_info() {
  _has_bits_[0] |= 0x01000000u;
}
inline void PlayerStatus::clear_has_armor_resistance_info() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void PlayerStatus::clear_armor_resistance_info() {
  if (armor_resistance_info_ != NULL) armor_resistance_info_->::Frpg2PlayerData::ResistanceInfo::Clear();
  clear_has_armor_resistance_info();
}
inline const ::Frpg2PlayerData::ResistanceInfo& PlayerStatus::armor_resistance_info() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.PlayerStatus.armor_resistance_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return armor_resistance_info_ != NULL ? *armor_resistance_info_ : *default_instance().armor_resistance_info_;
#else
  return armor_resistance_info_ != NULL ? *armor_resistance_info_ : *default_instance_->armor_resistance_info_;
#endif
}
inline ::Frpg2PlayerData::ResistanceInfo* PlayerStatus::mutable_armor_resistance_info() {
  set_has_armor_resistance_info();
  if (armor_resistance_info_ == NULL) armor_resistance_info_ = new ::Frpg2PlayerData::ResistanceInfo;
  // @@protoc_insertion_point(field_mutable:Frpg2PlayerData.PlayerStatus.armor_resistance_info)
  return armor_resistance_info_;
}
inline ::Frpg2PlayerData::ResistanceInfo* PlayerStatus::release_armor_resistance_info() {
  clear_has_armor_resistance_info();
  ::Frpg2PlayerData::ResistanceInfo* temp = armor_resistance_info_;
  armor_resistance_info_ = NULL;
  return temp;
}
inline void PlayerStatus::set_allocated_armor_resistance_info(::Frpg2PlayerData::ResistanceInfo* armor_resistance_info) {
  delete armor_resistance_info_;
  armor_resistance_info_ = armor_resistance_info;
  if (armor_resistance_info) {
    set_has_armor_resistance_info();
  } else {
    clear_has_armor_resistance_info();
  }
  // @@protoc_insertion_point(field_set_allocated:Frpg2PlayerData.PlayerStatus.armor_resistance_info)
}

// optional .Frpg2PlayerData.ResistanceInfo base_resistance_info = 61;
inline bool PlayerStatus::has_base_resistance_info() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void PlayerStatus::set_has_base_resistance_info() {
  _has_bits_[0] |= 0x02000000u;
}
inline void PlayerStatus::clear_has_base_resistance_info() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void PlayerStatus::clear_base_resistance_info() {
  if (base_resistance_info_ != NULL) base_resistance_info_->::Frpg2PlayerData::ResistanceInfo::Clear();
  clear_has_base_resistance_info();
}
inline const ::Frpg2PlayerData::ResistanceInfo& PlayerStatus::base_resistance_info() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.PlayerStatus.base_resistance_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return base_resistance_info_ != NULL ? *base_resistance_info_ : *default_instance().base_resistance_info_;
#else
  return base_resistance_info_ != NULL ? *base_resistance_info_ : *default_instance_->base_resistance_info_;
#endif
}
inline ::Frpg2PlayerData::ResistanceInfo* PlayerStatus::mutable_base_resistance_info() {
  set_has_base_resistance_info();
  if (base_resistance_info_ == NULL) base_resistance_info_ = new ::Frpg2PlayerData::ResistanceInfo;
  // @@protoc_insertion_point(field_mutable:Frpg2PlayerData.PlayerStatus.base_resistance_info)
  return base_resistance_info_;
}
inline ::Frpg2PlayerData::ResistanceInfo* PlayerStatus::release_base_resistance_info() {
  clear_has_base_resistance_info();
  ::Frpg2PlayerData::ResistanceInfo* temp = base_resistance_info_;
  base_resistance_info_ = NULL;
  return temp;
}
inline void PlayerStatus::set_allocated_base_resistance_info(::Frpg2PlayerData::ResistanceInfo* base_resistance_info) {
  delete base_resistance_info_;
  base_resistance_info_ = base_resistance_info;
  if (base_resistance_info) {
    set_has_base_resistance_info();
  } else {
    clear_has_base_resistance_info();
  }
  // @@protoc_insertion_point(field_set_allocated:Frpg2PlayerData.PlayerStatus.base_resistance_info)
}

// -------------------------------------------------------------------

// PlayData

// optional uint32 unknown_1 = 1;
inline bool PlayData::has_unknown_1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayData::set_has_unknown_1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayData::clear_has_unknown_1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayData::clear_unknown_1() {
  unknown_1_ = 0u;
  clear_has_unknown_1();
}
inline ::google::protobuf::uint32 PlayData::unknown_1() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.PlayData.unknown_1)
  return unknown_1_;
}
inline void PlayData::set_unknown_1(::google::protobuf::uint32 value) {
  set_has_unknown_1();
  unknown_1_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.PlayData.unknown_1)
}

// optional uint32 unknown_2 = 4;
inline bool PlayData::has_unknown_2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayData::set_has_unknown_2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayData::clear_has_unknown_2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayData::clear_unknown_2() {
  unknown_2_ = 0u;
  clear_has_unknown_2();
}
inline ::google::protobuf::uint32 PlayData::unknown_2() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.PlayData.unknown_2)
  return unknown_2_;
}
inline void PlayData::set_unknown_2(::google::protobuf::uint32 value) {
  set_has_unknown_2();
  unknown_2_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.PlayData.unknown_2)
}

// optional uint32 unknown_3 = 5;
inline bool PlayData::has_unknown_3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayData::set_has_unknown_3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayData::clear_has_unknown_3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayData::clear_unknown_3() {
  unknown_3_ = 0u;
  clear_has_unknown_3();
}
inline ::google::protobuf::uint32 PlayData::unknown_3() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.PlayData.unknown_3)
  return unknown_3_;
}
inline void PlayData::set_unknown_3(::google::protobuf::uint32 value) {
  set_has_unknown_3();
  unknown_3_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.PlayData.unknown_3)
}

// optional uint32 unknown_4 = 6;
inline bool PlayData::has_unknown_4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayData::set_has_unknown_4() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayData::clear_has_unknown_4() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayData::clear_unknown_4() {
  unknown_4_ = 0u;
  clear_has_unknown_4();
}
inline ::google::protobuf::uint32 PlayData::unknown_4() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.PlayData.unknown_4)
  return unknown_4_;
}
inline void PlayData::set_unknown_4(::google::protobuf::uint32 value) {
  set_has_unknown_4();
  unknown_4_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.PlayData.unknown_4)
}

// optional uint32 unknown_5 = 7;
inline bool PlayData::has_unknown_5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayData::set_has_unknown_5() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayData::clear_has_unknown_5() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayData::clear_unknown_5() {
  unknown_5_ = 0u;
  clear_has_unknown_5();
}
inline ::google::protobuf::uint32 PlayData::unknown_5() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.PlayData.unknown_5)
  return unknown_5_;
}
inline void PlayData::set_unknown_5(::google::protobuf::uint32 value) {
  set_has_unknown_5();
  unknown_5_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.PlayData.unknown_5)
}

// optional .Frpg2PlayerData.BonfireInfo bonfire_info = 8;
inline bool PlayData::has_bonfire_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayData::set_has_bonfire_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayData::clear_has_bonfire_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayData::clear_bonfire_info() {
  if (bonfire_info_ != NULL) bonfire_info_->::Frpg2PlayerData::BonfireInfo::Clear();
  clear_has_bonfire_info();
}
inline const ::Frpg2PlayerData::BonfireInfo& PlayData::bonfire_info() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.PlayData.bonfire_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return bonfire_info_ != NULL ? *bonfire_info_ : *default_instance().bonfire_info_;
#else
  return bonfire_info_ != NULL ? *bonfire_info_ : *default_instance_->bonfire_info_;
#endif
}
inline ::Frpg2PlayerData::BonfireInfo* PlayData::mutable_bonfire_info() {
  set_has_bonfire_info();
  if (bonfire_info_ == NULL) bonfire_info_ = new ::Frpg2PlayerData::BonfireInfo;
  // @@protoc_insertion_point(field_mutable:Frpg2PlayerData.PlayData.bonfire_info)
  return bonfire_info_;
}
inline ::Frpg2PlayerData::BonfireInfo* PlayData::release_bonfire_info() {
  clear_has_bonfire_info();
  ::Frpg2PlayerData::BonfireInfo* temp = bonfire_info_;
  bonfire_info_ = NULL;
  return temp;
}
inline void PlayData::set_allocated_bonfire_info(::Frpg2PlayerData::BonfireInfo* bonfire_info) {
  delete bonfire_info_;
  bonfire_info_ = bonfire_info;
  if (bonfire_info) {
    set_has_bonfire_info();
  } else {
    clear_has_bonfire_info();
  }
  // @@protoc_insertion_point(field_set_allocated:Frpg2PlayerData.PlayData.bonfire_info)
}

// -------------------------------------------------------------------

// LogInfo

// optional uint32 unknown_1 = 1;
inline bool LogInfo::has_unknown_1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogInfo::set_has_unknown_1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogInfo::clear_has_unknown_1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogInfo::clear_unknown_1() {
  unknown_1_ = 0u;
  clear_has_unknown_1();
}
inline ::google::protobuf::uint32 LogInfo::unknown_1() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.LogInfo.unknown_1)
  return unknown_1_;
}
inline void LogInfo::set_unknown_1(::google::protobuf::uint32 value) {
  set_has_unknown_1();
  unknown_1_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.LogInfo.unknown_1)
}

// optional uint32 unknown_2 = 6;
inline bool LogInfo::has_unknown_2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogInfo::set_has_unknown_2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogInfo::clear_has_unknown_2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogInfo::clear_unknown_2() {
  unknown_2_ = 0u;
  clear_has_unknown_2();
}
inline ::google::protobuf::uint32 LogInfo::unknown_2() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.LogInfo.unknown_2)
  return unknown_2_;
}
inline void LogInfo::set_unknown_2(::google::protobuf::uint32 value) {
  set_has_unknown_2();
  unknown_2_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.LogInfo.unknown_2)
}

// optional uint32 unknown_3 = 7;
inline bool LogInfo::has_unknown_3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogInfo::set_has_unknown_3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogInfo::clear_has_unknown_3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogInfo::clear_unknown_3() {
  unknown_3_ = 0u;
  clear_has_unknown_3();
}
inline ::google::protobuf::uint32 LogInfo::unknown_3() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.LogInfo.unknown_3)
  return unknown_3_;
}
inline void LogInfo::set_unknown_3(::google::protobuf::uint32 value) {
  set_has_unknown_3();
  unknown_3_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.LogInfo.unknown_3)
}

// optional uint32 unknown_4 = 8;
inline bool LogInfo::has_unknown_4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogInfo::set_has_unknown_4() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogInfo::clear_has_unknown_4() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogInfo::clear_unknown_4() {
  unknown_4_ = 0u;
  clear_has_unknown_4();
}
inline ::google::protobuf::uint32 LogInfo::unknown_4() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.LogInfo.unknown_4)
  return unknown_4_;
}
inline void LogInfo::set_unknown_4(::google::protobuf::uint32 value) {
  set_has_unknown_4();
  unknown_4_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.LogInfo.unknown_4)
}

// optional uint32 unknown_5 = 9;
inline bool LogInfo::has_unknown_5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogInfo::set_has_unknown_5() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogInfo::clear_has_unknown_5() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogInfo::clear_unknown_5() {
  unknown_5_ = 0u;
  clear_has_unknown_5();
}
inline ::google::protobuf::uint32 LogInfo::unknown_5() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.LogInfo.unknown_5)
  return unknown_5_;
}
inline void LogInfo::set_unknown_5(::google::protobuf::uint32 value) {
  set_has_unknown_5();
  unknown_5_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.LogInfo.unknown_5)
}

// optional uint32 unknown_6 = 10;
inline bool LogInfo::has_unknown_6() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogInfo::set_has_unknown_6() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogInfo::clear_has_unknown_6() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogInfo::clear_unknown_6() {
  unknown_6_ = 0u;
  clear_has_unknown_6();
}
inline ::google::protobuf::uint32 LogInfo::unknown_6() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.LogInfo.unknown_6)
  return unknown_6_;
}
inline void LogInfo::set_unknown_6(::google::protobuf::uint32 value) {
  set_has_unknown_6();
  unknown_6_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.LogInfo.unknown_6)
}

// -------------------------------------------------------------------

// StatsInfo

// optional uint32 unknown_1 = 1;
inline bool StatsInfo::has_unknown_1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StatsInfo::set_has_unknown_1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StatsInfo::clear_has_unknown_1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StatsInfo::clear_unknown_1() {
  unknown_1_ = 0u;
  clear_has_unknown_1();
}
inline ::google::protobuf::uint32 StatsInfo::unknown_1() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.StatsInfo.unknown_1)
  return unknown_1_;
}
inline void StatsInfo::set_unknown_1(::google::protobuf::uint32 value) {
  set_has_unknown_1();
  unknown_1_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.StatsInfo.unknown_1)
}

// optional uint32 unknown_2 = 2;
inline bool StatsInfo::has_unknown_2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StatsInfo::set_has_unknown_2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StatsInfo::clear_has_unknown_2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StatsInfo::clear_unknown_2() {
  unknown_2_ = 0u;
  clear_has_unknown_2();
}
inline ::google::protobuf::uint32 StatsInfo::unknown_2() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.StatsInfo.unknown_2)
  return unknown_2_;
}
inline void StatsInfo::set_unknown_2(::google::protobuf::uint32 value) {
  set_has_unknown_2();
  unknown_2_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.StatsInfo.unknown_2)
}

// optional uint32 unknown_3 = 3;
inline bool StatsInfo::has_unknown_3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StatsInfo::set_has_unknown_3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StatsInfo::clear_has_unknown_3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StatsInfo::clear_unknown_3() {
  unknown_3_ = 0u;
  clear_has_unknown_3();
}
inline ::google::protobuf::uint32 StatsInfo::unknown_3() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.StatsInfo.unknown_3)
  return unknown_3_;
}
inline void StatsInfo::set_unknown_3(::google::protobuf::uint32 value) {
  set_has_unknown_3();
  unknown_3_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.StatsInfo.unknown_3)
}

// optional uint32 unknown_4 = 4;
inline bool StatsInfo::has_unknown_4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StatsInfo::set_has_unknown_4() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StatsInfo::clear_has_unknown_4() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StatsInfo::clear_unknown_4() {
  unknown_4_ = 0u;
  clear_has_unknown_4();
}
inline ::google::protobuf::uint32 StatsInfo::unknown_4() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.StatsInfo.unknown_4)
  return unknown_4_;
}
inline void StatsInfo::set_unknown_4(::google::protobuf::uint32 value) {
  set_has_unknown_4();
  unknown_4_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.StatsInfo.unknown_4)
}

// optional uint32 unknown_5 = 5;
inline bool StatsInfo::has_unknown_5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StatsInfo::set_has_unknown_5() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StatsInfo::clear_has_unknown_5() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StatsInfo::clear_unknown_5() {
  unknown_5_ = 0u;
  clear_has_unknown_5();
}
inline ::google::protobuf::uint32 StatsInfo::unknown_5() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.StatsInfo.unknown_5)
  return unknown_5_;
}
inline void StatsInfo::set_unknown_5(::google::protobuf::uint32 value) {
  set_has_unknown_5();
  unknown_5_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.StatsInfo.unknown_5)
}

// optional uint32 unknown6 = 6;
inline bool StatsInfo::has_unknown6() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StatsInfo::set_has_unknown6() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StatsInfo::clear_has_unknown6() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StatsInfo::clear_unknown6() {
  unknown6_ = 0u;
  clear_has_unknown6();
}
inline ::google::protobuf::uint32 StatsInfo::unknown6() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.StatsInfo.unknown6)
  return unknown6_;
}
inline void StatsInfo::set_unknown6(::google::protobuf::uint32 value) {
  set_has_unknown6();
  unknown6_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.StatsInfo.unknown6)
}

// optional .Frpg2PlayerData.DateTime date_time_1 = 7;
inline bool StatsInfo::has_date_time_1() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StatsInfo::set_has_date_time_1() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StatsInfo::clear_has_date_time_1() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StatsInfo::clear_date_time_1() {
  if (date_time_1_ != NULL) date_time_1_->::Frpg2PlayerData::DateTime::Clear();
  clear_has_date_time_1();
}
inline const ::Frpg2PlayerData::DateTime& StatsInfo::date_time_1() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.StatsInfo.date_time_1)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return date_time_1_ != NULL ? *date_time_1_ : *default_instance().date_time_1_;
#else
  return date_time_1_ != NULL ? *date_time_1_ : *default_instance_->date_time_1_;
#endif
}
inline ::Frpg2PlayerData::DateTime* StatsInfo::mutable_date_time_1() {
  set_has_date_time_1();
  if (date_time_1_ == NULL) date_time_1_ = new ::Frpg2PlayerData::DateTime;
  // @@protoc_insertion_point(field_mutable:Frpg2PlayerData.StatsInfo.date_time_1)
  return date_time_1_;
}
inline ::Frpg2PlayerData::DateTime* StatsInfo::release_date_time_1() {
  clear_has_date_time_1();
  ::Frpg2PlayerData::DateTime* temp = date_time_1_;
  date_time_1_ = NULL;
  return temp;
}
inline void StatsInfo::set_allocated_date_time_1(::Frpg2PlayerData::DateTime* date_time_1) {
  delete date_time_1_;
  date_time_1_ = date_time_1;
  if (date_time_1) {
    set_has_date_time_1();
  } else {
    clear_has_date_time_1();
  }
  // @@protoc_insertion_point(field_set_allocated:Frpg2PlayerData.StatsInfo.date_time_1)
}

// optional .Frpg2PlayerData.DateTime date_time_2 = 8;
inline bool StatsInfo::has_date_time_2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void StatsInfo::set_has_date_time_2() {
  _has_bits_[0] |= 0x00000080u;
}
inline void StatsInfo::clear_has_date_time_2() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void StatsInfo::clear_date_time_2() {
  if (date_time_2_ != NULL) date_time_2_->::Frpg2PlayerData::DateTime::Clear();
  clear_has_date_time_2();
}
inline const ::Frpg2PlayerData::DateTime& StatsInfo::date_time_2() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.StatsInfo.date_time_2)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return date_time_2_ != NULL ? *date_time_2_ : *default_instance().date_time_2_;
#else
  return date_time_2_ != NULL ? *date_time_2_ : *default_instance_->date_time_2_;
#endif
}
inline ::Frpg2PlayerData::DateTime* StatsInfo::mutable_date_time_2() {
  set_has_date_time_2();
  if (date_time_2_ == NULL) date_time_2_ = new ::Frpg2PlayerData::DateTime;
  // @@protoc_insertion_point(field_mutable:Frpg2PlayerData.StatsInfo.date_time_2)
  return date_time_2_;
}
inline ::Frpg2PlayerData::DateTime* StatsInfo::release_date_time_2() {
  clear_has_date_time_2();
  ::Frpg2PlayerData::DateTime* temp = date_time_2_;
  date_time_2_ = NULL;
  return temp;
}
inline void StatsInfo::set_allocated_date_time_2(::Frpg2PlayerData::DateTime* date_time_2) {
  delete date_time_2_;
  date_time_2_ = date_time_2;
  if (date_time_2) {
    set_has_date_time_2();
  } else {
    clear_has_date_time_2();
  }
  // @@protoc_insertion_point(field_set_allocated:Frpg2PlayerData.StatsInfo.date_time_2)
}

// -------------------------------------------------------------------

// Equipment

// optional int32 left_weapon_1 = 1;
inline bool Equipment::has_left_weapon_1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Equipment::set_has_left_weapon_1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Equipment::clear_has_left_weapon_1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Equipment::clear_left_weapon_1() {
  left_weapon_1_ = 0;
  clear_has_left_weapon_1();
}
inline ::google::protobuf::int32 Equipment::left_weapon_1() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.left_weapon_1)
  return left_weapon_1_;
}
inline void Equipment::set_left_weapon_1(::google::protobuf::int32 value) {
  set_has_left_weapon_1();
  left_weapon_1_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.left_weapon_1)
}

// optional int32 left_weapon_2 = 2;
inline bool Equipment::has_left_weapon_2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Equipment::set_has_left_weapon_2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Equipment::clear_has_left_weapon_2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Equipment::clear_left_weapon_2() {
  left_weapon_2_ = 0;
  clear_has_left_weapon_2();
}
inline ::google::protobuf::int32 Equipment::left_weapon_2() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.left_weapon_2)
  return left_weapon_2_;
}
inline void Equipment::set_left_weapon_2(::google::protobuf::int32 value) {
  set_has_left_weapon_2();
  left_weapon_2_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.left_weapon_2)
}

// optional int32 left_weapon_3 = 3;
inline bool Equipment::has_left_weapon_3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Equipment::set_has_left_weapon_3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Equipment::clear_has_left_weapon_3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Equipment::clear_left_weapon_3() {
  left_weapon_3_ = 0;
  clear_has_left_weapon_3();
}
inline ::google::protobuf::int32 Equipment::left_weapon_3() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.left_weapon_3)
  return left_weapon_3_;
}
inline void Equipment::set_left_weapon_3(::google::protobuf::int32 value) {
  set_has_left_weapon_3();
  left_weapon_3_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.left_weapon_3)
}

// optional int32 right_weapon_1 = 4;
inline bool Equipment::has_right_weapon_1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Equipment::set_has_right_weapon_1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Equipment::clear_has_right_weapon_1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Equipment::clear_right_weapon_1() {
  right_weapon_1_ = 0;
  clear_has_right_weapon_1();
}
inline ::google::protobuf::int32 Equipment::right_weapon_1() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.right_weapon_1)
  return right_weapon_1_;
}
inline void Equipment::set_right_weapon_1(::google::protobuf::int32 value) {
  set_has_right_weapon_1();
  right_weapon_1_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.right_weapon_1)
}

// optional int32 right_weapon_2 = 5;
inline bool Equipment::has_right_weapon_2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Equipment::set_has_right_weapon_2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Equipment::clear_has_right_weapon_2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Equipment::clear_right_weapon_2() {
  right_weapon_2_ = 0;
  clear_has_right_weapon_2();
}
inline ::google::protobuf::int32 Equipment::right_weapon_2() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.right_weapon_2)
  return right_weapon_2_;
}
inline void Equipment::set_right_weapon_2(::google::protobuf::int32 value) {
  set_has_right_weapon_2();
  right_weapon_2_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.right_weapon_2)
}

// optional int32 right_weapon_3 = 6;
inline bool Equipment::has_right_weapon_3() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Equipment::set_has_right_weapon_3() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Equipment::clear_has_right_weapon_3() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Equipment::clear_right_weapon_3() {
  right_weapon_3_ = 0;
  clear_has_right_weapon_3();
}
inline ::google::protobuf::int32 Equipment::right_weapon_3() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.right_weapon_3)
  return right_weapon_3_;
}
inline void Equipment::set_right_weapon_3(::google::protobuf::int32 value) {
  set_has_right_weapon_3();
  right_weapon_3_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.right_weapon_3)
}

// optional int32 head = 7;
inline bool Equipment::has_head() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Equipment::set_has_head() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Equipment::clear_has_head() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Equipment::clear_head() {
  head_ = 0;
  clear_has_head();
}
inline ::google::protobuf::int32 Equipment::head() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.head)
  return head_;
}
inline void Equipment::set_head(::google::protobuf::int32 value) {
  set_has_head();
  head_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.head)
}

// optional int32 chest = 8;
inline bool Equipment::has_chest() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Equipment::set_has_chest() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Equipment::clear_has_chest() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Equipment::clear_chest() {
  chest_ = 0;
  clear_has_chest();
}
inline ::google::protobuf::int32 Equipment::chest() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.chest)
  return chest_;
}
inline void Equipment::set_chest(::google::protobuf::int32 value) {
  set_has_chest();
  chest_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.chest)
}

// optional int32 hands = 9;
inline bool Equipment::has_hands() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Equipment::set_has_hands() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Equipment::clear_has_hands() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Equipment::clear_hands() {
  hands_ = 0;
  clear_has_hands();
}
inline ::google::protobuf::int32 Equipment::hands() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.hands)
  return hands_;
}
inline void Equipment::set_hands(::google::protobuf::int32 value) {
  set_has_hands();
  hands_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.hands)
}

// optional int32 legs = 10;
inline bool Equipment::has_legs() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Equipment::set_has_legs() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Equipment::clear_has_legs() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Equipment::clear_legs() {
  legs_ = 0;
  clear_has_legs();
}
inline ::google::protobuf::int32 Equipment::legs() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.legs)
  return legs_;
}
inline void Equipment::set_legs(::google::protobuf::int32 value) {
  set_has_legs();
  legs_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.legs)
}

// optional int32 ring_1 = 11;
inline bool Equipment::has_ring_1() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Equipment::set_has_ring_1() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Equipment::clear_has_ring_1() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Equipment::clear_ring_1() {
  ring_1_ = 0;
  clear_has_ring_1();
}
inline ::google::protobuf::int32 Equipment::ring_1() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.ring_1)
  return ring_1_;
}
inline void Equipment::set_ring_1(::google::protobuf::int32 value) {
  set_has_ring_1();
  ring_1_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.ring_1)
}

// optional int32 ring_2 = 12;
inline bool Equipment::has_ring_2() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Equipment::set_has_ring_2() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Equipment::clear_has_ring_2() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Equipment::clear_ring_2() {
  ring_2_ = 0;
  clear_has_ring_2();
}
inline ::google::protobuf::int32 Equipment::ring_2() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.ring_2)
  return ring_2_;
}
inline void Equipment::set_ring_2(::google::protobuf::int32 value) {
  set_has_ring_2();
  ring_2_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.ring_2)
}

// optional int32 ring_3 = 13;
inline bool Equipment::has_ring_3() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Equipment::set_has_ring_3() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Equipment::clear_has_ring_3() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Equipment::clear_ring_3() {
  ring_3_ = 0;
  clear_has_ring_3();
}
inline ::google::protobuf::int32 Equipment::ring_3() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.ring_3)
  return ring_3_;
}
inline void Equipment::set_ring_3(::google::protobuf::int32 value) {
  set_has_ring_3();
  ring_3_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.ring_3)
}

// optional int32 ring_4 = 14;
inline bool Equipment::has_ring_4() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Equipment::set_has_ring_4() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Equipment::clear_has_ring_4() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Equipment::clear_ring_4() {
  ring_4_ = 0;
  clear_has_ring_4();
}
inline ::google::protobuf::int32 Equipment::ring_4() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.ring_4)
  return ring_4_;
}
inline void Equipment::set_ring_4(::google::protobuf::int32 value) {
  set_has_ring_4();
  ring_4_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.ring_4)
}

// optional int32 quick_item_1 = 15;
inline bool Equipment::has_quick_item_1() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Equipment::set_has_quick_item_1() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Equipment::clear_has_quick_item_1() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Equipment::clear_quick_item_1() {
  quick_item_1_ = 0;
  clear_has_quick_item_1();
}
inline ::google::protobuf::int32 Equipment::quick_item_1() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.quick_item_1)
  return quick_item_1_;
}
inline void Equipment::set_quick_item_1(::google::protobuf::int32 value) {
  set_has_quick_item_1();
  quick_item_1_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.quick_item_1)
}

// optional int32 quick_item_2 = 16;
inline bool Equipment::has_quick_item_2() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Equipment::set_has_quick_item_2() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Equipment::clear_has_quick_item_2() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Equipment::clear_quick_item_2() {
  quick_item_2_ = 0;
  clear_has_quick_item_2();
}
inline ::google::protobuf::int32 Equipment::quick_item_2() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.quick_item_2)
  return quick_item_2_;
}
inline void Equipment::set_quick_item_2(::google::protobuf::int32 value) {
  set_has_quick_item_2();
  quick_item_2_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.quick_item_2)
}

// optional int32 quick_item_3 = 17;
inline bool Equipment::has_quick_item_3() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Equipment::set_has_quick_item_3() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Equipment::clear_has_quick_item_3() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Equipment::clear_quick_item_3() {
  quick_item_3_ = 0;
  clear_has_quick_item_3();
}
inline ::google::protobuf::int32 Equipment::quick_item_3() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.quick_item_3)
  return quick_item_3_;
}
inline void Equipment::set_quick_item_3(::google::protobuf::int32 value) {
  set_has_quick_item_3();
  quick_item_3_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.quick_item_3)
}

// optional int32 quick_item_4 = 18;
inline bool Equipment::has_quick_item_4() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Equipment::set_has_quick_item_4() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Equipment::clear_has_quick_item_4() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Equipment::clear_quick_item_4() {
  quick_item_4_ = 0;
  clear_has_quick_item_4();
}
inline ::google::protobuf::int32 Equipment::quick_item_4() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.quick_item_4)
  return quick_item_4_;
}
inline void Equipment::set_quick_item_4(::google::protobuf::int32 value) {
  set_has_quick_item_4();
  quick_item_4_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.quick_item_4)
}

// optional int32 quick_item_5 = 19;
inline bool Equipment::has_quick_item_5() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Equipment::set_has_quick_item_5() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Equipment::clear_has_quick_item_5() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Equipment::clear_quick_item_5() {
  quick_item_5_ = 0;
  clear_has_quick_item_5();
}
inline ::google::protobuf::int32 Equipment::quick_item_5() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.quick_item_5)
  return quick_item_5_;
}
inline void Equipment::set_quick_item_5(::google::protobuf::int32 value) {
  set_has_quick_item_5();
  quick_item_5_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.quick_item_5)
}

// optional int32 quick_item_6 = 20;
inline bool Equipment::has_quick_item_6() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Equipment::set_has_quick_item_6() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Equipment::clear_has_quick_item_6() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Equipment::clear_quick_item_6() {
  quick_item_6_ = 0;
  clear_has_quick_item_6();
}
inline ::google::protobuf::int32 Equipment::quick_item_6() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.quick_item_6)
  return quick_item_6_;
}
inline void Equipment::set_quick_item_6(::google::protobuf::int32 value) {
  set_has_quick_item_6();
  quick_item_6_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.quick_item_6)
}

// optional int32 quick_item_7 = 21;
inline bool Equipment::has_quick_item_7() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Equipment::set_has_quick_item_7() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Equipment::clear_has_quick_item_7() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Equipment::clear_quick_item_7() {
  quick_item_7_ = 0;
  clear_has_quick_item_7();
}
inline ::google::protobuf::int32 Equipment::quick_item_7() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.quick_item_7)
  return quick_item_7_;
}
inline void Equipment::set_quick_item_7(::google::protobuf::int32 value) {
  set_has_quick_item_7();
  quick_item_7_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.quick_item_7)
}

// optional int32 quick_item_8 = 22;
inline bool Equipment::has_quick_item_8() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Equipment::set_has_quick_item_8() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Equipment::clear_has_quick_item_8() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Equipment::clear_quick_item_8() {
  quick_item_8_ = 0;
  clear_has_quick_item_8();
}
inline ::google::protobuf::int32 Equipment::quick_item_8() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.quick_item_8)
  return quick_item_8_;
}
inline void Equipment::set_quick_item_8(::google::protobuf::int32 value) {
  set_has_quick_item_8();
  quick_item_8_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.quick_item_8)
}

// optional int32 quick_item_9 = 23;
inline bool Equipment::has_quick_item_9() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Equipment::set_has_quick_item_9() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Equipment::clear_has_quick_item_9() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Equipment::clear_quick_item_9() {
  quick_item_9_ = 0;
  clear_has_quick_item_9();
}
inline ::google::protobuf::int32 Equipment::quick_item_9() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.quick_item_9)
  return quick_item_9_;
}
inline void Equipment::set_quick_item_9(::google::protobuf::int32 value) {
  set_has_quick_item_9();
  quick_item_9_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.quick_item_9)
}

// optional int32 quick_item_10 = 24;
inline bool Equipment::has_quick_item_10() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Equipment::set_has_quick_item_10() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Equipment::clear_has_quick_item_10() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Equipment::clear_quick_item_10() {
  quick_item_10_ = 0;
  clear_has_quick_item_10();
}
inline ::google::protobuf::int32 Equipment::quick_item_10() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.quick_item_10)
  return quick_item_10_;
}
inline void Equipment::set_quick_item_10(::google::protobuf::int32 value) {
  set_has_quick_item_10();
  quick_item_10_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.quick_item_10)
}

// optional int32 tool_belt_1 = 25;
inline bool Equipment::has_tool_belt_1() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Equipment::set_has_tool_belt_1() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Equipment::clear_has_tool_belt_1() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Equipment::clear_tool_belt_1() {
  tool_belt_1_ = 0;
  clear_has_tool_belt_1();
}
inline ::google::protobuf::int32 Equipment::tool_belt_1() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.tool_belt_1)
  return tool_belt_1_;
}
inline void Equipment::set_tool_belt_1(::google::protobuf::int32 value) {
  set_has_tool_belt_1();
  tool_belt_1_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.tool_belt_1)
}

// optional int32 tool_belt_2 = 26;
inline bool Equipment::has_tool_belt_2() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Equipment::set_has_tool_belt_2() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Equipment::clear_has_tool_belt_2() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Equipment::clear_tool_belt_2() {
  tool_belt_2_ = 0;
  clear_has_tool_belt_2();
}
inline ::google::protobuf::int32 Equipment::tool_belt_2() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.tool_belt_2)
  return tool_belt_2_;
}
inline void Equipment::set_tool_belt_2(::google::protobuf::int32 value) {
  set_has_tool_belt_2();
  tool_belt_2_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.tool_belt_2)
}

// optional int32 tool_belt_3 = 27;
inline bool Equipment::has_tool_belt_3() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Equipment::set_has_tool_belt_3() {
  _has_bits_[0] |= 0x04000000u;
}
inline void Equipment::clear_has_tool_belt_3() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void Equipment::clear_tool_belt_3() {
  tool_belt_3_ = 0;
  clear_has_tool_belt_3();
}
inline ::google::protobuf::int32 Equipment::tool_belt_3() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.tool_belt_3)
  return tool_belt_3_;
}
inline void Equipment::set_tool_belt_3(::google::protobuf::int32 value) {
  set_has_tool_belt_3();
  tool_belt_3_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.tool_belt_3)
}

// optional int32 tool_belt_4 = 28;
inline bool Equipment::has_tool_belt_4() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void Equipment::set_has_tool_belt_4() {
  _has_bits_[0] |= 0x08000000u;
}
inline void Equipment::clear_has_tool_belt_4() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void Equipment::clear_tool_belt_4() {
  tool_belt_4_ = 0;
  clear_has_tool_belt_4();
}
inline ::google::protobuf::int32 Equipment::tool_belt_4() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.tool_belt_4)
  return tool_belt_4_;
}
inline void Equipment::set_tool_belt_4(::google::protobuf::int32 value) {
  set_has_tool_belt_4();
  tool_belt_4_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.tool_belt_4)
}

// optional int32 tool_belt_5 = 29;
inline bool Equipment::has_tool_belt_5() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void Equipment::set_has_tool_belt_5() {
  _has_bits_[0] |= 0x10000000u;
}
inline void Equipment::clear_has_tool_belt_5() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void Equipment::clear_tool_belt_5() {
  tool_belt_5_ = 0;
  clear_has_tool_belt_5();
}
inline ::google::protobuf::int32 Equipment::tool_belt_5() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.tool_belt_5)
  return tool_belt_5_;
}
inline void Equipment::set_tool_belt_5(::google::protobuf::int32 value) {
  set_has_tool_belt_5();
  tool_belt_5_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.tool_belt_5)
}

// optional int32 arrow_1 = 30;
inline bool Equipment::has_arrow_1() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void Equipment::set_has_arrow_1() {
  _has_bits_[0] |= 0x20000000u;
}
inline void Equipment::clear_has_arrow_1() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void Equipment::clear_arrow_1() {
  arrow_1_ = 0;
  clear_has_arrow_1();
}
inline ::google::protobuf::int32 Equipment::arrow_1() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.arrow_1)
  return arrow_1_;
}
inline void Equipment::set_arrow_1(::google::protobuf::int32 value) {
  set_has_arrow_1();
  arrow_1_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.arrow_1)
}

// optional int32 arrow_2 = 31;
inline bool Equipment::has_arrow_2() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void Equipment::set_has_arrow_2() {
  _has_bits_[0] |= 0x40000000u;
}
inline void Equipment::clear_has_arrow_2() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void Equipment::clear_arrow_2() {
  arrow_2_ = 0;
  clear_has_arrow_2();
}
inline ::google::protobuf::int32 Equipment::arrow_2() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.arrow_2)
  return arrow_2_;
}
inline void Equipment::set_arrow_2(::google::protobuf::int32 value) {
  set_has_arrow_2();
  arrow_2_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.arrow_2)
}

// optional int32 bolt_1 = 32;
inline bool Equipment::has_bolt_1() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void Equipment::set_has_bolt_1() {
  _has_bits_[0] |= 0x80000000u;
}
inline void Equipment::clear_has_bolt_1() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void Equipment::clear_bolt_1() {
  bolt_1_ = 0;
  clear_has_bolt_1();
}
inline ::google::protobuf::int32 Equipment::bolt_1() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.bolt_1)
  return bolt_1_;
}
inline void Equipment::set_bolt_1(::google::protobuf::int32 value) {
  set_has_bolt_1();
  bolt_1_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.bolt_1)
}

// optional int32 bolt_2 = 33;
inline bool Equipment::has_bolt_2() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void Equipment::set_has_bolt_2() {
  _has_bits_[1] |= 0x00000001u;
}
inline void Equipment::clear_has_bolt_2() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void Equipment::clear_bolt_2() {
  bolt_2_ = 0;
  clear_has_bolt_2();
}
inline ::google::protobuf::int32 Equipment::bolt_2() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.bolt_2)
  return bolt_2_;
}
inline void Equipment::set_bolt_2(::google::protobuf::int32 value) {
  set_has_bolt_2();
  bolt_2_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.bolt_2)
}

// optional int32 spell_1 = 34;
inline bool Equipment::has_spell_1() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void Equipment::set_has_spell_1() {
  _has_bits_[1] |= 0x00000002u;
}
inline void Equipment::clear_has_spell_1() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void Equipment::clear_spell_1() {
  spell_1_ = 0;
  clear_has_spell_1();
}
inline ::google::protobuf::int32 Equipment::spell_1() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.spell_1)
  return spell_1_;
}
inline void Equipment::set_spell_1(::google::protobuf::int32 value) {
  set_has_spell_1();
  spell_1_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.spell_1)
}

// optional int32 spell_2 = 35;
inline bool Equipment::has_spell_2() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void Equipment::set_has_spell_2() {
  _has_bits_[1] |= 0x00000004u;
}
inline void Equipment::clear_has_spell_2() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void Equipment::clear_spell_2() {
  spell_2_ = 0;
  clear_has_spell_2();
}
inline ::google::protobuf::int32 Equipment::spell_2() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.spell_2)
  return spell_2_;
}
inline void Equipment::set_spell_2(::google::protobuf::int32 value) {
  set_has_spell_2();
  spell_2_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.spell_2)
}

// optional int32 spell_3 = 36;
inline bool Equipment::has_spell_3() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void Equipment::set_has_spell_3() {
  _has_bits_[1] |= 0x00000008u;
}
inline void Equipment::clear_has_spell_3() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void Equipment::clear_spell_3() {
  spell_3_ = 0;
  clear_has_spell_3();
}
inline ::google::protobuf::int32 Equipment::spell_3() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.spell_3)
  return spell_3_;
}
inline void Equipment::set_spell_3(::google::protobuf::int32 value) {
  set_has_spell_3();
  spell_3_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.spell_3)
}

// optional int32 spell_4 = 37;
inline bool Equipment::has_spell_4() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void Equipment::set_has_spell_4() {
  _has_bits_[1] |= 0x00000010u;
}
inline void Equipment::clear_has_spell_4() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void Equipment::clear_spell_4() {
  spell_4_ = 0;
  clear_has_spell_4();
}
inline ::google::protobuf::int32 Equipment::spell_4() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.spell_4)
  return spell_4_;
}
inline void Equipment::set_spell_4(::google::protobuf::int32 value) {
  set_has_spell_4();
  spell_4_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.spell_4)
}

// optional int32 spell_5 = 38;
inline bool Equipment::has_spell_5() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void Equipment::set_has_spell_5() {
  _has_bits_[1] |= 0x00000020u;
}
inline void Equipment::clear_has_spell_5() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void Equipment::clear_spell_5() {
  spell_5_ = 0;
  clear_has_spell_5();
}
inline ::google::protobuf::int32 Equipment::spell_5() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.spell_5)
  return spell_5_;
}
inline void Equipment::set_spell_5(::google::protobuf::int32 value) {
  set_has_spell_5();
  spell_5_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.spell_5)
}

// optional int32 spell_6 = 39;
inline bool Equipment::has_spell_6() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void Equipment::set_has_spell_6() {
  _has_bits_[1] |= 0x00000040u;
}
inline void Equipment::clear_has_spell_6() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void Equipment::clear_spell_6() {
  spell_6_ = 0;
  clear_has_spell_6();
}
inline ::google::protobuf::int32 Equipment::spell_6() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.spell_6)
  return spell_6_;
}
inline void Equipment::set_spell_6(::google::protobuf::int32 value) {
  set_has_spell_6();
  spell_6_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.spell_6)
}

// optional int32 spell_7 = 40;
inline bool Equipment::has_spell_7() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void Equipment::set_has_spell_7() {
  _has_bits_[1] |= 0x00000080u;
}
inline void Equipment::clear_has_spell_7() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void Equipment::clear_spell_7() {
  spell_7_ = 0;
  clear_has_spell_7();
}
inline ::google::protobuf::int32 Equipment::spell_7() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.spell_7)
  return spell_7_;
}
inline void Equipment::set_spell_7(::google::protobuf::int32 value) {
  set_has_spell_7();
  spell_7_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.spell_7)
}

// optional int32 spell_8 = 41;
inline bool Equipment::has_spell_8() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void Equipment::set_has_spell_8() {
  _has_bits_[1] |= 0x00000100u;
}
inline void Equipment::clear_has_spell_8() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void Equipment::clear_spell_8() {
  spell_8_ = 0;
  clear_has_spell_8();
}
inline ::google::protobuf::int32 Equipment::spell_8() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.spell_8)
  return spell_8_;
}
inline void Equipment::set_spell_8(::google::protobuf::int32 value) {
  set_has_spell_8();
  spell_8_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.spell_8)
}

// optional int32 spell_9 = 42;
inline bool Equipment::has_spell_9() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void Equipment::set_has_spell_9() {
  _has_bits_[1] |= 0x00000200u;
}
inline void Equipment::clear_has_spell_9() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void Equipment::clear_spell_9() {
  spell_9_ = 0;
  clear_has_spell_9();
}
inline ::google::protobuf::int32 Equipment::spell_9() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.spell_9)
  return spell_9_;
}
inline void Equipment::set_spell_9(::google::protobuf::int32 value) {
  set_has_spell_9();
  spell_9_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.spell_9)
}

// optional int32 spell_10 = 43;
inline bool Equipment::has_spell_10() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void Equipment::set_has_spell_10() {
  _has_bits_[1] |= 0x00000400u;
}
inline void Equipment::clear_has_spell_10() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void Equipment::clear_spell_10() {
  spell_10_ = 0;
  clear_has_spell_10();
}
inline ::google::protobuf::int32 Equipment::spell_10() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.spell_10)
  return spell_10_;
}
inline void Equipment::set_spell_10(::google::protobuf::int32 value) {
  set_has_spell_10();
  spell_10_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.spell_10)
}

// optional int32 spell_11 = 44;
inline bool Equipment::has_spell_11() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void Equipment::set_has_spell_11() {
  _has_bits_[1] |= 0x00000800u;
}
inline void Equipment::clear_has_spell_11() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void Equipment::clear_spell_11() {
  spell_11_ = 0;
  clear_has_spell_11();
}
inline ::google::protobuf::int32 Equipment::spell_11() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.spell_11)
  return spell_11_;
}
inline void Equipment::set_spell_11(::google::protobuf::int32 value) {
  set_has_spell_11();
  spell_11_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.spell_11)
}

// optional int32 spell_12 = 45;
inline bool Equipment::has_spell_12() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void Equipment::set_has_spell_12() {
  _has_bits_[1] |= 0x00001000u;
}
inline void Equipment::clear_has_spell_12() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void Equipment::clear_spell_12() {
  spell_12_ = 0;
  clear_has_spell_12();
}
inline ::google::protobuf::int32 Equipment::spell_12() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.spell_12)
  return spell_12_;
}
inline void Equipment::set_spell_12(::google::protobuf::int32 value) {
  set_has_spell_12();
  spell_12_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.spell_12)
}

// optional int32 spell_13 = 46;
inline bool Equipment::has_spell_13() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void Equipment::set_has_spell_13() {
  _has_bits_[1] |= 0x00002000u;
}
inline void Equipment::clear_has_spell_13() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void Equipment::clear_spell_13() {
  spell_13_ = 0;
  clear_has_spell_13();
}
inline ::google::protobuf::int32 Equipment::spell_13() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.spell_13)
  return spell_13_;
}
inline void Equipment::set_spell_13(::google::protobuf::int32 value) {
  set_has_spell_13();
  spell_13_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.spell_13)
}

// optional int32 spell_14 = 47;
inline bool Equipment::has_spell_14() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void Equipment::set_has_spell_14() {
  _has_bits_[1] |= 0x00004000u;
}
inline void Equipment::clear_has_spell_14() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void Equipment::clear_spell_14() {
  spell_14_ = 0;
  clear_has_spell_14();
}
inline ::google::protobuf::int32 Equipment::spell_14() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.spell_14)
  return spell_14_;
}
inline void Equipment::set_spell_14(::google::protobuf::int32 value) {
  set_has_spell_14();
  spell_14_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.spell_14)
}

// optional int32 unknown_0 = 48;
inline bool Equipment::has_unknown_0() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void Equipment::set_has_unknown_0() {
  _has_bits_[1] |= 0x00008000u;
}
inline void Equipment::clear_has_unknown_0() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void Equipment::clear_unknown_0() {
  unknown_0_ = 0;
  clear_has_unknown_0();
}
inline ::google::protobuf::int32 Equipment::unknown_0() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.unknown_0)
  return unknown_0_;
}
inline void Equipment::set_unknown_0(::google::protobuf::int32 value) {
  set_has_unknown_0();
  unknown_0_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.unknown_0)
}

// optional int32 unknown_1 = 49;
inline bool Equipment::has_unknown_1() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void Equipment::set_has_unknown_1() {
  _has_bits_[1] |= 0x00010000u;
}
inline void Equipment::clear_has_unknown_1() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void Equipment::clear_unknown_1() {
  unknown_1_ = 0;
  clear_has_unknown_1();
}
inline ::google::protobuf::int32 Equipment::unknown_1() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.unknown_1)
  return unknown_1_;
}
inline void Equipment::set_unknown_1(::google::protobuf::int32 value) {
  set_has_unknown_1();
  unknown_1_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.unknown_1)
}

// optional int32 unknown_2 = 50;
inline bool Equipment::has_unknown_2() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void Equipment::set_has_unknown_2() {
  _has_bits_[1] |= 0x00020000u;
}
inline void Equipment::clear_has_unknown_2() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void Equipment::clear_unknown_2() {
  unknown_2_ = 0;
  clear_has_unknown_2();
}
inline ::google::protobuf::int32 Equipment::unknown_2() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.unknown_2)
  return unknown_2_;
}
inline void Equipment::set_unknown_2(::google::protobuf::int32 value) {
  set_has_unknown_2();
  unknown_2_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.unknown_2)
}

// optional int32 unknown_3 = 51;
inline bool Equipment::has_unknown_3() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void Equipment::set_has_unknown_3() {
  _has_bits_[1] |= 0x00040000u;
}
inline void Equipment::clear_has_unknown_3() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void Equipment::clear_unknown_3() {
  unknown_3_ = 0;
  clear_has_unknown_3();
}
inline ::google::protobuf::int32 Equipment::unknown_3() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.unknown_3)
  return unknown_3_;
}
inline void Equipment::set_unknown_3(::google::protobuf::int32 value) {
  set_has_unknown_3();
  unknown_3_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.unknown_3)
}

// optional int32 unknown_4 = 52;
inline bool Equipment::has_unknown_4() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void Equipment::set_has_unknown_4() {
  _has_bits_[1] |= 0x00080000u;
}
inline void Equipment::clear_has_unknown_4() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void Equipment::clear_unknown_4() {
  unknown_4_ = 0;
  clear_has_unknown_4();
}
inline ::google::protobuf::int32 Equipment::unknown_4() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.unknown_4)
  return unknown_4_;
}
inline void Equipment::set_unknown_4(::google::protobuf::int32 value) {
  set_has_unknown_4();
  unknown_4_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.unknown_4)
}

// optional int32 unknown_5 = 53;
inline bool Equipment::has_unknown_5() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void Equipment::set_has_unknown_5() {
  _has_bits_[1] |= 0x00100000u;
}
inline void Equipment::clear_has_unknown_5() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void Equipment::clear_unknown_5() {
  unknown_5_ = 0;
  clear_has_unknown_5();
}
inline ::google::protobuf::int32 Equipment::unknown_5() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.unknown_5)
  return unknown_5_;
}
inline void Equipment::set_unknown_5(::google::protobuf::int32 value) {
  set_has_unknown_5();
  unknown_5_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.unknown_5)
}

// optional int32 unknown_6 = 54;
inline bool Equipment::has_unknown_6() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void Equipment::set_has_unknown_6() {
  _has_bits_[1] |= 0x00200000u;
}
inline void Equipment::clear_has_unknown_6() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void Equipment::clear_unknown_6() {
  unknown_6_ = 0;
  clear_has_unknown_6();
}
inline ::google::protobuf::int32 Equipment::unknown_6() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.unknown_6)
  return unknown_6_;
}
inline void Equipment::set_unknown_6(::google::protobuf::int32 value) {
  set_has_unknown_6();
  unknown_6_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.unknown_6)
}

// optional int32 unknown_7 = 55;
inline bool Equipment::has_unknown_7() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void Equipment::set_has_unknown_7() {
  _has_bits_[1] |= 0x00400000u;
}
inline void Equipment::clear_has_unknown_7() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void Equipment::clear_unknown_7() {
  unknown_7_ = 0;
  clear_has_unknown_7();
}
inline ::google::protobuf::int32 Equipment::unknown_7() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.unknown_7)
  return unknown_7_;
}
inline void Equipment::set_unknown_7(::google::protobuf::int32 value) {
  set_has_unknown_7();
  unknown_7_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.unknown_7)
}

// optional int32 unknown_8 = 56;
inline bool Equipment::has_unknown_8() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void Equipment::set_has_unknown_8() {
  _has_bits_[1] |= 0x00800000u;
}
inline void Equipment::clear_has_unknown_8() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void Equipment::clear_unknown_8() {
  unknown_8_ = 0;
  clear_has_unknown_8();
}
inline ::google::protobuf::int32 Equipment::unknown_8() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.unknown_8)
  return unknown_8_;
}
inline void Equipment::set_unknown_8(::google::protobuf::int32 value) {
  set_has_unknown_8();
  unknown_8_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.unknown_8)
}

// optional int32 unknown_9 = 57;
inline bool Equipment::has_unknown_9() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void Equipment::set_has_unknown_9() {
  _has_bits_[1] |= 0x01000000u;
}
inline void Equipment::clear_has_unknown_9() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void Equipment::clear_unknown_9() {
  unknown_9_ = 0;
  clear_has_unknown_9();
}
inline ::google::protobuf::int32 Equipment::unknown_9() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.unknown_9)
  return unknown_9_;
}
inline void Equipment::set_unknown_9(::google::protobuf::int32 value) {
  set_has_unknown_9();
  unknown_9_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.unknown_9)
}

// optional int32 unknown_10 = 58;
inline bool Equipment::has_unknown_10() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void Equipment::set_has_unknown_10() {
  _has_bits_[1] |= 0x02000000u;
}
inline void Equipment::clear_has_unknown_10() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void Equipment::clear_unknown_10() {
  unknown_10_ = 0;
  clear_has_unknown_10();
}
inline ::google::protobuf::int32 Equipment::unknown_10() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.unknown_10)
  return unknown_10_;
}
inline void Equipment::set_unknown_10(::google::protobuf::int32 value) {
  set_has_unknown_10();
  unknown_10_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.unknown_10)
}

// optional int32 unknown_11 = 59;
inline bool Equipment::has_unknown_11() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void Equipment::set_has_unknown_11() {
  _has_bits_[1] |= 0x04000000u;
}
inline void Equipment::clear_has_unknown_11() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void Equipment::clear_unknown_11() {
  unknown_11_ = 0;
  clear_has_unknown_11();
}
inline ::google::protobuf::int32 Equipment::unknown_11() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.unknown_11)
  return unknown_11_;
}
inline void Equipment::set_unknown_11(::google::protobuf::int32 value) {
  set_has_unknown_11();
  unknown_11_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.unknown_11)
}

// optional int32 unknown_12 = 60;
inline bool Equipment::has_unknown_12() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void Equipment::set_has_unknown_12() {
  _has_bits_[1] |= 0x08000000u;
}
inline void Equipment::clear_has_unknown_12() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void Equipment::clear_unknown_12() {
  unknown_12_ = 0;
  clear_has_unknown_12();
}
inline ::google::protobuf::int32 Equipment::unknown_12() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Equipment.unknown_12)
  return unknown_12_;
}
inline void Equipment::set_unknown_12(::google::protobuf::int32 value) {
  set_has_unknown_12();
  unknown_12_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Equipment.unknown_12)
}

// -------------------------------------------------------------------

// PlayerLocation

// optional uint32 online_area_id_lower = 1;
inline bool PlayerLocation::has_online_area_id_lower() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerLocation::set_has_online_area_id_lower() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerLocation::clear_has_online_area_id_lower() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerLocation::clear_online_area_id_lower() {
  online_area_id_lower_ = 0u;
  clear_has_online_area_id_lower();
}
inline ::google::protobuf::uint32 PlayerLocation::online_area_id_lower() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.PlayerLocation.online_area_id_lower)
  return online_area_id_lower_;
}
inline void PlayerLocation::set_online_area_id_lower(::google::protobuf::uint32 value) {
  set_has_online_area_id_lower();
  online_area_id_lower_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.PlayerLocation.online_area_id_lower)
}

// optional uint32 online_area_id_upper = 2;
inline bool PlayerLocation::has_online_area_id_upper() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerLocation::set_has_online_area_id_upper() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerLocation::clear_has_online_area_id_upper() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerLocation::clear_online_area_id_upper() {
  online_area_id_upper_ = 0u;
  clear_has_online_area_id_upper();
}
inline ::google::protobuf::uint32 PlayerLocation::online_area_id_upper() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.PlayerLocation.online_area_id_upper)
  return online_area_id_upper_;
}
inline void PlayerLocation::set_online_area_id_upper(::google::protobuf::uint32 value) {
  set_has_online_area_id_upper();
  online_area_id_upper_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.PlayerLocation.online_area_id_upper)
}

// -------------------------------------------------------------------

// DefenseInfo

// optional uint32 physical = 1;
inline bool DefenseInfo::has_physical() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DefenseInfo::set_has_physical() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DefenseInfo::clear_has_physical() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DefenseInfo::clear_physical() {
  physical_ = 0u;
  clear_has_physical();
}
inline ::google::protobuf::uint32 DefenseInfo::physical() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.DefenseInfo.physical)
  return physical_;
}
inline void DefenseInfo::set_physical(::google::protobuf::uint32 value) {
  set_has_physical();
  physical_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.DefenseInfo.physical)
}

// optional uint32 strike = 2;
inline bool DefenseInfo::has_strike() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DefenseInfo::set_has_strike() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DefenseInfo::clear_has_strike() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DefenseInfo::clear_strike() {
  strike_ = 0u;
  clear_has_strike();
}
inline ::google::protobuf::uint32 DefenseInfo::strike() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.DefenseInfo.strike)
  return strike_;
}
inline void DefenseInfo::set_strike(::google::protobuf::uint32 value) {
  set_has_strike();
  strike_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.DefenseInfo.strike)
}

// optional uint32 slash = 3;
inline bool DefenseInfo::has_slash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DefenseInfo::set_has_slash() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DefenseInfo::clear_has_slash() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DefenseInfo::clear_slash() {
  slash_ = 0u;
  clear_has_slash();
}
inline ::google::protobuf::uint32 DefenseInfo::slash() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.DefenseInfo.slash)
  return slash_;
}
inline void DefenseInfo::set_slash(::google::protobuf::uint32 value) {
  set_has_slash();
  slash_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.DefenseInfo.slash)
}

// optional uint32 thrust = 4;
inline bool DefenseInfo::has_thrust() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DefenseInfo::set_has_thrust() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DefenseInfo::clear_has_thrust() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DefenseInfo::clear_thrust() {
  thrust_ = 0u;
  clear_has_thrust();
}
inline ::google::protobuf::uint32 DefenseInfo::thrust() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.DefenseInfo.thrust)
  return thrust_;
}
inline void DefenseInfo::set_thrust(::google::protobuf::uint32 value) {
  set_has_thrust();
  thrust_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.DefenseInfo.thrust)
}

// optional uint32 magic = 5;
inline bool DefenseInfo::has_magic() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DefenseInfo::set_has_magic() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DefenseInfo::clear_has_magic() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DefenseInfo::clear_magic() {
  magic_ = 0u;
  clear_has_magic();
}
inline ::google::protobuf::uint32 DefenseInfo::magic() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.DefenseInfo.magic)
  return magic_;
}
inline void DefenseInfo::set_magic(::google::protobuf::uint32 value) {
  set_has_magic();
  magic_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.DefenseInfo.magic)
}

// optional uint32 fire = 6;
inline bool DefenseInfo::has_fire() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DefenseInfo::set_has_fire() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DefenseInfo::clear_has_fire() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DefenseInfo::clear_fire() {
  fire_ = 0u;
  clear_has_fire();
}
inline ::google::protobuf::uint32 DefenseInfo::fire() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.DefenseInfo.fire)
  return fire_;
}
inline void DefenseInfo::set_fire(::google::protobuf::uint32 value) {
  set_has_fire();
  fire_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.DefenseInfo.fire)
}

// optional uint32 lightning = 7;
inline bool DefenseInfo::has_lightning() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DefenseInfo::set_has_lightning() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DefenseInfo::clear_has_lightning() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DefenseInfo::clear_lightning() {
  lightning_ = 0u;
  clear_has_lightning();
}
inline ::google::protobuf::uint32 DefenseInfo::lightning() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.DefenseInfo.lightning)
  return lightning_;
}
inline void DefenseInfo::set_lightning(::google::protobuf::uint32 value) {
  set_has_lightning();
  lightning_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.DefenseInfo.lightning)
}

// optional uint32 dark = 8;
inline bool DefenseInfo::has_dark() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DefenseInfo::set_has_dark() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DefenseInfo::clear_has_dark() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DefenseInfo::clear_dark() {
  dark_ = 0u;
  clear_has_dark();
}
inline ::google::protobuf::uint32 DefenseInfo::dark() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.DefenseInfo.dark)
  return dark_;
}
inline void DefenseInfo::set_dark(::google::protobuf::uint32 value) {
  set_has_dark();
  dark_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.DefenseInfo.dark)
}

// -------------------------------------------------------------------

// CutRateInfo

// optional float physical = 1;
inline bool CutRateInfo::has_physical() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CutRateInfo::set_has_physical() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CutRateInfo::clear_has_physical() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CutRateInfo::clear_physical() {
  physical_ = 0;
  clear_has_physical();
}
inline float CutRateInfo::physical() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.CutRateInfo.physical)
  return physical_;
}
inline void CutRateInfo::set_physical(float value) {
  set_has_physical();
  physical_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.CutRateInfo.physical)
}

// optional float strike = 2;
inline bool CutRateInfo::has_strike() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CutRateInfo::set_has_strike() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CutRateInfo::clear_has_strike() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CutRateInfo::clear_strike() {
  strike_ = 0;
  clear_has_strike();
}
inline float CutRateInfo::strike() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.CutRateInfo.strike)
  return strike_;
}
inline void CutRateInfo::set_strike(float value) {
  set_has_strike();
  strike_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.CutRateInfo.strike)
}

// optional float slash = 3;
inline bool CutRateInfo::has_slash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CutRateInfo::set_has_slash() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CutRateInfo::clear_has_slash() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CutRateInfo::clear_slash() {
  slash_ = 0;
  clear_has_slash();
}
inline float CutRateInfo::slash() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.CutRateInfo.slash)
  return slash_;
}
inline void CutRateInfo::set_slash(float value) {
  set_has_slash();
  slash_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.CutRateInfo.slash)
}

// optional float thrust = 4;
inline bool CutRateInfo::has_thrust() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CutRateInfo::set_has_thrust() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CutRateInfo::clear_has_thrust() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CutRateInfo::clear_thrust() {
  thrust_ = 0;
  clear_has_thrust();
}
inline float CutRateInfo::thrust() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.CutRateInfo.thrust)
  return thrust_;
}
inline void CutRateInfo::set_thrust(float value) {
  set_has_thrust();
  thrust_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.CutRateInfo.thrust)
}

// optional float magic = 5;
inline bool CutRateInfo::has_magic() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CutRateInfo::set_has_magic() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CutRateInfo::clear_has_magic() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CutRateInfo::clear_magic() {
  magic_ = 0;
  clear_has_magic();
}
inline float CutRateInfo::magic() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.CutRateInfo.magic)
  return magic_;
}
inline void CutRateInfo::set_magic(float value) {
  set_has_magic();
  magic_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.CutRateInfo.magic)
}

// optional float fire = 6;
inline bool CutRateInfo::has_fire() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CutRateInfo::set_has_fire() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CutRateInfo::clear_has_fire() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CutRateInfo::clear_fire() {
  fire_ = 0;
  clear_has_fire();
}
inline float CutRateInfo::fire() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.CutRateInfo.fire)
  return fire_;
}
inline void CutRateInfo::set_fire(float value) {
  set_has_fire();
  fire_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.CutRateInfo.fire)
}

// optional float lightning = 7;
inline bool CutRateInfo::has_lightning() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CutRateInfo::set_has_lightning() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CutRateInfo::clear_has_lightning() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CutRateInfo::clear_lightning() {
  lightning_ = 0;
  clear_has_lightning();
}
inline float CutRateInfo::lightning() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.CutRateInfo.lightning)
  return lightning_;
}
inline void CutRateInfo::set_lightning(float value) {
  set_has_lightning();
  lightning_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.CutRateInfo.lightning)
}

// optional float dark = 8;
inline bool CutRateInfo::has_dark() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CutRateInfo::set_has_dark() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CutRateInfo::clear_has_dark() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CutRateInfo::clear_dark() {
  dark_ = 0;
  clear_has_dark();
}
inline float CutRateInfo::dark() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.CutRateInfo.dark)
  return dark_;
}
inline void CutRateInfo::set_dark(float value) {
  set_has_dark();
  dark_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.CutRateInfo.dark)
}

// -------------------------------------------------------------------

// ResistanceInfo

// optional uint32 bleed = 1;
inline bool ResistanceInfo::has_bleed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResistanceInfo::set_has_bleed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResistanceInfo::clear_has_bleed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResistanceInfo::clear_bleed() {
  bleed_ = 0u;
  clear_has_bleed();
}
inline ::google::protobuf::uint32 ResistanceInfo::bleed() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.ResistanceInfo.bleed)
  return bleed_;
}
inline void ResistanceInfo::set_bleed(::google::protobuf::uint32 value) {
  set_has_bleed();
  bleed_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.ResistanceInfo.bleed)
}

// optional uint32 poison = 2;
inline bool ResistanceInfo::has_poison() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResistanceInfo::set_has_poison() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResistanceInfo::clear_has_poison() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResistanceInfo::clear_poison() {
  poison_ = 0u;
  clear_has_poison();
}
inline ::google::protobuf::uint32 ResistanceInfo::poison() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.ResistanceInfo.poison)
  return poison_;
}
inline void ResistanceInfo::set_poison(::google::protobuf::uint32 value) {
  set_has_poison();
  poison_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.ResistanceInfo.poison)
}

// optional uint32 frost = 3;
inline bool ResistanceInfo::has_frost() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResistanceInfo::set_has_frost() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResistanceInfo::clear_has_frost() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResistanceInfo::clear_frost() {
  frost_ = 0u;
  clear_has_frost();
}
inline ::google::protobuf::uint32 ResistanceInfo::frost() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.ResistanceInfo.frost)
  return frost_;
}
inline void ResistanceInfo::set_frost(::google::protobuf::uint32 value) {
  set_has_frost();
  frost_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.ResistanceInfo.frost)
}

// optional uint32 curse = 4;
inline bool ResistanceInfo::has_curse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResistanceInfo::set_has_curse() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResistanceInfo::clear_has_curse() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResistanceInfo::clear_curse() {
  curse_ = 0u;
  clear_has_curse();
}
inline ::google::protobuf::uint32 ResistanceInfo::curse() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.ResistanceInfo.curse)
  return curse_;
}
inline void ResistanceInfo::set_curse(::google::protobuf::uint32 value) {
  set_has_curse();
  curse_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.ResistanceInfo.curse)
}

// -------------------------------------------------------------------

// Vector

// required float x = 1;
inline bool Vector::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Vector::x() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Vector.x)
  return x_;
}
inline void Vector::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Vector.x)
}

// required float y = 2;
inline bool Vector::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vector::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Vector::y() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Vector.y)
  return y_;
}
inline void Vector::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Vector.y)
}

// required float z = 3;
inline bool Vector::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vector::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vector::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vector::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Vector::z() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.Vector.z)
  return z_;
}
inline void Vector::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.Vector.z)
}

// -------------------------------------------------------------------

// BonfireInfo

// required uint32 bonfire_id = 1;
inline bool BonfireInfo::has_bonfire_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BonfireInfo::set_has_bonfire_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BonfireInfo::clear_has_bonfire_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BonfireInfo::clear_bonfire_id() {
  bonfire_id_ = 0u;
  clear_has_bonfire_id();
}
inline ::google::protobuf::uint32 BonfireInfo::bonfire_id() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.BonfireInfo.bonfire_id)
  return bonfire_id_;
}
inline void BonfireInfo::set_bonfire_id(::google::protobuf::uint32 value) {
  set_has_bonfire_id();
  bonfire_id_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.BonfireInfo.bonfire_id)
}

// required uint32 has_been_lit = 2;
inline bool BonfireInfo::has_has_been_lit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BonfireInfo::set_has_has_been_lit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BonfireInfo::clear_has_has_been_lit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BonfireInfo::clear_has_been_lit() {
  has_been_lit_ = 0u;
  clear_has_has_been_lit();
}
inline ::google::protobuf::uint32 BonfireInfo::has_been_lit() const {
  // @@protoc_insertion_point(field_get:Frpg2PlayerData.BonfireInfo.has_been_lit)
  return has_been_lit_;
}
inline void BonfireInfo::set_has_been_lit(::google::protobuf::uint32 value) {
  set_has_has_been_lit();
  has_been_lit_ = value;
  // @@protoc_insertion_point(field_set:Frpg2PlayerData.BonfireInfo.has_been_lit)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Frpg2PlayerData

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Frpg2PlayerData_2eproto__INCLUDED
