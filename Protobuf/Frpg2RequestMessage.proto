/*
 * Dark Souls 3 - Open Server
 * Copyright (C) 2021 Tim Leonard
 *
 * This program is free software; licensed under the MIT license. 
 * You should have received a copy of the license along with this program. 
 * If not, see <https://opensource.org/licenses/MIT>.
 */

// Credit: A lot of information here has been derived from the protobufs of AmirBohd's ModEngine2.

syntax = "proto2";
option optimize_for = LITE_RUNTIME;
package Frpg2RequestMessage;

import "Frpg2PlayerData.proto";

// ------------------------------------------------------------------------------------------------------------
// Login Server Messages
// ------------------------------------------------------------------------------------------------------------

// First message sent to the login server, used to request
// the port and server_ip to authenticate over.
message RequestQueryLoginServerInfo {
    required string steam_id = 1;
    optional string f2 = 2;
    required uint64 network_protocol = 3;   // Guessing a bit here, but a network protocol version would be wise to route to the right servers during updates.
}

// Send in response to RequestQueryLoginServerInfo
message RequestQueryLoginServerInfoResponse {
    required int64 port = 1;
    required string server_ip = 2;
}

// Presumably a message sent instead of RequestQueryLoginServerInfo on xbox
// Probably holds an xbox-specific user-id.
message RequestQueryLoginServerInfoForXboxOne {
    // Unknown
}

// ------------------------------------------------------------------------------------------------------------
// Auth Server Messages
// ------------------------------------------------------------------------------------------------------------

// First message sent to auth server RSA encrypted. Provides a CWC key used
// for encrypting the rest of the traffic.
message RequestHandshake {
    required bytes aes_cwc_key = 1;
}

// Response to initial message, encrypted with CWC.
message RequestHandshakeResponse {
}

// Sent after handshake, all seemingly constant data (apart from the steam_id). 
// Presumably used for ensure we are connecting to a compatible server?
message GetServiceStatus {
    required int64 id = 1;
    required string steam_id = 2;
    optional string unknown_1 = 3;
    required int64 network_protocol = 4;
}

// Same as above but probably has an xbox one id rather than steam_id.
message GetServiceStatusForXboxOne {
    // Unknown
}

// Response to GetServiceStatus, contains identical data to what is sent
// with the exception of a black steam_id. Presumably if we connected to a dev server
// or something we would get different responses.
message GetServiceStatusResponse {
    required int64 id = 1;
    required string steam_id = 2;
    required int64 unknown_1 = 3;
    required int64 network_protocol = 4;
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Initialization
// ------------------------------------------------------------------------------------------------------------

message RequestWaitForUserLogin {
    required string steam_id = 1;
    required uint32 unknown_1 = 2;  // 1
    required uint32 unknown_2 = 3;  // 0
    required uint32 unknown_3 = 4;  // 1
    required uint32 unknown_4 = 5;  // 2
}

message RequestWaitForUserLoginResponse {
    required string steam_id = 1;
    required uint32 unknown_1 = 2; // 6872049
}

message PlayerInfoUploadConfigPushMessageList {
    repeated uint32 unknown_1 = 1; // Almost sequential count up from 2 to 1059.
    required uint32 unknown_2 = 2; // 5
}

message LoginForXboxOne {
    // Unknown
}

message SocketOptionSetting {
    // Unknown
}

message GetConnectGameServerPortIdResponse {
    // Unknown
}

message UserLogout {
    // Unknown
}

message ManagementTextMessage {
    // Unknown
}

message NRLogUploadRequest {
    // Unknown
}

message NRLoggingMessage {
    // Unknown
}

message ServerPing {
    // Unknown
}

message NotifyClientServerInfoToPushServer {
    // Unknown
}

message PushLoginUserInfo {
    // Unknown
}

message NotifyLoginToPushServer {
    // Unknown
}

message NotifyLogoutToPushServer {
    // Unknown
}

message RequestCheckLogin {
    // Unknown
}

message UserLoginInfo {
    // Unknown
}

message RequestCheckLoginResponse {
    // Unknown
}

message RequestGetPlayerConnectGameServer {
    // Unknown
}

message PlayerConnectServerInfo {
    // Unknown
}

message RequestGetPlayerConnectGameServerResponse {
    // Unknown
}

message RequestGetServerConnectTime {
    // Unknown
}

message RequestGetServerConnectTimeResponse {
    // Unknown
}

message RequestGetConnectionCount {
    // Unknown
}

message RequestGetConnectionCountResponse {
    // Unknown
}

message RequestDisconnectUser {
    // Unknown
}

message RequestDisconnectAllUser {
    // Unknown
}

message RequestSendMessageToPushClient {
    // Unknown
}

message PushRequestHeader {
    // Unknown
}

message RangedLimit {
    // Unknown
}

message PlayerUserIDPair {
    // Unknown
}

message RequestGetServerSidePlayerStatus {
    // Unknown
}

message PlayerStatusUploadConfig {
    // Unknown
}

message LoginClientInfo {
    // Unknown
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Announcements
// ------------------------------------------------------------------------------------------------------------

message AnnounceMessageData {
    required uint32 unknown_1 = 1;  // Seen as 20,104,24, changing it makes no visual difference.
    required uint32 index = 2;
    required uint32 unknown_2 = 3;  // always 1
    required string header = 4;
    required string message = 5;
    required Frpg2PlayerData.DateTime datetime = 6;
}

message AnnounceMessageDataList {
    repeated AnnounceMessageData items = 1;
}

message RequestGetAnnounceMessageList {
    required uint32 max_entries = 1; // Guessing this is what the value is, seems to be constant of 100. 
}

message RequestGetAnnounceMessageListResponse {
    required AnnounceMessageDataList changes = 1;
    required AnnounceMessageDataList notices = 2;
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Character Info Management
// ------------------------------------------------------------------------------------------------------------

// I'm guessing this is used to configure how often the user uploads their info, and in what locations.
message PlayerInfoUploadConfigPushMessage {
    required uint32 unknown_1 = 1;  // 908
    required PlayerInfoUploadConfigPushMessageList unknown_2 = 2;  // massive list
    required uint32 unknown_3 = 3;  // 600 - 10 minutes
    required uint32 unknown_4 = 4;  // 300 - 5 minutes
}

message RequestUpdateLoginPlayerCharacter {
    required uint32 unknown_1 = 1; // Always seems to be 1
    required uint32 unknown_2 = 2; // Always seems to be 1
}

message RequestUpdateLoginPlayerCharacterResponseData {
    required uint32 unknown_1 = 1; // Always seems to be 0
    required uint32 unknown_2 = 2; // Always seems to be 0
}

message RequestUpdateLoginPlayerCharacterResponse {
    required uint32 unknown_1 = 1; // Always seems to be 1
    required RequestUpdateLoginPlayerCharacterResponseData unknown_2 = 2;
    required RequestUpdateLoginPlayerCharacterResponseData unknown_3 = 3;
}

message RequestUpdatePlayerStatus {
    required Frpg2PlayerData.UpdateAllDelta status = 1;
}

message RequestUpdatePlayerStatusResponse {
    // Seemingly unused, never seen it returned by server.
}

message PlayerCharacterData { 
}

message RequestUpdatePlayerCharacter {
    required uint32 unknown_1 = 1; // Always seems to be 1.
    required bytes unknown_2 = 2; // Looks like raw serialized data.
}

message RequestUpdatePlayerCharacterResponse {
    // Seemingly unused, never seen it returned by server.
}

message PlayerCharacterID {
    // Unknown
}

message RequestGetPlayerCharacter {
    // Unknown
}

message RequestGetPlayerCharacterResponse {
    // Unknown
}

message RequestGetLoginPlayerCharacter {
    // Unknown
}

message RequestGetLoginPlayerCharacterResponse {
    // Unknown
}

message RequestGetPlayerCharacterList {
    // Unknown
}

message RequestGetPlayerCharacterListResponse {
    // Unknown
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Blood Messages
// ------------------------------------------------------------------------------------------------------------

message BloodMessageData {
    // Unknown
}

message RequestReentryBloodMessage {
    required uint32 unknown_2 = 2; // Always seems to be 1.
}

message RequestReentryBloodMessageResponse {
    // Unknown
}

message RequestCreateBloodMessage {
    // Unknown
}

message RequestCreateBloodMessageResponse {
    // Unknown
}

message RequestReCreateBloodMessageList {
    message Blood_message_info_list {
        // Unknown
    }
    // Unknown
}

message RequestReCreateBloodMessageListResponse {
    // Unknown
}

message RequestRemoveBloodMessage {
    // Unknown
}

message RequestRemoveBloodMessageResponse {
    // Unknown
}

message LocatedBloodMessage {
    // Unknown
}

message BloodMessageDomainLimitData {
    // Unknown
}

message RequestGetBloodMessageList {
    // Unknown
}

message RequestGetBloodMessageListResponse {
    // Unknown
}

message RequestEvaluateBloodMessage {
    // Unknown
}

message RequestEvaluateBloodMessageResponse {
    // Unknown
}

message RequestGetBloodMessageEvaluation {
    // Unknown
}

message BloodMessageEvaluationData {
    // Unknown
}

message RequestGetBloodMessageEvaluationResponse {
    // Unknown
}

message PushRequestEvaluateBloodMessage {
    // Unknown
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Blood Stains
// ------------------------------------------------------------------------------------------------------------

message BloodstainInfo {
    // Unknown
}

message RequestCreateBloodstain {
    // Unknown
}

message RequestGetBloodstainList {
    // Unknown
}

message RequestGetBloodstainListResponse {
    // Unknown
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Logging
// ------------------------------------------------------------------------------------------------------------

// New for this protobuf, its not defined in DS3, we should fine out what struct
// it actually maps to.
message LogCommonInfo_1 {
    required uint32 unknown_1 = 34; // 0, 1, 2
    required uint32 unknown_2 = 37; // 0, 1
}

// New for this protobuf, its not defined in DS3, we should fine out what struct
// it actually maps to.
message LogCommonInfo_2 {
    required uint32 unknown_1 = 1; // 3576692768
    required string timestamp = 2; // "202108092109340005938762"
    required uint32 unknown_3 = 3; 
}

// Wraps common information about a log message sent to the server.
message LogCommonInfo {
    required LogCommonInfo_1 unknown_1 = 3;
    required LogCommonInfo_2 unknown_2 = 7;
}

// Sent in RequestNotifyProtoBufLog and used to determine which protobuf
// is serialized in the raw data field.
enum LogType
{
    UseMagicLog = 2020;
    ActGestureLog = 2021;
    UseItemLog = 3000;
    PurchaseItemLog = 3001;
    GetItemLog = 3002;
    DropItemLog = 3003;
    LeaveItemLog = 3004;
    SaleItemLog = 3005;
    StrengthenWeaponLog = 3010;
    GlobalEventLog = 5001;
    SystemOptionLog = 8001;
    // LevelUpLog = 0;
    // BrokenEquipmentLog = 0;
    // AccessWarehouseLog = 0;
    // RepairEquipmentLog = 0;
    // EquipMagicLog = 0;
    // ChaneEstusFlaskNumLog = 0;
    // CreateBloodMessageLog = 0;
    // EvaluateBloodMessageLog = 0;
    // VisitResultLog = 0;
    // QuickMatchResultLog = 0;
    // QuickMatchEndLog = 0;
    // ConvertSaveDataLog = 0;
}

// Send periodically throughout the game to send telemetry data. The
// event specific data is stored as a protobuf serialized into the data
// field. Which protobuf it is defined by the type. Look on FpdLogMessage.proto
// for all their definitions.
message RequestNotifyProtoBufLog {
    required LogType type = 1; 
    required LogCommonInfo common = 2;

    // This is an embedded protobuf, its one of the *Log protobufs
    // in the FpdLogMessage.proto file.
    required bytes data = 3;
}

// Sent when user dies.
message RequestNotifyDie {
    // Unknown
}

// Sent when user kills an enemy.
message RequestNotifyKillEnemy {
    // Unknown
}

// Sent when user kills the boss of an area (including in coop)
message RequestNotifyKillBoss {
    // Unknown
}

// Sent when user joins another users game, or someone else joins their game.
message RequestNotifyJoinMultiplay { 
    required Frpg2PlayerData.AllStatus all_status = 1;
    required uint32 online_area_id_lower = 2;
    required uint32 online_area_id_upper = 3;
    required uint32 unknown_2 = 4;
    required uint32 unknown_3 = 5;
    repeated PartyMemberInfo party_member_info = 6;
}

// Sent when user is in a game with no other users connected.
message RequestNotifyLeaveMultiplay {  
    required Frpg2PlayerData.AllStatus all_status = 1;
    required uint32 online_area_id_lower = 2;
    required uint32 online_area_id_upper = 3;
    required uint32 unknown_2 = 4;
    required uint32 unknown_3 = 5;
    required uint32 unknown_4 = 6;
    repeated PartyMemberInfo party_member_info = 7;
}

// Sent when the user has created a sign (not sure why this is needed - server already knows this).
message RequestNotifyCreateSignResult {
    required Frpg2PlayerData.AllStatus all_status = 1;
    required uint32 online_area_id_lower = 2;
    required uint32 online_area_id_upper = 3;
    required Frpg2PlayerData.Vector vector = 4;
    required uint32 sign_unique_number = 5;              // 528745087
    required uint32 unknown_2 = 6;                       // 0
    required uint32 unknown_3 = 7;                       // 3
    required uint32 unknown_4 = 8;                       // 2
}

// Seemingly unused.
message RequestNotifySummonSignResult {
    // Unknown
}

// Sent when the user has invaded another game.
message RequestNotifyBreakInResult {
    // Unknown
}

// Seemingly unused.
message RequestNotifyDisconnectSession {
    // Unknown
}

// Seemingly unused.
message RequestNotifyDisconnectSessionResponse {
    // Unknown
}

message RequestNotifyRegisterCharacter {
    // Unknown
}

message DomainLimitData {
    // Unknown
}

message KillerInfo {
    // Unknown
}

message KillEnemyInfo {
    // Unknown
}

message PartyMemberInfo {
    required uint32 player_id = 1;
    required uint32 char_id = 2;
    required uint32 unknown_2 = 3;
    required uint32 unknown_4 = 4;
    required uint32 unknown_5 = 5;
    required uint32 unknown_6 = 6;
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Summon Signs
// ------------------------------------------------------------------------------------------------------------

message SummonSignMessage {
    required uint32 online_area_id = 1;
    required string steam_id = 2;
    required SignInfo sign_info = 3;
    required string player_struct = 4;
}

message RemoveSignMessage {
    // Unknown
}

message RejectSignMessage {
    // Unknown
}

message CachedSign {
    // Unknown
}

message GetSignResult {
    optional SignInfo sign_info = 1;
    repeated SignData sign_data = 2;
}

message SignInfo {
    required uint32 player_id = 1;
    required uint32 sign_info = 2;
}

message SignData {
    required SignInfo sign_info = 1;
    required uint32 online_area_id = 2;
    required MatchingParameter matching_parameter = 3;
    required bytes player_struct = 4;
    required string steam_id = 5;                       // sometimes a steamid, sometimes a 3 value substruct
    required uint32 unknown_id_6 = 6;                   // 0
}

message MatchingParameter {
    required uint32 unknown_id_1 = 1;                     // 1350000
    required uint32 unknown_id_2 = 2;                     // 2
    required uint32 unknown_id_3 = 3;                     // 1,0
    required uint32 unknown_id_4 = 4;                     // 1
    required uint32 unknown_id_5 = 5;                     // 0
    required uint32 soul_level = 6;
    required uint32 total_get_soul = 7;
    optional string unknown_string = 8;
    required uint32 unknown_id_9 = 9;                     // 0, 1, 7
    required string password = 10;
    required uint32 covenant = 11;
    required uint32 weapon_level = 14;
}

message SignGetFlags {
    required uint32 unknown_id_1 = 1;                     // 1
    required uint32 unknown_id_2 = 2;                     // 1
    required uint32 unknown_id_3 = 3;                     // 0
}

message SignDomainGetInfo {
    required uint32 unknown_field_1 = 1;                  // 32
    required uint32 online_area_id = 2;
}

message RequestGetSignList {
    required uint32 unknown_id_1 = 1;                       // 0
    repeated SignDomainGetInfo sign_domain_get_info = 2;
    required uint32 online_area_id = 3;                     // Seems to be related to online area
    required MatchingParameter matching_parameter = 4;
    required SignGetFlags sign_get_flags = 5;
}

message RequestGetSignListResponse {
    required GetSignResult get_sign_result = 1;
}

message RequestCreateSign {
    required uint32 online_area_id_lower = 1;
    required uint32 online_area_id_upper = 2;
    required MatchingParameter matching_parameter = 3;
    required uint32 unknown = 4;
    required bytes player_struct = 5;
}

message RequestCreateSignResponse {
    required uint32 sign_unique_number = 1;
}

message RequestSummonSign {
    required uint32 online_area_id_lower = 1;
    required uint32 online_area_id_upper = 2;
    required SignInfo sign_info = 3;
    required string player_struct = 4;
}

message RequestSummonSignResponse {
    // Never gets sent?
}

message RequestRemoveSign {
    required uint32 online_area_id_lower = 1;
    required uint32 online_area_id_upper = 2;
    required uint32 sign_unique_number = 3;
}

message RequestRemoveSignResponse {
    // Never gets sent?
}

message RequestUpdateSign {
    required uint32 online_area_id_lower = 1;
    required uint32 online_area_id_upper = 2;
    required uint32 sign_unique_number = 3;
}

message RequestUpdateSignResponse {
    // Never gets sent?
}

message RequestRejectSign {
    // Unknown
}

message RequestRejectSignResponse {
    // Unknown
}

message RequestCreateGhostData {
    required uint32 online_area_id = 1;
    required bytes ghost_data = 2;
}

message RequestCreateGhostDataResponse {
    // Never gets sent?
}

message RequestGetRightMatchingArea {
    required MatchingParameter matching_parameter = 1;
    required uint32 unknown = 2;
}

message RequestGetRightMatchingAreaResponse {  
    message Area_info {
        required uint32 online_area_id = 1;
        required uint32 population = 2; // Seems to be on a scale of 1-5.
    }
    repeated Area_info area_info = 1;
}

message PushRequestRemoveSign {
    required uint32 sign_unique_number = 1;
    required SignInfo sign_info = 2;
}

message PushRequestSummonSign {
    required uint32 sign_unique_number = 1;
    required SummonSignMessage summon_sign_message = 2;
}

message PushRequestRejectSign {
    // Unknown
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Break In Messages
// ------------------------------------------------------------------------------------------------------------

message BreakInTargetData {
    required uint32 player_id = 1;
    required string steam_id = 2;
}

// Sent by invader looking for worlds to invade
message RequestGetBreakInTargetList { 
    required uint32 online_area_id_lower = 1;
    required uint32 online_area_id_upper = 2;
    required uint32 unknown_1 = 3;
    required MatchingParameter matching_parameter = 4;
    required uint32 unknown_2 = 5;
}

// Received by invader looking for worlds to invade
message RequestGetBreakInTargetListResponse { 
    required uint32 online_area_id_lower = 1;
    required uint32 online_area_id_upper = 2;
    repeated BreakInTargetData break_in_target_data = 3;
}

// Received by host, after PushRequestBreakInTarget. Sent by invader
message PushRequestAllowBreakInTarget { 
    required uint32 unknown_1 = 1; //935
    required uint32 player_id = 2; //Host playerid
    required string data = 3;
    required uint32 unknown_2 = 4;
}

// Received by host
message PushRequestBreakInTarget { 
    required uint32 unknown_1 = 1; ///Same as PushRequestAllowBreakInTarget
    required uint32 player_id = 2; //Invading playerid
    required string steam_id = 3;
    required uint32 unknown_2 = 4; //Same as PushRequestAllowBreakInTarget
    required uint32 online_area_id_lower = 5;
    required uint32 online_area_id_upper = 6;
}

message PushRequestRemoveBreakInTarget {
    // Unknown
}

message RequestBreakInTarget {
    // Unknown
}

message RequestBreakInTargetResponse {
    // Unknown
}

message RequestRejectBreakInTarget {
    // Unknown
}

message RequestRejectBreakInTargetResponse {
    // Unknown
}

message PushRequestRejectBreakInTarget {
    // Unknown
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Ghost Data
// ------------------------------------------------------------------------------------------------------------

message RequestGetDeadingGhost {
    // Unknown
}

message RequestGetDeadingGhostResponse {
    // Unknown
}

message RequestGetGhostDataList {
    // Unknown
}

message GhostData {
    // Unknown
}

message RequestGetGhostDataListResponse {
    // Unknown
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Vistors (Join via covenenant I think)
// ------------------------------------------------------------------------------------------------------------

message RequestGetVisitorList {
    // Unknown
}

message VisitorData {
    // Unknown
}

message RequestGetVisitorListResponse {
    // Unknown
}

message PushRequestRemoveVisitor {
    // Unknown
}

message RequestVisit {
    // Unknown
}

message RequestVisitResponse {
    // Unknown
}

message PushRequestVisit {
    // Unknown
}

message RequestRejectVisit {
    // Unknown
}

message RequestRejectVisitResponse {
    // Unknown
}

message PushRequestRejectVisit {
    // Unknown
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Bells, this is for archdragon peak I believe.
// ------------------------------------------------------------------------------------------------------------

message RequestNotifyRingBell {
    // Unknown
}

message RequestNotifyRingBellResponse {
    // Unknown
}

message PushRequestNotifyRingBell {
    // Unknown
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Misc
// ------------------------------------------------------------------------------------------------------------

message RequestBenchmarkThroughput {
    // Unknown
}

message RequestBenchmarkThroughputResponse {
    // Unknown
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Regulation Files
// ------------------------------------------------------------------------------------------------------------

message RequestGetRegulationFile {
    // Unknown
}

message RequestGetRegulationFileResponse {
    // Unknown
}

message RegulationFileMessage {
    // Unknown
}

message RegulationFileDiffData {
    // Unknown
}

message RegulationFileUpdateMessage {
    // Unknown
}

message RegulationFileUpdatePushMessage {
    // Unknown
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Networking
// ------------------------------------------------------------------------------------------------------------

message RequestMeasureUploadBandwidth {
    // Unknown
}

message RequestMeasureUploadBandwidthResponse {
    // Unknown
}

message RequestMeasureDownloadBandwidth {
    // Unknown
}

message RequestMeasureDownloadBandwidthResponse {
    // Unknown
}

message RequestSendMessageToPlayers { 
    required uint32 player_id = 1; // Invading playerid
    required PushRequestAllowBreakInTarget push_request_allow_break_in_target = 2;
}

message RequestSendMessageToPlayersResponse {
    // Unknown
}

message RequestSendMessageToSelectLanguagePlayers {
    // Unknown
}

message RequestSendMessageToSelectLanguagePlayersResponse {
    // Unknown
}

message RequestSendMessageToAllPlayers {
    // Unknown
}

message RequestSendMessageToAllPlayersResponse {
    // Unknown
}

message RequestSendPlayerList {
    // Unknown
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Ranking (I'm assuming this is for covenants)
// ------------------------------------------------------------------------------------------------------------

message RankingData {
    // Unknown
}

message RankingRotationID {
    // Unknown
}

message RankingRecordCount {
    // Unknown
}

message RankingDataPack {
    // Unknown
}

message RequestRegisterRankingData {
    // Unknown
}

message RequestRegisterRankingDataResponse {
    // Unknown
}

message RequestGetRankingData {
    // Unknown
}

message RequestGetRankingDataResponse {
    // Unknown
}

message RequestGetCharacterRankingData {
    // Unknown
}

message RequestGetCharacterRankingDataResponse {
    // Unknown
}

message RequestCountRankingData {
    // Unknown
}

message RequestCountRankingDataResponse {
    // Unknown
}

message RequestGetCurrentRank {
    // Unknown
}

message RequestGetCurrentRankResponse {
    // Unknown
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Marks (No idea what this is for? Talks about rituals, might be cut content?)
// ------------------------------------------------------------------------------------------------------------

message RitualMarkData {
    // Unknown
}

message LocatedRitualMark {
    // Unknown
}

message RitualMarkDomainLimit {
    // Unknown
}

message RequestCreateMark {
    // Unknown
}

message RequestCreateMarkResponse {
    // Unknown
}

message RequestRemoveMark {
    // Unknown
}

message RequestRemoveMarkResponse {
    // Unknown
}

message RequestReentryMark {
    // Unknown
}

message RequestReentryMarkResponse {
    // Unknown
}

message RequestGetMarkList {
    // Unknown
}

message RequestGetMarkListResponse {
    // Unknown
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Online shop - This for showing DLC?
// ------------------------------------------------------------------------------------------------------------

message RequestGetOnlineShopItemList {
    // Unknown
}

message RequestGetOnlineShopItemListResponse {
    message Lineup {
        // Unknown
    }
    // Unknown
}

// ------------------------------------------------------------------------------------------------------------
// Game Server Messages - Quick Matches (Undead Matches)
// ------------------------------------------------------------------------------------------------------------

message QuickMatchData {
    // Unknown
}

message QuickMatchSearchResult {
    // Unknown
}

message AcceptQuickMatchMessage {
    // Unknown
}

message RejectQuickMatchMessage {
    // Unknown
}

message RemoveQuickMatchMessage {
    // Unknown
}

message QuickMatchRank {
    // Unknown
}

message RequestSearchQuickMatch {
    message Map_id_list {
        // Unknown
    }
    // Unknown
}

message RequestSearchQuickMatchResponse {
    // Unknown
}

message RequestRegisterQuickMatch {
    // Unknown
}

message RequestUnregisterQuickMatch {
    // Unknown
}

message RequestUnregisterQuickMatchResponse {
    // Unknown
}

message RequestUpdateQuickMatch {
    // Unknown
}

message RequestUpdateQuickMatchResponse {
    // Unknown
}

message RequestJoinQuickMatch {
    // Unknown
}

message RequestJoinQuickMatchResponse {
    // Unknown
}

message RequestAcceptQuickMatch {
    // Unknown
}

message RequestAcceptQuickMatchResponse {
    // Unknown
}

message RequestRejectQuickMatch {
    // Unknown
}

message RequestRejectQuickMatchResponse {
    // Unknown
}

message PushRequestJoinQuickMatch {
    // Unknown
}

message PushRequestAcceptQuickMatch {
    // Unknown
}

message PushRequestRejectQuickMatch {
    // Unknown
}

message RequestSendQuickMatchStart {
    message Session_member_list {
        // Unknown
    }
    // Unknown
}

message RequestSendQuickMatchResult {
    // Unknown
}

message RequestSendQuickMatchResultResponse {
    // Unknown
}

message QuickMatchRankCache {
    // Unknown
}

message RequestPushSendQuickMatchStart {
    // Unknown
}

message QuickMatchSession {
    message Result_list {
        // Unknown
    }
    // Unknown
}

message QuickMatchApologyPoint {
    // Unknown
}
